
:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:
         -----=====Earth's Dreamlands=====-----
         (313)558-5024 - Supra 14.4 - Sysop: Gug
               A Game Master Support BBS
          RPG, Homebrew Beer,  & Fiction Text
.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.:.

Author: cbcsc063@ma.secs.csun.edu (Roger M. Wilcox a.k.a. Jeff Boeing)

Anyways, IUDC was written (primarily) in 1986.  This story, The Sick Kids,
is its sequel, and was written two years later in 1988.  To date this is
the only novel-length work of fiction I have concocted, and it still stands
as one of my better (though still seriously flawed) prose works.

Those of you who have memorized the nuances of all the AD&D first edition
loopholes will doubtlessly get a big kick out of this.  Especially if you
picked apart "Unearthed Arcana" the way I did when I got it in the *middle*
of writing this story.  (Unearthed Arcana is referred to as "The Other Book
of Infinite Wisdom" by the characters in this story.)

If anyone's interested, I can put together an ASCII version of the actual
character sheets for the characters in this story.  I used them *constantly*
for reference to make sure I wasn't missing any of their (tons of) abilities
or enabling them to do anything they couldn't.

----------CUT HERE----------CUT HERE-----------CUT HERE----------

   Roger M. Wilcox                           Length = 55000 words
18550 Prairie St. # 10
 Northridge, CA 91324
    April 2, 1987









                         "The Sick Kids"
                         Roger M. Wilcox







                             PART ONE

     Sick Sword nursed her baby daughter in one arm and her Sick
Sword in the other.  Disgusting Sword was quite a name to be born
with, but she was worth it.  After all, she would never have even
been born had not the Intercontinental Union of Disgusting
Characters brought Sick Sword and Ringman the paladin together.
     Ringman entered from a nearby room and smiled at the sight. 
About a year ago, Sick Sword had moved the small keep she'd
gained from the Deck of Many Things to the same clearing in which
she and Ringman had had their first romantic interlude, and the
sunlit trees sparkled gaily through the portal spells -- er,
windows.  This place hadn't seen any combat in its life, and
Ringman always liked being able to walk around without having to
wear +5 plate mail.
     "Do you know what day this is?" Sick Sword asked as she
simultaneously carried on a telepathic conversation with the Sick
Sword.
     "It's Tuesday," Ringman chuckled in reply.
     "Mm hmm.  It was also one year ago this date that the
I.U.D.C. was completely disbanded."
     "Oh, that's _right_!  It is, isn't it?  And it's also the
first anniversary of Omnion's death."
     "Thank goodness you got rid of her, too.  She was a real
pain.  I'm just sorry that God II doesn't condone going to the
outer planes and destroying someone's soul, otherwise I'd --"
     "-- But you wouldn't want to lose your alignment status, now
would you?" Ringman assured her.
     "Mm, I s'pose not.  I just don't like the thought of her
taking over Hell, or coming back as a 49th-level arch-lich, or
plane-travelling to any of the other outer planes and wreaking
any more havoc."
     Ringman hadn't heard of this last one.  "She can do that?"
     "Well, not for another 99 years; and even then she couldn't
get away with much.  Most of her power lay in her magic items,
and they've all been stored away in The Dungeon."
     "Uh, you _do_ mean a few levels _below_ The Dungeon, don't
you?"
     "Yeah, yeah, well, it's all the same place," Sick Sword
agreed as she put down her Sick Sword.  "I had to do _something_
with that old freehold of mine, didn't I?  And what better use is
there for stone walls and adamantite bars than to hold all the
surviving Union members?"
     "Ah yes.  Wild Max, the Grandfather of Assassins; Rango, the
17th-level ranger; Dirk the Destructive, the 20th-level anti-
paladin; Da Bad Dude, the 31st-level evil illusionist; and that
dastardly 20th-level 'paladin' Peter Perfect.  I hope I never see
any of 'em again."
     "Without their magic items and stripped of their psionic
powers, they're just as harmless as 31st-level kittens."
     Ringman suppressed a shudder and decided to change the
subject.  "So, what were you discussing with your sword just
now?"
     'He's getting pretty perceptive,' Sick Sword noted.  "I was
just seeing how well it was doing in the major benign powers
department."
     "And how many major powers does it have now?"
     "It's up to five.  Two more and I get another prime power."
     Ringman shook his head and snorted a disbelieving chuckle as
he turned and walked out of the room.  "I always thought it took
more than a year for something to become an artifact," he
muttered.
     The Sick Sword's rate of power gain _was_ pretty impressive,
she figured.  "I have eight extraordinary powers and eight
special purposes," the Sick Sword had told her.  "I'm almost an
artifact right now.  Why not let me go that last extra step and
become a real artifact?"  She had agreed, but she also made sure
that the sword picked up enough malevolent and side effects to
keep its personality score below hers.  The sword, therefore, now
had "alignment of possessor permanently changed to that of item"
and "user has limited omniscience" as well as bestowing total
immunity to all forms of mental and psionic attack.
     She fingered Disgusting Sword's chin lightly, and the baby
replied with "Hi mommy, you feel nice."  Age 3 months was a
little late to start speaking, but she would catch up.  She'd
need all the skills she could muster if she were to become as
powerful as Sick Sword wanted her to be.
     And then again, she thought as she rubbed her belly, if
Disgusting Sword didn't measure up, there was always the next
child she was pregnant with.
                                #
     "YOU!!" Rango screamed, clawing through the adamantite bars. 
"YOU'RE the one who got me into this mess!  You ought to be in
one of these cells just as much as any of us!!"
     Clerasil the 38th-level high priest maintained his smugness. 
"If you recall, I changed my mind."
     "Yeah, right, and I suppose none of the other Union members
gave you AAANNYYY peer pressure to stay in the group!"
     "That's right."
     "That's because you were away from headquarters when you
defected!!"
     "True, true.  But Wierd Dough wasn't away from
headquarters."
     "He was also nearly fried by that half-elven ultra-arch-
devil!"
     "Koenieg, Middle Monk, and Melnic the Loud thought the risk
was worth taking."
     "My God IV, man, Wierd Dough didn't even let me IN on what
was going on!!"
     "You knew about them later.  Omnion was practically
screaming their names out at every turn, from what I hear.  You
could _always_ have come over to the Right Side."
     "UP YOUR SIXTEEN-FOOT-STOP, CLERASIL!!"
     Clerasil, in the most insulting gesture he could dream up,
grinned at him and left without another word.
     "Looks like Rango hasn't calmed down yet," Wierd Dough the
49th-level arch-mage commented when Clerasil joined him.
     "Yeah, yeah, and he's sort-of right."  Clerasil was looking
slightly down and away.  "We _did_ make the Union in the first
place, after all."
     "Hmmph.  Don't think Peter Perfect wasn't instrumental in
that too."
     Koenieg the 14th-level Great Druid broke his druidic
silence.  "It is very convenient for you, then, to have Peter
Perfect to dump all of your blame and guilt on."
     Wierd Dough blinked at that.  Clerasil only looked down and
away even more.
     Middle Monk the Grand Master of Flowers, meanwhile,
approached Da Bad Dude's cell.  "How ya doin', Da Bad Dude?"
     The illusionist growled.  "If I had my spell books right
now, I'd cream you."
     Middle Monk folded his arms.  "No you wouldn't."
     "Okay, then," Da Bad Dude decided, "If I had my spell books
and my psionic powers, I'd cream you!"
     "No you wouldn't."
     "Well, then, if I had my spell books, and my psionic powers,
and my _magic items_, I'd cream you!"
     "No you wouldn't."  Middle Monk turned and walked away.
     "ALL RIGHT, THEN," Da Bad Dude shouted after him, "IF I HAD
MY SPELL BOOKS, AND MY PSIONIC POWERS, AND MY MAGIC ITEMS, AND MY
_ARTIFACTS_, I'D CREAM YOU!!"
     Middle Monk rejoined the other anti-Disgusting-Characters. 
Melnic the loud the Magna-Alumnae bard looked around.  "So, why
isn't Sick Sword on these little prison tours any more?"
     "She _says_ it's because she doesn't believe in laughing at
the prisoners," Wierd Dough said, "Which is ridiculous because
_everybody_ likes to gawk at the bad guys.  Actually, she hasn't
been around recently because --" he made a cradle out of his arms
"-- she has a little ga-ga to take care of."
     Clerasil shook his head.  "I _told_ her not to take off that
ring of protection."
     "Aah, she probably wanted it that way.  She _is_ a mortal
human after all, and she _does_ have to worry about the next
generation."
     Clerasil cocked his head to one side.  "So are you."
     "Er, um, yes, well, ahem, you see, I haven't had . . . uh
. . . much time for family life recently.  Yeah, that's it, not
much time."
     "Oh?" said Middle Monk.  "You seemed to have plenty of time
for that cute blond apprentice sorceress last --"
     "That's different!" Wierd Dough stammered.  "She needed help
learning her . . . um, somatic technique."
     "I'll bet.  What did you teach her to cast, a sleep spell?"
     "Well, you're just jealous because _you_ couldn't score with
any of the female recruits in your monastery."
     Clerasil intervened.  "_You've_ got your monastery, Middle
Monk; _you_, Wierd Dough, have your wizard's college; _you_, Melnic
the Loud, have your faculty position at Ollamh; _you_, Koenieg,
have your trees; and _I_ have my church of Clerasilism.  We've
been out of the Disgusting Character scene for over a year now. 
I don't even know why we bother to come to The Dungeon any more."
     "TO CHORTLE AT PETER PERFECT," Wierd Dough, Melnic the Loud,
and Middle Monk replied.
     Peter Perfect heard that, and clenched his teeth.  He was
the greatest thing on horseback until _those_ wimps decided to
join up with Sick Sword.  Now, he'd already spent a whole damn
year rotting away between adamantite bars and unbreakable stone
walls.  They'd stripped him of all his magic items.  They'd
whittled him down to zero psionic strength points, feebleminded
him, inflicted him with idiocy through an ego whip, then healed
both the idiocy and the feeblemind to leave him exactly as he was
before except without any psionic powers.  They'd dispelled every
spell he'd had made permanent upon him.  And they'd been feeding
him terrible meals every day since then -- without any dessert.
     He'd show 'em.  He'd get out and get even with them . . .
somehow.
                                #
     Sick Sword's second baby was just as beautiful a girl as the
first, especially considering that they both had 18 charisma.  In
fact, they both had straight 18's all the way across the board. 
She'd named this second child Ridiculous Sword, in the hope that
she'd be even more powerful than her first daughter.  She also
hoped that Disgusting Sword wouldn't mind if she played
favorites.
     "Don't play favorites, mommy," Disgusting Sword warned her. 
So much for that idea.
     Ringman entered the nursery and put his hands on Ridiculous
Sword.  "May I?" he asked.
     "Be my guest," Sick Sword shrugged.
     Ringman picked up the little girl and held her close to his
chest.  Ridiculous Sword liked that.  She always liked being held
by daddy.  She reached up and ran her tiny fingers through his
beard.
     "So," Ringman said, "You're going to bring them up to be
weapons masters, then clerics, then magic-users, right?"
     "No, silly, they're going to be druids first."
     "Uh . . . druids?"
     "Sure.  First they become druids and work their way up to
14th level, then they change to monk, then at 17th level they
change to thief, then --"
     "My goodness, what are they going to be?  Characters with
seven classes?"
     "Eight classes, actually.  After thief comes paladin, then
comes illusionist, then cleric, then magic-user, and finally
weapons master.  I figured if you put weapons master last you
could get to the highest level in that class, and that way you
could do even more per-level damage in melee combat."
     "Oh, _wow_, you're raising them to be the last word in
killing machines."  Ridiculous Sword sensed his anxiety and
withdrew.  "Sick Sword, what _use_ is there in making them into
disgusting characters?!"
     Sick Sword frowned.  "Don't _ever_ call them that."
     "Why not?  You're a disgusting character.  Just because you
didn't join the _Union_ of Disgusting Characters doesn't mean you
didn't make yourself just as powerful as they were."
     "Look, mister self-righteous, we've been over this before. 
I made myself disgusting so that I could get _rid_ of the
Disgusting Characters.  You know it would have been impossible to
stop them otherwise; you were there."
     "And that's just the point.  They're _not around_ anymore. 
You don't _need_ our kids to kill centaurs and take their four
one-million-gold-piece gems.  In fact, who's to say that one of
them might not turn power-hungry and abuse her disgusting
abilities?"
     Sick Sword's eyes turned to steel.  She lunged from her
chair and snatched Ridiculous Sword from Ringman's arms.  "That's
just about the lowest suggestion you could make, paladin!  These
are my children, I can keep my kids on the right side!"
     "They're my kids, too."
     "Not if you're going to raise them to be wimps like
yourself!"  Sick Sword shuddered slightly at having said that,
then turned her eyes away and looked at her daughters instead.
     Ringman walked over to a dresser, pulled open a small
drawer, and took out a pack of cards.  He slapped them down
loudly on the bureau top to get Sick Sword's attention.
     Sick Sword gasped, "My Hero's Collection of Commonly Used
Sayings!  What are you doing with them?!"
     Ringman put them in his left shirt pocket.  "You obviously
won't be needing them any more."
     "Get out."  It was a simple, poignant command.
     "Sick Sword, hon, if you can't take --"
     "Get out!  Get _out_ of my keep!"
     Ringman stopped cold.  "Out of the whole house?"
     "Get out!  And don't come back!!"  She pointed.  Her helm of
telepathy flared a dim red.  She'd psionically dominate his will
if she had to.
     Open-mouthed, Ringman slowly turned and walked out the
nursery door.  What had he brought upon himself?!
     "Get out!!" she called after him.
     He walked down the corridor to the foyer, half sad and half
dumbstruck.  He heard Ridiculous Sword's muffled voice cry,
"Daddy?", but nothing else.
     'My deity, my deity,' he thought.
     He glanced at the stone walls around him, half stunned and
half in sorrow, knowing he'd probably never see them again.
Despite the interior decorations, this place was still a converted
castle and thus had all the standard fortifications.  The vertical
notch in the outer wall, for instance, was called an arrow slit,
and Ringman had always thought that was just about the most
suggestive name for something he'd ever heard.  That comforted him
little now.  He took his +1 composite longbow and his quiver of +1
and +3 arrows off their pegs by the arrow slit, and stared
solemnly back at the nursery that was now around the corner.
     "Get out!" Sick Sword insisted.
     'X-ray vision,' Ringman thought, halfway in contempt.
     "No, clairvoyance; now _get out_!"
     He shook his head and would have chuckled were things not so
grim.  He put on the +5 suit of plate mail still standing in the
hall while he looked for his +3 periapt of proof against poison. 
Periapts were always easy to confuse with any ordinary gems that
might happen to be lying around.  He found it, though, thanks to
the big white +3 he'd painted on its side.  After securing the
adamantite-alloyed armor to his body, he strapped his +3 hand axe
and +5 holy longsword to either side.  Finally, he picked up his
+4 shield and slid his arm through it.
     One more trinket caught his eye, and he felt even worse for
having forgotten it.  It was Sick Sword's ring of shooting stars. 
A year-and-a-half ago, right after the downfall of the Disgusting
Characters, he'd given her the only ring he had, which was his
own ring of shooting stars.
     "That's sweet," Sick Sword had told him, but insisted that
he take _her_ ring of shooting stars, both to make them even and
in case he ever needed a shooting stars ring again.  Of course
he'd later recovered his old +3-in-a-five-foot-radius ring of
protection since he'd used up his potions and had two more slots
available within his magic item limits, but at times he had
cherished the ring she'd exchanged with him.
     He picked up the ring, turned it over in his hand, almost
put it back down, and finally slid it over his left ring finger
with a sigh.
     He opened the outer door, looked out solemnly, then looked
back one last time.  "Sick Sword," he began.
     "GET OUT!" came the reply.
     "I still love you."
     "_GET OUT_!!"
     And so, he did.  He had only one last stop to make, and that
was at the one-horse stall just off the east side of the keep.
     "Warhorse, old boy," Ringman addressed his warhorse, "It
looks like we'll be riding off alone again."
     The horse neighed in apparent sympathy and understanding.
     Ringman checked the horse's hooves; yes, the horseshoes of
speed were still firmly in place beneath the horseshoes of the
zephyr.  He hauled out his warhorse's old suit of magic plate
barding and began to put it on him; the horse didn't mind, seeing
that the armor was nearly weightless.  Odd; the Dungeon Master
must have decided to publish another official book, since the
horse's plate barding had dropped from +5 to +3 and was now only
meteorite iron steel.  Unlashing the horse's reins from the
hitching post, he put his right foot in the right meteorite-steel
stirrup, pulled himself up onto the meteorite-steel saddle, and
urged the horse forward with a sulken "Giddyap."
     He couldn't believe Sick Sword had actually thrown him out. 
She was his girlfriend -- effectively his _wife_ -- and she just
tossed him out like all their months together had meant nothing. 
He shook his head hard.  Why had he pushed her so hard about the
way she should raise their kids?!  Couldn't he have just talked
her out of her position more slowly?  Now those poor, fatherless
children would have an even bigger chance of turning to the wrong
side!
     He'd taken an oath, he assured himself; he'd taken an oath
when he became a paladin to uphold truth, justice, and the
lawful-good way.  Like The Impossible Dream, he would "fight for
the right without question or pause" and "be willing to march
into hell for a heavenly cause."  He had to tell her, straight-
out, that she was raising their kids to be just as disgusting of
characters as the ones they'd both despised.  Maybe she'd cool
down, eventually; maybe she'd even see it his way.
     He rode off into the wilderness.  He didn't feel like going
back into town right away.  The old I.U.D.C. headquarters at the
bank of Crysglass lake, in fact, would probably provide the
solitude he needed, if it wasn't swarming with scavenging
looters.  Who needed that old Sick Sword anyway?  After all, from
one centaur she'd gained four million experience points, and from
being instrumental in saving Central Earth _he'd_ gained enough
experience points to put him a fourth of the way to his next
level. . . .
                                #
     Peter Perfect hadn't heard many things from all the times
the Anti-Disgusting Characters had come to gawk at him, but he'd
heard enough.  Every magic item and magic artifact the Union had
had was stored in some vault a few levels below The Dungeon. 
This included his sentient holy sword, Prometheus.  He crossed
his legs on the floor and tried as best he could to let his mind
slip into alpha state.  He wondered why he had never thought of
this before.
     'Prometheus,' the word echoed in his mind.  'Prometheus,
hear me!'
     The sword should answer.  Eventually.  Even if Peter wasn't
telepathic any more, his sword still was.
     'Prometheus!'
     "I hear you, Peter Perfect."
     A response!  The sword heard him!  At least he _hoped_ that
dull voice in his head was the sword's and not something he'd
made up.  'Prometheus, where are you?'
     "I'm in a dark vault surrounded by bits of enchanted junk. 
I think I'm a few levels below ground in a freehold basement."
     'What signal strength are you reaching me at?'
     "Really strong.  I figure you couldn't be more than fifty
feet away.  Say, why didn't you use any of your telepathic powers
to call me?"
     'Because the Anti-Disgusting Characters stripped me of all
my psychic abilities.  Listen, can you cut your way through the
ceiling?'
     "Sure, I can try, but I can only animate myself for one
minute."
     Peter Perfect sighed.  'Yeah, that's right, your telekinesis
only lasts that long.  Well, give it a try and see what happens.'
     "Okay," the voice agreed.
     Deep within a chamber beneath The Dungeon, something moved. 
It wriggled its way through all the helms of brilliance and rings
of elemental command that had been heaped on top of it, and shot
up, impaling itself in the ceiling.  There, it sawed and pried
enough of the stones loose for its hilt to fit through, slid all
the way up to the next level, and found a darkened room there
too.
     "I made it up one level," the voice told Peter Perfect, "But
you're still a ways above me.  I'd estimate you're twenty or
twenty-five feet away."
     'Well, your teek still has some time to run.  Plow up
through another level.'
     "Roger."
     The object shot up through the darkness and impacted the
ceiling.  Peter Perfect could see the glowing green blade
sticking though his own cell floor.
     "It's working, Prometheus!" Peter Perfect urged it on with
his own voice.  "Work your way up through the rock!"
     The sword blade jutted its full length through the stone and
smacked into its own hilt.  "I can't go any further," it spoke to
Peter directly, "I can get my blade or my handle though, but my
T.K.'s almost gone and I can't work a hole big enough to fit my
hilt through."
     By now everyone's attention was drawn to Peter Perfect's
cell.  Even Wild Max the Grandfather of Assassins was getting
interested.
     "Then turn around and stick your grip through the hole,"
Peter Perfect insisted.  "I'll take it from there."
     "Okay, but --"  The blade withdrew from sight and switched
to telepathy.  "-- hurry up!  I'm almost out of lift!"
     The grip of the sword barely managed to poke itself through
the hole.  It shuddered, and started to drop -- and at just that
instant, Peter whipped out his hand and grabbed the handle. 
"GOTCHA!" he cried.
     "Yaaaaay!" all the other Disgusting prisoners cheered.
     Peter Perfect acknowledged the cheers of his audience, then
started to pull the sword loose.  "Come on, give," he insisted,
futilely trying to pull the sword through the hole with his
makeshift titan strength.  "What do they make the floors out of
in these places, anyway?"
     "Interlocking silicate stones containing trace quantities of
mithral, bound together by a mortar laced with 7.3 percent
mithral," the sword told him.  "Far more sturdy than the stuff
they made the last floor out of."
     "Prometheus," Peter Perfect said as he continued pulling.
     "Yes?"
     "Shut up."
     Peter started jamming the sword back-and-forth.  Bits of
rock crumbled away.  Finally, he gave a good stiff yank and the
whole assembly sprang out of the ground and held itself upright
in his right hand.
     "All RIGHT, Prometheus," Peter cheered, "We're a team again! 
Now let's get out of this rat trap!"
     He swung the sword around edge-on at the bars of his cell. 
The sword thwacked against a bar, made a loud ringing sound, and
shook in his hand.  The bar wasn't even scratched.
     "Damn," Peter cursed, "That's right.  Solid adamantite bars. 
The pure metal is +6, and you're only a +5 holy avenger.  Well,
the floor is just plain old mithral-laced, and that's only +4; so
it looks like we're gonna have to tunnel our way out."
     He hacked at the ground with Prometheus, widening the old
gash by several centimeters.  He stuck the sword in the crack and
began to saw.  In two minutes he'd nearly completed a full
circle.  Finally, he withdrew his holy sword and stamped his foot
down hard on the saw-loosened section of floor.  The little tab
still holding it on broke, and the disk fell through with a
crash.
     Peter triumphantly jumped down the hole, landed on top of
the slab he'd just loosened, and added enough weight to the
already-punctured floor beneath him to break _it_ as well and
continue on down until he landed in a pile of miscellaneous magic
items.
     Shaking himself back to his senses, he held prometheus up
high and looked around.  The green glow from the sword
illuminated everything within a twenty foot radius; and
everything within that radius looked wonderful.
     "This is IT!" Peter Perfect cried.  "This is where all our
stuff is stored!  In fact . . . yep, there it is!  My old +5 suit
of plate mail!"
     He pulled himself up onto his legs with his makeshift titan
strength (the permanent potion he had in effect didn't increase
his to-hit chances, you see) and walked through the minefield of
magic items to his suit of armor.  He was about to put it on when
a shimmer off to one side caught his eye.  The sword's green
light glittered off a coat of very fine chain links.
     "On the other hand," Peter Perfect mused, "Why bother with
just a run-of-the-mill suit of +5 plate mail . . ."  He crossed
to the chain coat and took it off its wall peg.  ". . . When I
can have the Invulnerable Coat of Arnd?"
     "Good choice," said Prometheus, thoroughly impressed. 
"Didn't that used to belong to Omnion?"
     "Aah, Omnion's dead now anyway," Peter replied, pulling the
coat over his head.  "She won't miss it."  He got the coat all
the way on and put his arms through the sleeves.  "Hmmm . . .
this only goes out as far as my upper arms and down as far as my
groin.  I'm gonna have to pirate the leggings and vambraces from
my old magic plate mail."
     He did.  His forearms and legs were now armor class -2.  He
clanked the vambraces on his arms together.  "Ahh, adamantite
alloy once again.  It feels so good to have this stuff back on my
body."  He tried to impale himself with Prometheus, but it only
sent up a few sparks.  "And this mail is totally unbreachable.  I
wonder what kind of stuff it's made out of; pure adamantite would
only be +6.  Now then, where's my Axe of the Dwarvish Lords?"
     He found his Axe, of course, after he'd located a scarab of
protection to let him resist the Axe's malevolent effects.  He
also found a germanium ring (that would be a ring of protection)
and an obsidian ring (a ring of regeneration).  His cup and
talisman of Al Akbar were hidden behind somebody else's +5 suit
of leather armor.  He eventually collected a helm of brilliance,
a helm of telepathy, a helm of teleportation (which he carefully
stacked on his head), a medallion of ESP with empathy, all the
rings of elemental command, a rod of lordly might, a cube of
force, a vampiric ring of regeneration, five dull gray ioun
stones (which he remembered he didn't need since his psionics
were gone), his +4 cloak of protection, a girdle of titan
strength, one pair of reverse eyes of petrification, his warhorse
(which had been stowed in a portable hole for the last year-and-
a-half), his warhorse's plate barding (which was still +5),
gautlets of dexterity, gauntlets of ogre power, a ring of raise
dead fully, a book of infinite spells or two, every other ring he
could possibly use (he could stack them on the inner and outer
sides of his gauntlets), his longsword of green dragon slaying,
and all the other various odds-and-ends he'd had when the Union
was still in force.  It was a good thing he had enough portable
holes to carry everything in.
     Getting out was the easy part.  He simply knocked open the
vault door from the inside, mounted his warhorse, rode across to
the staircase, and galloped out to freedom.
     "Hey," Prometheus complained, "Aren't you going to free the
rest of your comrades?"
     "Are you kidding?  Most of them are evil."
     "Rango the ranger isn't evil."
     "THAT wimp?  You must be kidding.  Let him find his own way
out."
     "Don't you even feel obliged to get back at Clerasil and
Wierd Dough for the way they treated him?  And you?"
     "No, no," Peter explained, "Vengeance isn't my style."
     'Now to get even,' he thought nastily.
                                #
     Tiamat rolled lazily over onto her back and laid another
white dragon egg.  This one was of the small variety, so the
white dragon that grew out of it wouldn't have quite as many hit
dice as it could.  She wondered if she should bother sending it
to a cooler climate so that it could survive.
     'Naah,' she figured, 'I saved a white dragon runt last week. 
Let this one burn here in Hell.'
     A rap on her front door rudely interrupted her train of
thought.  "Come in," she grumbled.
     Peter Perfect flung open the five-ton mithral door. 
Suddenly, Tiamat breathed with all five of her heads at once, and
Peter got hit with a cone of frost (which bounced off his
Invulnerable Coat of Arnd), a bolt of lightning (which bounced
off his Coat of Arnd), a stream of acid (which bounced off his
Coat of Arnd), a cloud of chlorine gas (which bounced off his
necklace of adaptation), and a cone of fire (which bounced off
his cup and talisman of Al Akbar).
     "WHAT DO YOU WANT?" all five of Tiamat's heads requested at
once.
     "Do you always breathe first and ask questions later?"
     "Of course," her red and white heads replied, "It keeps out
the door-to-door salesmen."
     "Tiamat, let me get right to the point."
     "Ohhh, please doooooooo. . . ." her black head said acidly.
     "I need some help taking revenge on the Anti-Disgusting
Characters."
     "And what's in it for me?" her white head asked coldly.
     "If I'm right, your life."
     "That's a pretty serious threat," her red head growled
hotly. 
     "Do you seriously think that those new sick kids Sick Sword
and Ringman have are going to just let you crank out evil dragons
in peace?  More likely, they're going to try to hack your brains
out right here in your lair.  And if they're anything like their
mother, they'll succeed."
     "I see your point," her blue head agreed, and there was a
spark to its voice.
     "So what do we do?" Peter inquired.
     "_WE_ DON'T DO ANYTHING," the five heads said in unison. 
"_YOU_ WOULDN'T STAND A CHANCE AGAINST SICK SWORD ONE-ON-ONE.  IN
FACT, NEITHER WOULD I; BUT I _CAN_ DESTROY HER AND HER FAMILY
. . ." she inhaled, "THROUGH TREACHERY.  SHE AND HER CONSORT,
RINGMAN, HAVE RECENTLY SPLIT UP, BUT HE DOES NOT REALIZE THAT SHE
IS PREGNANT WITH YET A _THIRD_ CHILD.  A BOY.  I SHALL PLANT THE
SEED OF EVIL WITHIN SICK SWORD'S WOMB.  WITHOUT A FATHER TO GUIDE
HIM, AND WITH HIS MOTHER PUSHING HIM TOWARDS
DISGUSTING-CHARACTER-LIKE POWER, HE WILL EASILY FALL PREY TO
BECOMING EXACTLY WHAT SHE DESPISES."
     "Okay, great," Peter Perfect agreed, "But how are you going
to plant this 'seed of evil' in her womb?"
     Her green head said: "I'm not," and then the other four
heads kicked back in: "YOU ARE."
     Peter folded his arms.  "Phhh, oh, right, I'm just going to
walk over to her with a packet of seeds and stuff them up her
birth canal without her objecting."
     The chromatic dragon only smiled evilly.  Her blue head: "Do
you have a potion of polymorph self in permanent effect on you?"
     "Of course I do."
     "Good. . . ."
                                #
     Sick Sword felt despondent.  Why should she? she thought. 
What did she need that paladin for, anyway?  Anybody who said she
shouldn't raise her kids to be tough and successful deserved to
be thrown out.  Maybe she just needed somebody else to go to bed
with.  Yeah, that must be it, she just had to get laid.
     She set Disgusting Sword and Ridiculous Sword down -- they'd
know how to take care of themselves -- put on her most arousing
skin-tight suit, and teleported into town just outside the
saloon.
     "Hey, Sick Sword!" echoed someone's voice as she walked
through the swinging doors.  Then another: "Hey, Sick Sword!"
     "How ya doin', Sick Sword?!" everybody turned around and
said.
     Sick Sword smiled wanly and started checking out the meat. 
She knew most of these guys so well she couldn't stomach the idea
of propositioning them.  There was one newcomer who caught her
eye, though, and she decided to try him.
     "You're new around here, aren't you?" she sidled up to him.
     The stranger's azure eyes looked straight at her.  There was
a nervousness about them that he kept carefully hidden.  "Yes, as
a matter of fact, this is the first time I've been out in over a
year.  I'm a paladin."
     "Really?" she said.  "Uh, hold on just a moment."
     She turned around, made some barely-noticeable gestures,
took a pinch of something out of a pouch, and mumbled some
phrases in Latin.  The stranger cupped one hand to his ear and
listened.  He recognized the incantation; she was casting a
detect lie spell.  He would have to be very careful about what he
said to her from then on.
     Forty-two seconds later, she whirled back around and asked,
"Say that again?"
     "You mean that I'm a paladin?"
     In her mind, a green light blinked over the stranger's head. 
He was telling the truth.  "How interesting.  I like paladins. 
What's your name?"
     The stranger's eyes rolled up into his head for a split-
second, then he decided, "Call me Slim."
     He wasn't very slim -- he was quite brawny, as a matter of
fact -- but she let it slide.  "Okay, Slim," she stuck out her
right hand, "I'm --"
     "Sick Sword.  Yes, I know."  He took her hand and kissed it. 
"I've heard much about you, m'lady."
     Sick Sword took her right hand back with a coquettish smile. 
"You're cute, you know that?"
     Slim smiled and raised his eyebrows.  "Yes, I do.  You're
not so bad-looking yourself, either."
     "Hey," Sam the bar frequenter said to the bartender,
"Wouldja lookit Sick Sword put the moves on that guy?"
     The bartender shook his head.  "I know.  Jeez."
     "But don't she and Ringman --"
     "Well, ya never can tell these days."
     "So," Sick Sword winked at her pick-up, "You wanna split
this joint and come up to my keep?"
     "Mmmm, sounds like fun."  He winked back.
     'Thank goodness this guy doesn't scare as easily as most of
them do,' she thought.
     "So, are you going to use any of those special powers of
yours and teleport us there, or --"
     "As a matter of fact --" boink "-- yes, I am."
     Slim looked around and took his bearings.  Considering the
large bed dominating the scene, this was probably her bedroom. 
This girl didn't waste any time.  He felt even more nervous than
before, now that he was in her home court.  He had no armor,
weapons, psionic powers, or charms; if she decided to take her
troubles out on him now . . .
     She stripped herself down to her bare 18 charisma skin right
in front of him.  He would have come in his pants were his
charisma not the epitome of perfection to match.  He slowly
unbuttoned his shirt, exposing the beefy chest within.  Sick
Sword couldn't restrain herself any longer and took off his
clothes for him in a 150%-permanent-potion-of-speeded flash.
     They didn't even bother to get beneath the sheets.
                                #
     "Mmmm, you're not bad, kiddo," Sick Sword cooed into his ear
after the exciting part was over.  "Where did you say you were
from?"
     "I didn't say where I was from," Slim told her.  "I hope I
didn't get you --"
     "Oh, don't worry about that, I'm _already_ pregnant."
     "Oh . . ." Slim said, trying to act surprised.  "Um, I
meant, I hope I didn't give you any --"
     "Well, you're immune to diseases anyway, being a paladin and
all; and even if you _are_ carrying something, I've always got my
periapt of health."
     "Oh.  Glad to hear it.  Well . . ."
     "Well, um, I . . . uh . . . guess I'll see you later then?"
     "Uh, yeah, guess I'll see you later too."
     They got up and got dressed at opposite ends of the room. 
If anything, Sick Sword felt worse.
     "G'bye," Slim said, and walked out the front door.
     'Hmm,' She figured, 'Guess he didn't need a ride back.'
     Slim didn't need a ride back, certainly not.  His warhorse
was parked just beyond the edge of the clearing he was now
exiting, as a matter of fact.  He could see the +5 plate barding
through the trees.
     "Whew," he told his horse, "Glad that's over with.  She
coulda gotten suspicious at any second."
     "Neeeigh," the horse replied.
     "Yeah, I know what you mean."  He pulled the finely-tooled
chain shirt out from one of the saddlebags of holding and put it
on.  By the time he'd drawn the coat of mail completely down over
his torso, his features had changed.  His hair was blond.  His
lower jaw jutted ever-so-slightly more forward.  His cheekbones
were slightly wider.  And his voice was more firmly in the
baritone range.
     He put on a weapon belt and drew its green glowing sword. 
"Well, Prometheus," he said to the sword, "At least I got laid. 
Even if that wasn't my own sperm I injected into her womb."
                                #
     Ringman only heard about his son Gross Sword through the
grapevine.  After living with his lady love for eighteen months,
here he was right back in his old cottage in town.  Of course his
cottage was actually a small castle, but without Sick Sword in it
it was hardly a keep.  He'd never managed to get back to the way
things were before Peter Perfect and the Disgusting Characters
had come along.  He would've started drinking were he not
concerned about keeping his paladinhood.
     So he had a third kid and he'd probably never see him.  He'd
come back to Sick Sword's keep once, all right -- for the sake of
seeing his daughters if not her -- but she only tossed him out
with an even louder "GET OUT" than before.  The glimpse he'd
gotten of her face before she slammed the door looked more like
Omnion than it did like her.  The next thing he knew, Sick Sword
had moved her keep several leagues away, back to where she'd
first drawn it from the deck.  He hadn't seen or heard from her
since.  Well, a paladin operated best as a solo player anyway; at
least, that was how he tried to reassure himself.
     He picked a volume up from one of his shelves and flipped to
the page he'd had marked.  His doomed relationship hadn't been a
total loss; she _had_ taught him how to read.
                                #
     Disgusting Sword reached her first level of Druidicism at
age 10 1/2. Again, she was a slow developer, but she could still
make it.  Sick Sword took her to the edge of a centaurs' lair and
pointed inside.
     "That's a centaur's lair," she told her daughter.
     "I know," Disgusting Sword replied.
     "Good.  And you know what to do?"
     "Of course."  Disgusting Sword activated her permanent
potion of flying at 150% effectiveness and wafted into the
shallow cave.
     One psionic blast and several clatterings of gems later, she
emerged as a 15th level druid, a 17th level monk, an 18th level
thief, a 21st level paladin, a 31st level illusionist, a 38th
level cleric, a 49th level magic-user, and a 58th level weapons
mistress.
     "Well," she said to Sick Sword, making sure all 533 of her
hit points were in place, "That was easy.  How long before my
magic sword becomes an artifact?"
     Ridiculous Sword was a little smarter.  The only reasons
Disgusting Sword had taken those particular levels of development
was so that each of her classes would be of higher level than the
one before it.  Reading between the lines on the rules,
Ridiculous Sword figured that it didn't matter what order her
levels were stacked in, so long as the last class she chose had
the highest experience level.  As the bard class couldn't be
started with a lawful-good alignment, she would need that rules
assumption if she were to become both a 20th level paladin and a
23rd level bard without losing her paladinhood.  
     And so, hitting the centaur pits on her tenth birthday (only
one day after her sister did), Ridiculous Sword emerged as a 23rd
level druid, a 15th level assassin, a 17th level monk, a 17th
level ranger, a 17th level thief, a 23rd level bard, a 20th level
paladin, a 31st level illusionist, a 38th level cleric, a 49th
level magic-user, and a 60th level weapons mistress.  She would
have gone farther in that last class had not the . . . Dungeon
Master . . . set the maximum half-point-per-level damage bonus
for weapons masters at +30 points.
     And she didn't stop at just one artifact weapon like her
sister did, either.  No sirree.  No one "Ridiculous Sword" for
Ridiculous Sword.  She had the Ridiculous Hand Axe -- a +6 holy
vorpal defender frost-brand flame-tongue sun luckblade of
wounding, dancing, life stealing, disruption, slaying everything
(as in the arrows of the same name), throwing, thunderbolts, red
blue green black white brass & copper dragon slaying, speed,
final word, and nine lives stealing with maximum intelligence,
eight special purposes, and enough artifact powers to leave her
set for life (including "weapon damage is +2 hit points" taken
five times) -- sure, Disgusting Sword practically had one of
those.  But she also had the Ridiculous Broadsword, which did
_almost_ everything the Ridiculous Hand Axe did except allow her
to cause serious wounds by touch.  And she had the
nearly-identical Ridiculous Dagger and Ridiculous Longsword, both
to boost her weapon damage by 20 points and to serve in melee if
she had to fight for more than four minutes and got to loose the
other two weapons to dance.  And in case she got totally unarmed,
she also had the Ridiculous Pair of Gloves, although it seemed
kind of strange to combine the gauntlets of ogre power effect
with a +6 holy vorpal pair of gloves of wounding and all the
rest.  And she had the Other Ridiculous Pair of Gloves, in case
her first pair got to fight for more than four minutes and could
be loosed to dance.
     And as if that weren't disgusting enough, she topped it off
with the granddaddy of all artifacts: the Bracer of Irresistible
Damage.  No sentience, no ego, just immunity to all forms of
mental, psionic, heat-in-a-20-foot-radius, and cold attacks, and
the ability to cast first, second, third, and fourth-level spells
simultaneously.
     And the "weapon damage is +2 hit points" major benign power
taken 100 times.
     Then came Gross Sword's turn.  The lad was younger than his
sisters, a bare nine years old, and Sick Sword had felt uneasy
about her third child all along the way.  But she felt obliged,
and was determined, to prove to herself that she didn't need that
old paladin Ringman to bring up her kids as deity-level psionic
magical powerhouses that could _really_ take care of themselves in
the outside world.  And so, when Gross Sword's whack at the
centaurs came, he was ready; although not quite the kind of ready
that Sick Sword had hoped.
     He found the cave, jumped in, and hit all the centaurs in
the room with a psionic blast just like Sick Sword had told him
to.  That stunned most of them and put the rest of them in a
coma.  He collected the sixty million gold pieces worth of
million-gold-piece gems just like Sick Sword had told him to. 
And he systematically killed every centaur in the room without
telling Sick Sword or anybody.
     He emerged into daylight and immediately began spending his
experience points just as his sisters had.  He progressed until
he was a twenty-third level druid, then switched and became a
fifteenth level assassin, then a seventeenth level monk, and then
on to rangerhood.
     Well, not quite on to rangerhood, and that made Sick Sword
feel really uneasy.  What he chose instead was to become an anti-
ranger so that he wouldn't once have to shift his alignment away
from evil.
     'Have I created a monster?' Sick Sword thought.  'No, no,
I'm overreacting.  Gross Sword knows what he's doing, sure.  His
alignment doesn't really mean that much, does it?  After all, the
Intercontinental Union of Disgusting Characters had all _sorts_ of
different alignments in it, and they got along just . . . fine.
. . .'
     And up through the 17th level of anti-rangerdom, to the 17th
level as a thief, to the 23rd level as a bard, and then . . . and
then he became an anti-paladin all the way out to the 20th level.
     But still, Sick Sword held firm.  This was her son, for
crying out loud, she couldn't just send him to his room for
something so trivial as an alignment choice, now could she?  Naw,
of course not.  And besides, his becoming an anti-paladin would
allow him to keep all the benefits of being an anti-ranger. 
Yeah, that must be why he did it.  Yeah, yeah, sure.
     Gross Sword kept that chaotic-evil alignment of his anti-
paladinhood all through his being a 31st level illusionist, a
38th level cleric, a 49th level magic-user, and a 60th level
weapons master.  It would be stupid to change alignments now;
he'd have to sacrifice both his anti-rangerhood and his anti-
paladinhood if he did.  Sick Sword knew that, and she wasn't
about to change him into anything less powerful than he already
was.
     And like Ridiculous Sword, Gross Sword bought four hundred
of each type of pearl of power (so that he could cast 426 of each
level of magic-user spell every day) and created seven magic
artifacts for himself: the Gross Dagger, the Gross Broadsword,
the Gross Longsword, the Gross Hand Axe, the Gross Pair of
Gloves, the Other Gross Pair of Gloves, and the Other Bracer of
Irresistible Damage.
     It didn't take long for all three of them to probability-
travel through a few dozen spheres of annihilation and gain every
major and minor psionic discipline, either, but every Disgusting
Character had done that at one time or another.
     'Every _Disgusting Character_?' Sick Sword thought in horror. 
'No, no, they're not Disgusting Characters.  Not _my_ kids.  No,
they're anti-Disgusting Characters, just like I am.  They must
be.  They have to be.'
     Ridiculous Sword, on the other hand, was extremely nervous
about her kid brother.
                                #
     A clamor in the streets shook Ringman from his midday doze. 
He heard cries of "Run for your lives!", "My god, it's him!", and
"He's back!".  'Finally,' Ringman thought.  'I haven't seen any
action in nearly nine  years!'  He clasped himself into his +5
suit of plate mail -- it still fit -- strapped on his +4 shield,
fastened his weapons belt around his waist, made sure his two
rings were still in place, and tramped out into the middle of
town.  
     He'd walked barely fifty feet from his door when he stopped
dead in his tracks.  He recognized the figure at the other end of
the street and drew his holy avenger.
     "Peter Perfect!" Ringman worked his voice into order.   
"How . . . how did _you_ get out?!"
     Peter had positioned himself so that he stood directly
between Ringman and the sun.  It made him look more impressive
that way.  "Ha ha, I've been 'out' for nine-and-a-half years!" 
He started to approach.  "And I must say, your ex-concubine is
really good in bed!"
     Ringman gasped.  "Sick Sword!  What have you done to her?!"
     "Nothing, Ringman, nothing at all.  Nothing she didn't agree
to, anyway."
     Ringman suppressed a shiver.  He couldn't speak.
     "Face it, Ringboy, you're ancient history and Sick Sword
knows it!  And so does Prometheus, right?"
     "Right," the sword in his right hand pulsed.  It would have
smiled if magic swords could smile.  "It's been a long time,
Ringman."
     Ringman sneered.  "At least the holy sword I have now
doesn't want to kill everything in sight!"
     "Too bad," Prometheus sighed.  "It doesn't know what it's
missing."
     "Oh, sure it does, Prome," Peter Perfect told his sword, at
every moment stalking closer to Ringman.  "It used to have a much
more lethal wielder, remember?"
     Ringman clenched his jaw hard.  "They should never have let
you live, Peter Perfect."  He spat out the two P's.
     "And I should never have let you live," Peter cursed, and
charged at him.
     Ringman saw the incoming flash of green.  He gasped, raised
his shield, and blocked Peter's Promethean swing with a full-
parry.  Pete followed up by hacking with his Axe of the Dwarvish
Lords; he hit Ringman's right shoulder, but not hard enough to
sever the arm.  (That is, he didn't roll an 18, 19, or 20.)  Of
course, Peter Perfect's cause-serious-wounds-by-touch ability
didn't help Ringman much, but at least he saved against contact
paralyzation.  As he clutched the wound with his shield arm,
Peter Perfect kicked his groin with an adamantite-tipped boot as
hard as he could.  Even Ringman's +5 plate mail couldn't
dissipate _all_ the impact strength of a blow like that; he
shrieked involuntarily, and was stunned.
     Peter Perfect straddled him, a nasty smirk across his face. 
He reached down and tore the +4 shield from Ringman's left arm,
then reached out once more for his downed opponent's holy
avenger.  Panicking himself back to his senses, Ringman rolled
aside and kept his holy sword in his own right hand.
     "Think you're pretty tough, do you, paladin?" Pete scorned. 
"You all thought The Dungeon was pretty tough too, didn't you!? 
So tough that none of you even came back to see if I'd escaped! 
But I _did_ escape, bwa ha ha, and I got back all my magic items
and artifacts -- and a certain invulnerable coat as a bonus.  And
I bought a few scrolls and, with the help of Prometheus here,
managed to recast all my permanent spells -- including protection
from good."
     Ringman wondered why he was incapable of moving during this
ego trip Peter Perfect was on.  He thought it was some special
power, but then dismissed that since he didn't see any magic
twinkles.  He thought it may have been some obscure rule about
getting to make unlimited soliloquies in combat; then he
remembered that it was just the fact that one exchange of blows
in melee combat took a whole minute.
     "And furthermore," Pete continued, "I struck up a deal with
Tiamat!"
     "Tiamat?" Ringman gulped.  "As in the chromatic dragon?"
     "No, as in the lady across the street!  Of COURSE the
chromatic dragon!  Geez, you never were very intelligent, were
you?  In any case, thanks to Tiamat's seed of evil, your son is
now precisely what you and your ex-bed-partner wanted him not to
be."
     "You struck a bargain with Tiamat for some 'seed of evil,'
and you're still a paladin?!"
     "Hey, the ends justify the means, Ringo.  It was my pleasure
to thrust Tiamat's seeds into Sick Sword's womb."
     Ringman lay there, dumbfounded.
     "Why do you think I did it with that bitch in the first
place?"
     Things couldn't have been much worse, Ringman figured.  He
had to get out of this disadvantaged position, though, before he
could think of what to do next.  He put his right thumb and index
finger in his mouth and whistled a string of three notes.
     "What are you doing?" Peter Perfect demanded.
     "Whistling," Ringman told him.
     "I KNOW that, but for what?!"  Peter Perfect clutched his
medallion of ESP and aimed it at Ringman's cranium. 
Unfortunately, he rolled a 6; he whacked the medallion in
disgust.  "Stupid newfangled piece of junk, can't even count on
it to work right!"
     Just then, a horse galloped silently into view on a cushion
of air.  Peter Perfect recognized it instantly from its +3 plate
barding; it was Ringman's warhorse.  He stood out in front of it,
between the horse and Ringman, and punched the horse across its
meteorite-steel-plated jaw as hard as he could.  The animal
rolled with the punch onto the ground some twenty feet back.
     In the mean time, Ringman had recovered his shield.  Peter
Perfect sneered at Ringman for daring to try something so dirty
and underhanded while claiming to be a paladin.  "Savor death,
insignificant flesh slug!"  He hacked down with his Axe of the
Dwarvish Lords, this time slashing Ringman's right shoulder
cleanly enough to sever his right arm.
     Ringman screamed with pain, now shocked out of his stunned
condition.  The arm socket gushed blood, but it would stop before
he ran out.  He let go of the top strap of his shield and grabbed
his severed arm -- which still held his holy sword -- with his
remaining hand.  The shield flopped uselessly from his elbow as
he scrambled for his horse.
     "Hah!" Peter Perfect called after Ringman, shaking his
Dwarvish Hand Axe in his left hand and inadvertently switching it
to Battle-Axe length.  "Let's see you fight without your writing
arm!"
     Ringman made it to his horse and tried to mount up.  He had
to hold the arm between his chin and his chest to get on.
     "You're a wimp, Ringman!  A one-armed wimp!"
     Stowing the right arm between his legs, he grabbed the
reigns in his left hand and giddyapped out of there.  He was
grateful for those horseshoe-of-the-zephyr shock absorbers; any
jostles could have sent him tumbling.
     "Ringman has no writing arm!  Ringman has no writing arm! 
And he's got a chaotic-evil Disgusting Character for a son!"
Peter chided him.
     'First stop, Clerasil's place,' Ringman thought as his horse
accelerated.  'He'll probably be able to reconnect my writing
arm.  Well, Peter Perfect, at least it _is_ a writing arm now. 
What self-improvements have _you_ made during lo these past
years?'
                                #
     Knock knock knock.
     "Who is it?"
     "It's Ringman."
     A bit surprised, Clerasil got up from his desk and went to
the tremendous gothic double doors.  The man on the other side of
it had +5 plate mail, a beard, and a severed right arm.
     "My right arm's been cut off," Ringman said, just in case
Clerasil hadn't noticed.
     "My word," Clerasil inspected the limb, "That does look
rather nasty.  Er, come in, come in."
     Ringman came in.
     "Tell me, who did this to you?"
     Ringman stared at the ground.  "Peter Perfect."
     Clerasil gasped.  "The Disgusting paladin?  He's escaped? 
But how?"
     "He didn't _say_ how, only that he's been out for nine years
or so."
     Clerasil seemed to be in a mild state of shock.  "Well . . .
uh . . . it's true that we stopped visiting him after a while;
er, we got tired of ragging on him.  But escaped?  I don't
unders-- wait a minute.  That's right.  We stored all their magic
weapons in a vault two levels below The Dungeon.  He could have
made telepathic contact with his holy sword and had it hack its
way up to him."
     "So, in other words, you didn't even bother to eliminate his
psionic powers."
     "Oh, yes we did; we were very careful about that.  It just
so happens that his _sword_ has its own powers of telepathy that
we couldn't touch."
     Ringman put a hand to his chin.  "Oh yeah.  That's right,
Prometheus _was_ telepathic.  I guess Prome just didn't want to be
telepathic with _me_."
     Clerasil changed the subject.  "Let's reconnect that arm of
yours, shall we?"
     Ringman had practically forgotten about it.  "Oh, uh, sure,
sure."
     Clerasil exposed the severed flesh on the end of the arm and
pressed it up next to the stump on Ringman's shoulder.  Ringman
had thoughtfully tied a tourniquet over the open end of his
stump.  "You know, you're lucky you're a paladin here.  Your
disease resistance let you get away with this without getting
gangrene."
     Ringman folded his arm.  "And then you'd have to cast a cure
disease spell on me, right?"
     Clerasil didn't reply, he merely opened the tourniquet and
let little bits of blood leak through to the severed limb.  He
sprinkled holy water on it and began to chant: "Ooom, shalagoom,
shak shak.  Qui tolis veal pecata mundi, et in unum domino's
pizza, e pluribus uranium, semper ubi sub ubi.  BY THE POWER OF
GOD III, I COMMAND THIS LIMB -- REGENERATED!"
     The mighty hand of God III stretched its fingers through
Clerasil's body and touched Ringman's shoulder with its awesome
pinky.  He could start to feel sensations in his arm almost
immediately, and within a minute, the limb was whole again.  He
moved the joint and flexed the arm a bit.
     "Uh, thanks," Ringman said.
     "And since you're a paladin and have had to give away all
your excess wealth," Clerasil said, "I'm gonna let you keep that
regenerated limb for the low low price of only 15 000 gold
pieces."
     Ringman scowled at him.  "That's the _usual_ price; and
besides, I gave all but a little under 300 gold pieces away to
some amorphous lawful-good institution long ago."
     "Hmmm.  Well, considering how crucial a role you played in
vanquishing Omnion 'way back when, I'll let you have it on the
house.  Now good day."
     Clerasil indicated the front door of his church and turned
back to his desk.
     "Um," Ringman umed.
     "Yes, yes what is it now?"  Clerasil kept his back turned to
him.
     Ringman exhaled.  "Peter Perfect's out, and I'm no match for
him."
     "And I suppose you want me to just go charging out there and
bring him back to justice, right?  Sorry, no sale."
     "He's already done plenty of damage."
     "Yeah, I saw your arm.  Now go away."
     "That's not all.  He made a pact with Tiamat."
     Clerasil dropped his writing utensils and froze.  "Tiamat? 
The chromatic dragon?"
     Ringman chuckled, recalling his own reaction.  "Yes, Tiamat,
the chromatic dragon, the hellbound spawn of all evil dragonkind. 
Apparently he and Tiamat . . . um . . . 'implanted' some seed of
evil in my third child before he was born, and now he's a
chaotic-evil genociding machine at least twice as powerful as his
mother.  Or at least he has the potential to be one."
     "Now I _know_ I'm out of my league.  Sick Sword herself could
have creamed me if she'd been so inclined; any kid more powerful
than her could stomp me into a little grease spot before I had a
chance to cast a spell.  Sorry.  Uh, you _could_ try asking Wierd
Dough, though."
                                #
     Knock knock knock.
     "Come in."
     Ringman opened the door and stepped into just about the
biggest magical pyrotechnics display he'd seen.  Sparks showered
off the walls in all directions.  Jugglers juggled without using
their hands.  People whose faces were glued to instruction
manuals cast burning hands spells without looking where they were
pointing.  Several graduate-level pranksters, doubtlessly from
one of the half-elven fraternities, were casting fireball and
cone of cone spells at the same time, annihilating each others'
effects mere milliseconds before disaster would have struck.  And
this was just Wierd Dough's magic college's anteroom.
     "Ah, whom may I say is calling?" asked a third-level
apprentice who was seemingly unaware of the din going on around
him.
     "Ringman."
     "Ringman.  Lessee, Ringman, Ringman, Ringman -- that Ringman
with an 'R'?"
     "Uh, yes.  R-I-N-G-M-A-N.  One word."
     "Ring, Ringfield, Ringling, Ringworm -- nope, sorry, no
Ringman on my appointment list here."
     "Look, this is important, I have to see Wierd Dough.  It's a
matter of life and death."
     The conjurer apprentice stared at him coldly.  "The
chancellor sees no one without an appointment."
     Ringman opened his mouth to speak, but a stray lightning
bolt startled him and he had to begin again.  "Just tell Wierd
Dough that Ringman is here to see him.  He'll know who I am."
     The apprentice shook his head.  "What level are you,
anyway?"
     "Ninth."
     "Oh, and I suppose you think you can push everybody around
just because you're a sorcerer?  Well, listen here, bud--"
     "I'm not a sorcerer," Ringman folded his arms impatiently,
"I'm a paladin."
     The apprentice mouthed the word 'paladin,' and then
evidently something snapped and it All Made Sense.  "Ringman     
. . . the paladin.  RINGMAN THE PALADIN?!"
     The spell casting going on through the room stopped in mid-
syllable.  Everybody dropped what they were doing and looked. 
"_RINGMAN THE PALADIN_?!"
     The apprentice gawked, "The same Ringman the paladin who
defeated Omnion in the final battle of the I.U.D.C. at Crysglass
lake?"
     "Yes, the same Ringman the paladin.  Boy, for a character
class whose prime requisite is supposed to be intelligence, you
can sure be --"
     "_Welcome_ to Wierd Dough's college of magic, Ringman!  Won't
you have a seat, make yourself comfortable, can I get you a glass
of --"
     "No, no, no."  He was still impatient.  "I have to see Wierd
Dough.  It's a matter of life and death."
     "Whose?  Yours or his?"
     "Everybody's."
     Now just a tad more nervous, the apprentice ducked behind a
curtain and shouted to the next rung in the chain of command. 
Ringman could just barely hear the "Ringman wants to see Wierd
Dough," and the "Not _the_ Ringman!" issuing from beyond.
     Twenty-four seconds later, everything spun around and
suddenly he was elsewhere.  He was in a very dimly lit elsewhere,
as a matter of fact.  In the center of this dimly lit elsewhere
was a robed figure who illuminated his bearded face by holding a
handful of magic flame up to it.  "Welcome," the firelit face
said in a haunting tone, "What can I do for you?"
     "Can the theatrics, Wierd Dough.  This is serious."
     "Oh, all right," the figure acquiesced, and switched on the
light spells by snapping his fingers.  "You sure know how to
spoil other people's fun!"
     "Peter Perfect escaped from The Dungeon nine years ago."
     Wierd Dough rubbed his chin in thought.  "Hmmph.  I wouldn't
put it beyond him.  He probably made telepathic contact with
Prometheus and had the sword hack its way up through two levels,
then grabbed on to it and worked his way down to the magic items
chamber, took his own stuff and the Invulnerable Coat of Arnd as
a souvenir, rode his warhorse out of the complex, and sought
revenge against the lot of us.  Pity we stopped going there to
make funny faces at him, or we would've found out."
     "You _knew about how he made his escape all the time?!"
Ringman stammered.
     "You mean my guess was _right_?"
     "Yes!  Your guess was _exactly_ right!  Why didn't you think
of it before?!"
     Wierd Dough shrugged.  "I just never wondered about it
before.  Anyway, he couldn't have done much or we would've heard
about it."
     "He _has_ done quite a bit, but it's the type of stuff you
_don't_ hear about until it's too late.  He got some 'seed of
evil' from Tiamat and implanted it in Sick Sword's womb while she
was pregnant with my third child, Gross Sword."
     Wierd Dough grinned.  "The old sexual-implantation-of-the-
deity-spawned-seed-of-alignment-determination-in-a-womb-that-has-
an-unborn-child-in-it bit, eh?  I tried that once myself. 
Nothing much happened, though."
     "Yeah, well something happened _this_ time.  Gross Sword is
supposedly a couple times more powerful than Sick Sword herself;
he could probably bring Central Earth to its knees."
     Wierd Dough nodded solemnly.  "And you want me to help you
get rid of him, is that it?  No, it's not.  You want me to help
you vanquish Peter Perfect and _then_ do something about Gross
Sword.  Sorry, kiddo, but I know about how poor you paladins tend
to be.  No sale."
     "You want me to _pay_ you for ridding the world of those
menaces?"
     "Sure.  Running a college of magic is expensive stuff."
     "You could rob centaurs if you wanted money."
     Weird Dough looked up at the ceiling, whose distance was
distorted so that it appeared 5 feet above the floor.  "True, but
then I wouldn't be able to complain about how low we are on funds
over here.  How would it look to all the other colleges if mine
didn't desperately need more money?"
     "Don't you feel the least bit indebted to me for having
gotten rid of Omnion?"
     "Indebted for how much you participated in that campaign? 
Sure I am!  I'll cast a polymorph others spell on you at no cost,
if you want it!  But going back into action again is another
matter entirely.  You're better off trying Middle Monk; at least
his profession involves constant fighting."
                                #
     The instant Ringman stepped on the welcome mat in front of
the monastery, a fifteen-foot-diameter gong sounded on its own
and Chinese movie music issued from enchanted loudspeakers.  One
of the lesser disciples approached the front gate and bowed,
greeting the man in the +5 plate mail.  "Gleetings, most
honolable Lingman the paradin, wercome to our humbre monastely. 
How may we assist you?"
     "I need to see Middle Monk," he told him.  "It's --"
     "--A matter of Rife and Death.  It always is.  I wouldn't
berieve you if you welen't who you are.  Forrow me."
     Never unclasping his hands, the disciple led Ringman in
through a complicated maze of hanging gardens, beneath a row of
paper lanterns, past some statues with unpronounceable
monosyllabic names, and past a paper sliding door into the Main
Training Room.  Ringman was a little worried about the security
of this place until he noticed that the paper walls were made of
adamantite-woven paper.  Three rows of monks, each wearing a
white bathrobe and a different colored sash, were going through a
training exercise.
     "Ichi!" the one up in front shouted.  They all stepped
forward and thrust their right fists into imaginary opponents. 
"Ni!" he shouted again, and they did the same with their left
fists.  "San!" came the shout and the punch again.  "Chi!" issued
the cry and its consequent a fourth time.  "GO!"  This time, the
three rows yelled as they stepped forward and punched.
     Middle Monk, the one at the front of the group wearing a
black belt with several victory notches carved in it, caught
Ringman out of the corner of his eye.  Realizing who it was, he
dismissed his students with an impulsive "Yasumeh!" and walked
like a slob up to the man in armor.
     "Ringman, ol' buddy!"  Middle Monk slapped him on the back
with his full titan strength.  Being a monk, his strength did no
extra damage, but it sure toppled the paladin.  "Long time no
see!  Whatcha been up to?  Can I get you a Coke or a Pepsi?"
     "Uh, Coke?  Pepsi?  Um, are those some oriental --"
     "Uh, no, no, never mind.  So," he began to walk alongside
Ringman, "What brings ya to these parts?  Wanna be a monk and be
easier to hit than a first-level illusionist?  Or do ya just need
a new magic bo stick?"
     "No, it's a bit more serious than that.  Peter Perfect
escaped."
     "No!  Really?  Wow, that's intense.  He wanted to go
surfing, right?"
     "He escaped nine years ago."
     Middle Monk stopped bantering for a few seconds, which was
about the longest time he could be relied upon to be banter-
proof.  Then: "Well, that cat probably would've gotten out some
time anyway.  Not much trouble he can cause."
     "Oh no?  He made a bargain with Tiamat so that my son, Gross
Sword, is just as chaotic and evil as my two daughters are lawful
and good.  And my blacksheep son is more powerful than anything
that's come before.  He could take on the entire I.U.D.C. and win
if they were still around."
     "Including Omnion?"
     "Including Omnion."
     "Oh."  Middle Monk grimaced a bit.  "Wow.  Gee.  Awesome. 
Tubular.  Cosmic.  Like, what's he done so far?"
     "Nothing that I'm aware of, but at any moment he could
decide to kill Bahamut or something."
     "I thought Weird Dough killed Bahamut for the experience
points," Middle said, then recalled:  "Oh, yeah, that's right. 
That was only a Bahamut android, programmed to act like him in
every detail."
     "Both that damned Peter Perfect and my multiple-deity-
powered son are running around loose, and there's no way I can
deal with them on my own."
     "Mmmm, so you want me to help.  I catch your drift.  Um, I
don't think that's such a hot idea, what with my armor class
being higher than negative 17 and all.  I mean, one hit and that
kid of yours could do . . . uh . . . how much damage did you say
he could do in one blow?"
     "I didn't say, but from what I've heard, over three hundred
points.  Times five if he hits you from the rear."
     "YEEESH!  I only have 104 hit points myself!  Um, take care
of yourself, man, but I've got my temple to attend to.  Why don't
you try Wierd Dough?"
     "Already tried him."
     "Hmmm.  Then Cleras-- no, that cleric wouldn't get involved
for all the holy water in the Specific Ocean."
     "Yes, I know," Ringman added coldly.
     "Then your best bet is Koenieg the Great Druid.  He lives in
the Great Big Forest surrounded by some large menhirs -- er,
standing stones -- that are supposed to predict eclipses and
things."
                                #
     Ringman could have sworn he'd gotten the address right.  He
was in the Great Big Forest, 5 leagues north of the Really Huge
Falls, twelve furlongs east of the Vastly Hugely Mind-bogglingly
Wide River, standing right in front of the Ring of Large Menhirs. 
He should have seen _some_ druidic activity by now.
     It was then that the bottom fell out of the universe beneath
him.  Screaming, he fell in a direction that was the fifth-
dimensional equivalent of down, and landed five feet away from
the center of the Ring of Large Menhirs.  From this angle, he
could easily see the nine initiates of the 9th Circle mulling
about and Koenieg the Great Druid seated in lotus position at the
center.
     "Oh, I get it," Ringman commented, "I can only see you from
_inside_ the menhir ring."
     "Naw," one of the 11th-level initiates told him, "That ring
of stones out there in the Great Big Forest is just a decoy.  The
ring you're in now is in a parallel universe.  It keeps the
salesmen out."
     A wave of mistletoe from the center caught Ringman's
attention.  Koenieg addressed him: "Welcome, Ringman, to the Tree
of the Universe."
     Ringman didn't see any trees around, but he had more
pressing matters to worry about.  "I'm here to --"
     "Enlist my help in vanquishing the escaped Peter Perfect and
your blacksheep son.  Yes, I know; Middle Monk sent me a
Telepagram.  I believe his words were 'Watch out for this one. 
He's a loo-loo.'"
     Ringman exhaled.  "Well, that was _his_ answer.  What's
yours?"
     Koenieg went off into alpha state for a few milliseconds,
then came back with: "No."
     "Why not?" Ringman asked, even though he knew it was futile
to try and talk a 14th-level druid out of anything.
     "The tree of the universe spreads like a golden path upon
the well-spring of Life.  He who can pick its fruits and not be
cast down the dark pit will know ultimate wisdom.  If Buddha
tripped and fell while nobody else was around, would he make a
sound?  He who always finds fault in his friends has faulty
friends.  A penny saved is a penny earned.  A bird in the hand is
worth two in the bush.  A stitch in time saves --"
     "Okay, OKAY, I get the message!  Sheish!"  He looked out
through the menhirs and saw only swirling darkness.  "Uh, can I
get back to the Prime Material plane now?"
     "Certainly.  Just click your heels together three times and
say, 'There's no place like home, there's no place like home'."
     Burying his face in his hands, Ringman grudgingly tapped the
heels of his high hard boots together and meekly chanted,
"There's no place like home, there's no place like home."
     And while Ringman had his eyes closed, Koenieg cast some
obscure plane transport spell on him so that he would think he'd
gone back to Central Earth under his own power.
     Of course, Ringman wasn't _that_ stupid, but he was glad to
be back on Central Earth again.  Well, sort-of glad.  Oh, all
right, he could barely stomach the thought of living on the same
planet with Peter Perfect and his killing machine son.  And he
hadn't even seen his killing machine son yet.
     "Yep," Ringman told his warhorse as he mounted up to ride
off, "There's no place like home."
                                #
     Clerasil had refused to help.  Wierd Dough had refused to
help.  Middle Monk had refused to help.  Even Koenieg the Great
Druid had declined his services.  The only anti-disgusting
character left was Melnic the Loud, and that bard would almost
certainly not get involved.
     The instant he stepped on the welcome mat in front of
Melnic's Ollamh college, he realized it was a telepad.  That was
because everything around him had suddenly congealed and
deposited him in the middle of the college's courtyard.  He found
himself surrounded by raucous, noisy, semi-drunk Ollamh bards,
some pure human and some half-elven, who upon his arrival began
strumming away at their lutes (a few had genuine Anstruth or
Ollamh harps) and singing:

     "Welcome, Ringman, to our fancy-pants abode!
      Ringman, the paladin, whose tale is still told
      Of how he vanquished Omnion to the realm of burning cold;
      Ringman, Ringman, aren't you getting too old?"

     "Uh, hi, guys," Ringman said wanly.
     "YAAAAAAAAAAAYYYYYY!!!"
     Melnic the Loud emerged from the middle of the crowd,
strummed his Ollamh Banjo, shifted his Recorder of Ye'Cind into
overdrive, and sang a fast little ditty that sounded very much
like Haydn's g minor symphony (except that Haydn hadn't been
invented yet):

     "From days of long ago a legend down to us has come,
      Or maybe it was Wierd Dough's mind that this message comes
          from;
      'Tis said that Peter Perfect had escaped his cell of late,
      And went to Hell to make a pact with Tiamat the great.

      And from his loins an evil seed in Sick Sword he did spray
      To make an evil child nine years ago this very day;
      And now he's tough, so all we'll say
      Is singing, singing, singing, singing, ye-e-e-e-e-es,
          . . . we are!"

     And all the other bards joined in and repeated the refrain:
"And now he's tough, so all we'll say / Is singing, singing,
singing, singing, ye-e-e-e-e-es, . . . we are!"  STRUM. 
Stru-dummmmmm.
     Ringman rolled his eyes up into his head.  That last line
didn't even fit in the context of the song.
     "We know that last line doesn't fit within the context of
the song," Melnic the Loud admitted in recitative, "But it's
. . . a tradition."
     "Well, for one thing, HE didn't make that child, I did. 
Gross Sword is my son just as much as he is Sick Sword's.  Peter
Perfect only . . . 'sprayed' . . . a little Tiamatish evilness
onto him a bit later."
     "OoooOOOOOOooooohhhhhhh," everybody sang.
     "So you probably already know that I need to enlist some
help.  I can't stop Peter Perfect and Gross Sword on my own. 
Melnic the Loud, will you --"
     "Well, er, I, um, that is, uh . . . I've got this college to
run, see?"
     Ringman folded his arms and shook his head.  "So did Wierd
Dough."
     "Good.  Then you'll understand."
     "I know why you're declining," Ringman said, "But I don't
think I'll ever understand."
     Ringman turned his back to Melnic and started to walk away,
then noticed all the 20th+ level Ollamh bards around him.  "Any
of you bards want to help me?"
     "Grumble grumble grumble grumble," they grumbled, suddenly
becoming concerned about their studies.
     Ringman walked slowly toward the telepad marked "MAIN EXIT"
at one side of the courtyard.  This had been his last shot. 
There was no one else he could turn to.
     'Oh well,' he tried to console himself, 'I've had to go it
on my own before.'
                                #
     Gross Sword scratched a few dark magic symbols into the
ground around Sick Sword's keep's clearing.  He couldn't stand
his sickening mother or his two goody-goody sisters.  He had
tried to wish them away once before, but they'd all made their
saving throws and a wish spell probably would have sent _him_ away
instead anyway.  Luckily they hadn't found out about that, so
they didn't vent any retribution upon him.
     He spied a squirrel scurrying up a nearby tree.  He hated
squirrels.  They were so cute and cuddly he wanted to throw up. 
He took out his Gross Hand Axe, whirled it around as though it
were a 5-ton war hammer, and let fly at the critter.  The
squirrel was instantly felled, frozen, burnt, wounded,
dismembered, poisoned, level-drained, hacked to bits, and finally
stunned by the axe's clap of thunder.  Sick Sword would
doubtlessly hear the noise, just like she always did, that bitch.
     "Gross Sword!" called his mother's voice from within the
keep.  "Are you killing squirrels again?!"
     "Yes, mother," he replied.
     "How many times have I told you not to do that?!"
     "Fifty-seven, counting now," he called back.  God IV, how he
hated Sick Sword.
     "Well, don't do it again!  How do you ever expect to make it
on Central Earth if you just go around killing things
indiscriminantly?!"
     Gross Sword shook with rage.  "All right, mother, THAT'S
IT!!"  He opened up one of his portable holes and took out a
tubeful of disappearing dust.  He spread the dust over his entire
body in the blink of an eye, and was gone from sight.  "YOU'RE
DEAD MOTHER!  DO YOU HEAR ME?!  _YOU'RE DEAD_!!!"
     "YOUREDEADyouredeadyouredead . . ." echoed his cry from
every distant mountain.  Disgusting Sword and Ridiculous Sword
looked up in alarm.  "That's it," Ridiculous Sword commented,
"He's making his move.  Come on, we'd better stop him."
     Their helms of teleportation glowed purple for a moment, and
they emerged at their mother's keep two leagues away.
     The town heard the thunderous cry as well.  Ringman, from
the top precipice of his house (which was actually a small
castle), heard the thunder's words and knew who the voice had to
belong to.  These were the first words he'd ever heard his son
say, and they frightened him down to his kidneys.  After all
she'd done to him, he still loved Sick Sword deeply, and now his
Tiamat-infected son was about to kill her and there wasn't a
damned thing he could do about it.
     Except dash for his warhorse and ride like lightning to Sick
Sword's keep, that is.
     Sick Sword zipped over to her portal spell -- er, window --
and saw the dust-of-disappearance-covered killer urchin trodding
through the front drawbridge of the keep at a rather alarming 40
feet per second.  The old cover-yourself-with-dust-of-
disappearance-and-cast-a-light-spell-directly-on-Sick-Sword's-
robe-of-eyes-to-blind-it-for-one-to-three-minutes-so-that-even-
her-permanent-detect-invisibility-spell-can't-see-you-and-you-
can-sneak-up-on-her-from-behind-and-backstab-her-for-quintuple-
damage trick; Omnion had tried that on her twice before, and had
succeeded the first time and nearly succeeded the second.  Sick
Sword knew what to do; all she had to do was spray him with dust
of appearance when he first showed up.  Now, where had she put
her dust tubes?
     The Sword sisters arrived just in time to see their evil
brother dart into the keep covered in dust of disappearance. 
They both knew this maneuver well; it was the only known way of
handling a really disgusting character.  Without even having to
use ESP on each other, they rushed in after him.
     Ringman rode hard and fast.  Very fast.  He'd equipped his
warhorse with horseshoes of speed and secured them in place with
an outer layer of horseshoes of the zephyr.  His horse could move
at double speed without tiring; and for some reason, right now it
was going two feet per second faster than that.  That would get
him there in time, he assured himself.  Of course it would.
     With a flick of his middle finger, Gross Sword knocked down
the solid adamantite door to Sick Sword's room.  His mother was
ready for him; she uncapped her tube of appearing dust and blew
at her son through the other end.
     That would have worked perfectly, had not Gross Sword also
been prepared.  For the last fifteen seconds, he'd been chanting,
gesticulating, and fiddling with a legume seed behind that locked
door; and now, having carefully integrated the flicking-down-the-
door maneuver into his somatic components, he released his spell,
blowing the spoilsport dust right back to its owner with a strong
gust of wind.  And since his artifact bracer allowed him to cast
simultaneous spells, he followed that gust of wind up with a
light spell thrown directly on Sick Sword's robe of eyes.
     Disgusting Sword and Ridiculous Sword had a clear line of
sight from the splintered drawbridge through the knocked-down
adamantite bedroom door to their blinded mother and her unseen
adversary.  He'd succeeded; she didn't manage to coat him with
dust of appearance in time.  "Get out of there, mom!" Disgusting
Sword and Ridiculous Sword shouted as they charged across the
foyer.  "Teleport!"
     Ringman could see the edge of the clearing through trees
blurred by speed.  Within that clearing lay the unmistakable
silhouette of her keep.  This was not the same clearing they'd
lived in together -- it was instead where the keep had first
materialized -- but it may as well have been.  There were
hundreds of bushes, trees, and leaf piles that could hide Sick
Sword and Gross Sword, if they weren't inside the keep.  Only
because that terrifying "YOU'RE DEAD!" sounded like it had come
from this particular spot did he ride here at all.  He changed
course ever-so-slightly and headed for the keep; he could only
hope that they were in fact in there.
     'My own son,' Sick Sword thought.  'How could I have misled
myself this far?'
     She didn't teleport.  She didn't look from side to side in
panic.  She didn't try to find another container of dust of
appearance.  She didn't even pick up her Sick Sword from the far
wall.  She just stood there and regretted her fate.
     'The bitch always was a pushover,' Gross Sword thought, and
rammed his Gross Dagger through her heart from behind.
     Disgusting Sword and Ridiculous Sword both saw the phantom
form impale their mother.  They both cringed in horror as she
convulsed and fell over dead.  Disgusting Sword involuntarily
dropped her Disgusting Longsword, which clanked noisily against
the stone floor.  As Gross Sword shook off the disappearing
faerie dust, he trumpeted an evil, victorious chortle that sent
shivers though both the still-approaching Ringman and his horse.
     He was still chortling when he left the prime material plane
six seconds later.
     "My God II," Disgusting Sword cried as she knelt beside her
dead mother.  "He wasn't supposed to _get_ this far!"  Her fists
clenched as her throat tightened up and wavered.  "We were
supposed to stop him first!!"
     Ridiculous Sword nervously looked at Disgusting Sword, then
at Sick Sword's body, then at Gross Sword's footprints in pile of
invisible dust he'd just shaken off, then back at Sick Sword's
body, then back at Gross Sword's footprints.  "I'm going after
him," she resolved.
     "But how will you know where he is?!" Disgusting Sword
demanded.
     "There's only one place he could have gone," Ridiculous
Sword replied.  "What's the matter, have you forgotten Standard
Evil Operating Procedure number twenty-six?  After an evil person
kills someone who's lawful-good, he or she goes to Heaven to
permanently destroy the soul!"
     Disgusting Sword just stared back at her and continued
breathing hard.
     "Well, don't just stand there, start a raise dead spell on
her!"
     "Oh," she blurted.  "Oh yeah."  She took out a white-with-
blue-striped generic holy symbol and began chanting and
gesticulating.
     "I only hope I can reach him in time," Ridiculous Sword
mumbled, flicked the switch or her amulet of the planes, and went
to Heaven.
     Ringman double-parked his horse by the keep's entrance,
jumped off, and rushed in through the door.  Without his bulky
adamantite-alloyed plate mail to hinder him, he could run a whole
1% faster.  He saw Disgusting Sword kneeling over Sick Sword's
body chanting a now-all-too-familiar raise dead spell, gasped,
and continued to rush forward.  He had been right; damn it, that
_had_ been Gross Sword's deadly chortle.  His old love was dead.
     He knelt beside Sick Sword opposite Disgusting Sword and
drew his holy avenger.  Solemnly lining up the point with one of
the spaces between the floor stones, he forced the blade three
inches down into the floor.  The upside-down sword now resembled
a cross, the ancient symbol for death.  He clasped the grip of
the longsword and reclined his forehead against his hands,
closing his eyes.  Silently, he prayed to his deity for Sick
Sword's survival.
                                #
     "Pardon me," Ridiculous Sword asked an angel-initiate
passer-by.  "Did you happen to see a --"
     She noticed a double-file path of dead angels littering the
yellow brick road that lead through the pearly gates.
     "Oh.  Never mind."
     She got a running start and then kicked in her artifacts. 
With all the times she'd taken major benign power "O: double
movement speed on foot," she'd multiplied her running speed by 2,
4, 8, 16, 32, all the way up to 64.  She could now run 12 288
yards in six seconds flat.
     Tiptoeing over the dead angels at a mere 6144 yards-per-six-
seconds, she reached the pearly gates.  She addressed the toll
booth.  "Saint Peter, you've got to let me in!  There's a --"
     And then she noticed that the trail of angel-initiates
weren't the only casualties around here.  Saint Peter had been
killed over a decade ago by Omnion, and now even his replacement,
Saint Paul, lay in a desiccated heap.
     'Guess I don't need his permission to enter, then,'
Ridiculous Sword thought, and charged in after Gross Sword.
     Sick Sword felt a sickening lump of deja vu form in her
stomach.  Here she was, perched on the boarding steps of a Trans
Heavenly Airlines concorde SST, unarmed and about to get
CuisinArted by a ruthless, evil foe.  She didn't much like being
in this position when Omnion was bearing down on her, and she
certainly didn't like the idea of getting eternally wiped out by
her own son.  She had seen this coming and had finished a contact
other plane spell several seconds ago, in case the worst were to
happen, and that didn't reassure her one bit.  So she did the
only thing she could: she started psionically telekinesing Gross
Sword and hoped that she'd be raised from the dead in time.
     Gross Sword held up Card Number 8 from The Villains
Collection of Commonly Used Sayings.  It read: "Hah, you puny
mortal fool!  Your powers of telekinesis are no match for my
permanent potion of flying at twice normal strength!"
     Sick Sword raised her eyebrows momentarily at the idea that
such a card could actually be a _commonly_ used saying, and
continued concentrating.  Card Number 8 was right; during the
first minute of concentration, her teke could only reduce his
flight speed by four percent.  She couldn't teleport, either;
teleportation involved using the astral plane for quick transit. 
Since she was dead, she was bound to the plane of Heaven and to
that plane only; she couldn't leave Heaven for another hundred
years.
     Ridiculous Sword wished she _had_ asked somebody for
directions now, even if it was only some cherubim-in-training. 
She was lost.  Every yellow brick road looked the same.  There
wasn't so much as a map pointing out "You are here," or a sign
saying "New angel recruits -->".  Saint Peter or Saint Paul sure
could have told her where Sick Sword had gone, yessireebob, but
for all her Disgusting powers there was no way she could locate
Sick Sword's spirit while it still had that %$!@#* mind blank
spell up!  Why couldn't Sick Sword have relied on her amulet of
life protection just for today?!
     Gross Sword drifted closer by the millisecond.  Sick Sword
was doomed, and she knew it.  Well, she might not be able to
leave Heaven, but she could bloody well still transmit her
thoughts through the contact-other-plane link she'd opened less
than a minute before.  If she was going to be annihilated, she
had to round out one last thing first. . . .
     "Ringman!" Sick Sword's voice echoed in Ringman's mind.
     "What?" he sat upright.  "Sick Sword?!"
     He glanced at Disgusting Sword.  His outburst had not
disturbed her prayer.
     Ringman could feel her presence almost as much as if she
were still alive.  He could feel the quavering fear, the
encroaching doom in her telepathic voice.  He could almost see
his own son bearing down on her with his adamantite dagger and
broadsword.
     "Ringman, you were right," the voice said.  "You were so
right, there _is_ no need for Disgusting Characters on Central
Earth anymore!  I should never have turned our children into
killing machines!"
     "Sick Sword," he clutched his face as he said it, "No, no! 
Don't let this be the end!  I still love you with all my heart!"
     "My love," she replied, and her voice sounded more final
than ever, "Ringman, I'm sorry. . . . I'm so, so sorry."
     A choking sensation cut across the telepathic ether, and her
transmission ended.  Ringman neither spake nor moved.
     "NO!" Ridiculous Sword shouted to Gross Sword when she at
last reached the scene, but too late.  Before she could get any
of her spells off, before even the quickest of her psionic
disciplines kicked in -- before there was any way she could beat
him to the punch -- Gross Sword impaled his mother's ghost on his
Gross Dagger and channeled enough damage into it from his Other
Bracer of Irresistible Damage to vaporize her.  Her phantasmal
form twinkled for an instant, and then dispersed itself back into
the cosmic ocean from whence it came.
     Disgusting Sword finished her prayer, pointed her right
index finger at Sick Sword's corpse's neck, and let her arm
recoil slightly.  The standard raise dead spark flashed on her
fingertip, but it wasn't echoed by the body at all.
     Disgusting Sword's mouth dropped open in disbelief.  Ringman
had already known for the last several seconds that it wouldn't
work anyway.  It was all over.
     Gross Sword smiled chaotic-evilly at Ridiculous Sword,
guffawed a hideous laugh, and left the plane of Heaven. 
Ridiculous Sword couldn't find him now unless he wanted to be
found.
     Ringman buried his face in his hands and started to shake. 
His fingertips grappled with his temples.  Then, not caring if
Disgusting Sword or Ridiculous Sword or the whole town heard him,
he tore his hands away and screamed as loudly as he could.
     "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH!"
     "Aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaah!" wailed the first echo.
     "Aaaaaaaaaaaaaaaaaaaah," cried the second.
     "Aaaaaaaaah . . ." whispered the third.
     The silence that followed was thunderous.  It took Ringman a
long while to break down and sob.
     'The poor man,' Disgusting Sword thought.  'It must really
be hard on him.'







                            PART TWO

     "Portable hole," Disgusting Sword read off the inventory
sheet.
     "Check," Ridiculous Sword replied, taking the folded piece
of black hyperdimensional cloth from Sick Sword's bureau and
stowing it in a trunk.
     "Second portable hole."
     "Check."  Ridiculous Sword did the same to this facsimile.
     "Fifty containers of dust of disappearance."
     "Tentwentythirtyfortyfifty -- check."
     "Ring of earth elemental command."
     Ridiculous Sword pulled the ring from Sick Sword's finger
and threw it into the trunk.  "Check.  Ringman, you sure you
don't want any of this stuff?"
     "Huh, what?" Ringman awoke from his stupor.  "Oh, no, no,
I've got my limit as a paladin.  Can't have more than four non-
armor non-shield non-weapon magic items, you know."
     Disgusting Sword shrugged.  "We've never gone by that
stipulation."
     "You also got this way via robbing centaurs," Ringman noted. 
"Sorry, that lifestyle's not for me."
     "Suit yourself.  Ring of water elemental command."
     "Check."  The ring made a "ting" as it landed in the trunk.
     "Plus six dagger of wounding."
     "Check."
     "Plus six bastard sword of wounding."
     "Check."
     "Mace of Cuthbert."
     "Check.  Hey, you think one of us ought to use that?"
     Disgusting Sword pondered the idea.  They _were_ both lawful-
good clerics with strengths of 18 or more, after all.  "Well,
we'll see.  Maybe later.  Hammer of thunderbolts."
     "Check."
     "Arrow of slaying lawful-evil half-elven fighter/magic-
user/thieves."
     "Check."
     "Plus five longbow."
     "Check."
     "Helm of brilliance."
     Sick Sword's lifeless head lolled gently up, then down, as
Ridiculous Sword took its bejewelled helmet off.  Ringman
couldn't bear to look anymore.  "Check."
     "Helm of teleportation."
     She took the helmet underneath the first off her head. 
"Check."
     "Helm of telepathy."
     She took the third helmet off her head.  "Check."
     "Amulet of life protection."
     Ridiculous Sword moved to the bureau and took out a charm-
on-a-chain.  Sick Sword hadn't needed the amulet's limited
psionic protection when her now-artifact sword had given her
total immunity to _all_ forms of mental or psionic attack.  And
despite its namesake, Ridiculous Sword reassured herself, the
amulet of life protection wouldn't have done any good against
Gross Sword anyway.  "Check."
     "Reverse eyes of petrification."
     Ridiculous Sword covered the spectacles with her hand so as
not to look at them.  "Check."
     "Sphere of annihilation."
     Ridiculous Sword calmly chucked the black ball of
nothingness into the trunk.  "Check."
     "Wand of negation."
     _This_ item she was more careful with.  "Check."
     And the list went on and on.  Altogether, 10 magic wands, 20
magic rings, 150 containers of magic dust, 3 magic helmets, 3
magic pairs of gauntlets, 17 magic ioun stones, 3 magic staves,
13 non-artifact magic weapons, and 45 other miscellaneous magic
items completed the inventory of the late Sick Sword's magic item
arsenal.
     "And last but certainly not least," Disgusting Sword
finished the list, "The Sick Sword."
     "I AM THE SICK SWORD," the Sick Sword bellowed as Ridiculous
Sword grabbed it.
     "Oh, pipe down," Ridiculous Sword silenced it.  "Check."
     She was about to toss it in the trunk, but she stopped
herself.  "You know, this weapon right here could do a lot of
good in the right hands.  Ringman, are you _sure_ you --"
     Ringman backed away emphatically.  "Even if I did have room
for it on my inventory, which I most definitely do not, you
understand, I am _not_ going to touch that sword again!"
     Ridiculous Sword let the sword fall and put her hands on her
hips.  "Hey, wait a minute.  You have four magic weapons, right?"
     "Yeah, that's right.  My holy sword, my +3 hand axe, my +1
bow and +1 and +3 arrows, and my --"
     "And you have one suit of magic armor and one magic shield,
right?"
     "Well, yeah, but I was in too much of a hurry to put them on
when I heard Gross Sw--"
     "And what other magic items do you have?"
     "Well, there's my ring of shooting stars," he counted _one_
on his fingers, "My +3-in-a-5-foot-radius ring of protection," he
counted two, "My +3 periapt of proof against poison," he counted
three, "And my . . . and, my . . . my . . . uh . . ."  His voice
trailed off.
     "You don't have a fourth magic item, do you?"  Ridiculous
Sword chuckled.  "Ha!  You'd been hauling around those two magic
potions for so long that you forgot when you used them that they
freed up _two_ slots on your inventory."
     "Oh, I remembered that, all right," Ringman defended
himself, "It's just that I've been --"
     "So preoccupied with the rest of the things going on in your
life you forgot about it," Ridiculous Sword finished the sentence
for him.  "Well, now I'm reminding you.  You _can_ have one more
magic item in your care."  She indicated the overflowing trunk. 
"Well, now's your chance to pick one.  These things might never
get used again otherwise."
     "No, no, I couldn't, I'm --"
     "Afraid of taking anything that once belonged to your true
love."
     Ringman grimaced.  "Well, yes, because then --"
     "You'd feel like a vampire."
     "WILL you stop doing that?!  Just because you can read my
mind doesn't mean I want you to!"
     Ridiculous Sword nodded solemnly.  "Sorry about that.  I
guess all the experience points in Central Earth wouldn't teach
me respect."
     "Anyhow," Disgusting Sword reached into the trunk, "How
about her old helm of brilliance?"
     "I already told you, I don't want --"
     "Oh, come come now.  It'll protect you like a double
strength ring of fire resistance, it'll glow pale blue whenever
undead are around, this pale blue glow'll do 1-6 points of damage
to the undead per minute, you can produce flame at will, it'll
turn your holy sword into a holy sword of flame, and you can fire
up to ten prismatic sprays, twenty walls of fire, thirty
fireballs, and forty light spells."
     Ringman rubbed his fuzzy chin.  This magic item _did_ seem
awfully useful.  "Uh . . . uh, no.  No, I couldn't.  Really."
     "Then how about this handy-dandy girdle of titan strength?" 
She held up the harness and added temptingly, "Plus 7 to-hit,
plus 14 to dam-age!"
     Hmmm, he thought.  Compared to the normal +2 to-hit and +5
to damage that his 18/92 strength allotted him, 25 strength would
certainly be an improvement.  He recalled how much he'd enjoyed
being super strong after imbibing that storm giant potion for the
final battle against the IUDC, and that only gave him 24
strength.  But that was only a power trip, he realized.  "No.  No
super strength for me.  There's enough of that in Central Earth."
     Disgusting Sword shrugged.  "Suit yourself.  Hey, then how
about a wand of negation?  One zap from this wand can instantly
neutralize any magic item it's pointed at 3/4 of the time.  Or,
in the same vein, a rod of cancellation might do wonders for you. 
It can instantly drain an item of all its magic powers just by
touching it."
     "They _would_ be useful against Peter Perfect and his ilk. 
Listen, I'll tell you, one of the reasons I'm reluctant to take a
fourth magic item is that my warhorse already has horseshoes of
the zephyr and horseshoes of speed.  I'd feel a little guilty if
--"
     "And you'd feel a little _stupid_ if having that one extra
magic item could have saved your skin the next time you clash
with Peter Perfect," Ridiculous Sword butted in.  "Besides,
didn't you used to have a carpet of flying?"
     "That was a _very_ long time ago.  I got rid of that years
before I even met Sick Sword.  And I have a fast warhorse
anyway."
     "Hey," Disgusting Sword resumed, "How about a rod of lordly
might?"
     "Doesn't that count as a weapon?"
     "Not if the Dungeon Master isn't looking."
     Ringman covered his eyes with his hands and shook his head.
     "Her old amulet of life protection would make you immune to
psionic blasts, and that's the only psionic attack mode that can
affect you.  Or that amulet of proof against detection and
location would keep the bad guys from finding out where you were. 
Or . . ."
     Ringman wasn't listening anymore.  He was lost in thought. 
'That helm of brilliance sounds marvelous.  Wearing that would be
like being a fire god.  But . . . titan strength, the ability to
lift and carry 1500 pounds without even straining, smash open
locked doors 9 times out of 10, successfully bend bars and lift
gates 110% of the time, and get +7 to hit and +14 to damage.'  He
rolled the words around in his head.  "Plus 7 to hit and plus 14
to damage.  Mmmmm.  +7 to-hit/+14 damage.
     "WHAT am I SAYING!" he suddenly blurted out.  Disgusting
Sword stopped rattling off item names.  Ringman hyperventilated. 
"Look, I can't get involved in any power trips, no matter how
tempting."
     "Don't tell me you actually think your code of paladinhood
prohibits that sort of thing!"
     "No, no, no, power trips . . . power trips got the I.U.D.C.
together in the first place.  Power trips turned Gross Sword to
chaos and evil.  I don't want that to keep on happening to
people, least of all to me."  He grasped his holy sword by the
hilt, which was still stuck point-first in one of the gaps
between the stones in the floor, and pulled it out.
     Or at least he tried to pull his sword out.  It wouldn't
budge.
     "Oh, come _on_, holy avenger, we've been through this before. 
You're not sentient.  You weren't forged by a wizard who looked
like a red push-button telephone receiver.  So stop playing that
sword-in-the-stone bit and come on out."
     He yanked again.  The few inches of the blade still stuck in
the masonry still refused to give.
     "Maybe it likes being Sick Sword's tombstone," Disgusting
Sword suggested.
     "We're gonna move Sick Sword anyway," Ringman said as he
strained with the stubborn longsword.  "She'd stink up the keep
if we didn't bury her.  And we can't exactly cremate her while
that permanent potion of fire resistance at 150% effectiveness is
still in effect on her.  Oh, stop playing dead, you stupid sword,
_let go_!"
     Ringman exhaled and dropped to his knees.  It seemed there
was only one way to get it out.  "Pretty please?" he pleaded with
the sword.
     The holy avenger leapt from its place in the floor into
Ringman's right hand.  Ringman shook his head in tired disbelief.
     Ridiculous Sword eyed the holy sword warily.  "Are you sure
that sword's not sentient?"
     "Sure I'm sure.  It's never so much as throbbed at me for
the whole time I've owned it, and Peter Perfect _said_ it was an
ordinary holy sword."
     "Lemme have it for a few minutes."
     Ringman shrugged.  "Okay."  He handed her the sword.  "What
are you going to do."
     She held the sword in her right hand, took out a scroll
she'd had specially scribed for just such an occasion, and read
the runes from the page.  The scroll looked like it would take a
while to read.
     "She's identifying it," Disgusting Sword told him.  "The
identify spell itself takes ten minutes to cast, but she can pick
up one property of your holy sword every six seconds after that."
     "Oh."
     "Say, what weapon do you use in your off hand?"
     "You mean, what's in my left hand when I'm wielding my holy
sword?" Ringman replied.  "My shield, of course."
     "No, I mean, what do you use in your left hand when you're
_not_ using your shield."
     "Oh.  Well, when Peter Perfect splintered my old +4 shield I
had to use my magic hand axe in my left hand."
     "I see.  And just how magic is your hand axe?"
     "Plus three.  Why?"
     "Well, you can use a dagger, right?"
     "Well, yeah, I have --"
     "So why not trade that old +3 hand axe in for Sick Sword's
+6 dagger of wounding?"
     Ringman opened his mouth in a half-stupor.  "A plus . . .
six . . . dagger . . . of wounding?" he whispered.  Then, in his
normal voice: "Hmmph, it's bad enough she was ever able to buy
such a weapon in the first place.  Can you imagine me walking
around with a pure adamantite dagger that leaves unhealable
wounds?"
     "And . . . you're sure you won't want that girdle of titan
strength?"
     Ringman stood up and put his hands behind his back.  "I
think," he mused as he strolled toward the window, "That I would
rather take in the view of the surrounding forest than wear a
girdle of titan strength."
     Disgusting Sword glared at him out of the corner of her eye. 
"Are you sure you're really our father?"
     Ringman glanced solemnly over his shoulder at her, and after
a few seconds replied, "Are you sure you're really my kids?"
     He looked out over the fields in the late-afternoon sun for
a long time, never so much as flinching.  Never so much as
looking back at his first daughter, whom his last question had
hurt.  It was only Ridiculous Sword's voice ten minutes later
that broke him out of his trance.
     "I think I've found something," she said, putting the sword
down.  She would have been quite exhausted had not that spell
come from a scroll instead of herself.
     "Oh?" Ringman turned toward her, only half-interested.
     "Your sword has no intelligence in the usual sense of sword
intellect.  However, it is sentient, in a way."  She handed the
holy avenger back to Ringman.
     Confused, Ringman carefully took the sword in both hands. 
He viewed it in a totally different light now.  "How . . . is it
sentient?"
     "It has one special power, in addition to being a run-of-
the-mill +5 holy longsword."
     'Run-of-the-mill holy sword?' Ringman thought.  "Um, what
power is that?"
     "If you embed it in stone, it won't come back out unless you
say, 'Pretty please'."
                                #
     Ringman rode rather slowly back to his own castle. 
Disgusting Sword and Ridiculous Sword could straighten things out
at his late girlfriend's keep on their own.
     His holy sword hung from his belt as it had on that hurried
journey over there.  He had firmly decided not to take any magic
items from Sick Sword's inventory home with him, so there was no
helm of brilliance capping his head or girdle of titan strength
circumscribing his waist.  However, there was one charge of Sick
Sword's that he did feel obliged to look after, and it sat on the
saddle behind him.
     "My master's gone," the brownie sobbed.  It had taken a long
time for him to get over the shock of having the mental cord
between himself and Sick Sword snap apart.  Familiars always took
a while to recover from the loss of their master.  Now his crying
had subsided to a gentle evening shower in the middle of the
forest.
     "I know how you feel," Ringman commented.  "Believe me, I
know how you feel, . . . uh, what's your name?"
     The half-pixie dried one of his eyes with his index finger. 
"Sick Sword always called me 'the brownie'."
     "She . . . she never even asked you your name?"
     "Naah, she was usually too busy, and most of the time I was
astrally projected so I wouldn't get hurt."  He gazed skyward,
then out at the forest.  His first home had been in a forest much
like this one.  "The astral plane was an awfully drear place; but
at least I had her thoughts to keep me company."
     "Did you have a name among the brownies?"
     "Well, yeah, my folks and all my friends used to call me
'Homer' before I got recruited to be Sick Sword's familiar."
     "So . . . you left your family and friends behind then."
     "Yeah, but at least I got this in the bargain."  He held up
a dimly glowing short sword.  "It's made of pure adamantite."
     Ringman chuckled slightly.  "So what around here isn't?"
     "Did . . . did you used to have family and friends too?"
     "You mean, before I became a paladin?  Well, yes, as a
matter of fact, I did.  My father was a mason, you see; in fact,
that was the family trade, fitting and mortaring stonework.  Of
course, like everyone in this culture I learned the family trade
too, but my father knew somebody who had connections with the
Knights' Guild, and that if I trained hard enough I could enter
the service of King Whatshisname the Seventy-Fifth.  So I went to
knight school --"
     "Couldn't you have gone in the daytime?"
     Ringman grimaced.  "That's an old pun.  Anyway, I made it
through knight training, entered the king's service, and
eventually got selected to be one of the elite palace knights. 
They said it had to do with certain rare qualities that were
determined at birth.
     "Anyhow, they gave me this book to learn called 'The Code of
Paladinhood.'  Only problem was that at the time I couldn't read,
so I had to learn it by rote.  Well, I did learn the paladin's
code, and the instant I finished reciting it before the Knights'
Guild I gained all these weird powers.  And pretty soon, I got
assigned to be guardian of the town I'm still living in."
     Homer rubbed his chin for a second.  "But you still haven't
told me about your family and friends."
     Ringman thought for a long moment.  He was looking down at
nothing in particular.  "Maybe that's because . . . I've been
trying not to remember them."
     They rode on through the forest in silence.
                                #
     Now that was something you didn't see every day, the first
guard thought.  Rarely did little boys ever visit The Dungeon,
and even then they usually weren't wearing robes of eyes.  Still,
he had his duty to uphold, so he straightened his scale mail,
drew his broadsword, hefted his shield, and asked, "Who goes
there?"
     The boy grinned and parted open his robe of eyes on one
side, then opened the black robe of the archmagi underneath so
that both guards could see the dagger sticking out of his belt-
sheath.  The tiny sliver of the blade that was exposed to sight
glowed a dim blue.
     The first guard nudged the second out of his nap with his
elbow.  The second guard rubbed his eyes to resolve the very
dangerous looking little boy stalking toward them.
     The first guard pointed his sword at the kid.  "Halt and
identify yourself!  Who are you?"
     The boy stopped four feet away from him and narrowed his
eyes until he stared out of slits.  "Your worst nightmare."
     The second guard drew his sword as the first one gasped and
tightened his posture.  It wasn't very easy to move in scale
mail.  It was, however, very easy to move in a robe of eyes and a
robe of the archmagi, particularly if you happened to be a 17th-
level monk and a 60th-level weapons master under the influence of
a potion of speed at double normal effectiveness.  The boy's hand
flashed out, snatched the broadsword from Guard Number One, and
squeezed until the blade broke in half.
     Startled, Guard Number Two swung his sword around in a
crescent arc, aiming for the kid's left shoulder.  Before he knew
what happened, the boy had drawn his dagger with his left hand,
sliced up through the air, and cut off the guard's right hand.
     "OWWWWWWW!" the guard screamed, slumping to the ground and
clutching his right wrist below the stump just as hard as he
could.  It didn't stop the slow trickle of blood.
     The first guard said some interjection in lawful-neutral and
scampered away as fast as he could.  The second guard wasn't
about to stop the youth from getting in The Dungeon if he wanted
in that badly.  He couldn't have stopped him anyway.
     'That's what I like about being chaotic evil,' Gross Sword
thought as he walked through the entrance, 'You can do anything
you want.'
     "Well well," Wild Max said when he glimpsed Gross Sword
walking into the visitors' arena, "What have we here?"
     "It's a boy!" declared Rango.
     "A boy wearing a robe of eyes!" Da Bad Dude observed.
     "And a black robe of the archmagi," Dirk the Destructive
added.
     "And holding," Rango examined the dagger in his left hand,
"A +6 unholy dancing frost-brand defender anti-sun blade of
wounding, sharpness, throwing, thunderbolts, venom, life
stealing, slaying everything, contradisruption, bronze dragon
slaying, brass dragon slaying, copper dragon slaying, gold dragon
slaying, silver dragon slaying, green dragon slaying, blue dragon
slaying, speed, final word, and nine lives stealing."
     A fire leapt up from the dagger's hilt and consumed the
blade.  "You forgot flame-tongue," the Gross Dagger complained.
     "Oh, how stupid of me," Rango said.
     "Frost-brand and flame-tongue at the same time?" Da Bad Dude
wondered.
     "Humph," Gross Sword humphed.  "Hmm.  Ha.  Ha ha.  HA!  HA
HA HA HA HO HO HO HO HO!  HARDEHARHARHAR!!"
     "Hey," Wild Max sneered, "What's so funny?!?"
     "You call yourselves Disgusting Characters?!?  HAH!  I spit
on your feeble attempts of disgust!  PTOOI!"
     "Well, what do you expect?!" Dirk the Destructive said
defensively.  "We've been stripped of our magic items, our
psionic powers, and our dignity.  Why, back in the days of the
Union, we could --"
     "DO NOTHING!  Your pathetic Union was defeated by a bunch of
wimps as weak as yourselves!"  He reached into one of his
portable holes, pulled out his three magic helms, and stacked
them on his head where they belonged.  "Why, my _mother_ could
defeat your most powerful member."
     "Oh yeah?  Who's your mother, kid, Sick Sword?!"
     "As a matter of fact, yes."
     _That_ got their attention.
     "Or at least she was until today.  Now she's nothing."
     Rango shrugged.  "Well, don't look at any of us.  We didn't
have anything to do with it."
     "Not that we're sorry to see her go," Wild Max gloated.
     "Of course not.  _I_ killed her and evaporated her soul."
     All four pairs of ex-IUDC-members' eyes bugged out.  Then
slowly, one by one, they began applauding their boy hero.  Gross
Sword bowed.
     "Kiddo," Da Bad Dude said amid the mounting cheers, "You've
just got yourself four followers for life."
     "Followers?" Gloss Sword asked rhetorically.  He'd expected
someone to suggest that, but turned the word into a question
anyway for dramatic effect.  "Oh, I'm not interested in
followers.  You four are going to bow down and worship me."
     The cheering stopped instantly.
     "Or I will kill each and every one of you."
     A purple shimmer in the middle of the room broke the mood. 
The ex-Disgusting-Characters all wiped their brows in relief
until they saw who it was stepping out of the purple shimmer.
     "I thought I might find you here, Gross Sword," Ridiculous
Sword said.
     "Well, sister dear," Gross Sword smiled chaotic-evilly,
"Long time no see.  Too bad about dear old mom, eh?"
     "You've killed your last prime material being, Gross --"
     "And she might have survived, too, had she ever bothered to
draw the 'fates' card from a deck of many things.  Tch tch tch."
     Very calmly, she said, "Defend yourself, brother," and
charged at him at 12 288 feet-per-six-seconds.
     Gross Sword's Gross Broadsword deflected Ridiculous Sword's
Ridiculous Hand Axe with no trouble at all.  Of course, the clap
of thunder that rose out of the weapon-to-weapon contact was a
bit unnerving.  "I always have," Gross sword replied to her last
instruction.
     This time, it was Ridiculous Sword's Ridiculous Broadsword's
turn to parry Gross Sword's Gross Dagger, which it did quite
well.  With a little guidance from its disgustingly accurate
owner and another very loud thunder clap, of course.
     "Hmmm," Gross Sword said in between sword hacks, "Not bad
for an amateur."
     Ridiculous Sword glanced around at the cells around her and
their terrified occupants.  Each weapon-to-weapon thunderbolt
probably brought them that much closer to deafness.  She would
have to take the battle outside.  Breaking off from the fray, she
ran out through the entrance doorway, past the wounded guard, and
into the elysian fields.
     Gross Sword ran out as far as the de-handed guard in the
doorway, then stopped.  "Gee, too bad," he said very loudly, "If
you won't engage me I guess I'll just have to kill _him_ instead!"
     Ridiculous Sword had to get his attention, and fast.  "Gross
Sword sleeps with his Teddy bear!" she teased, and scampered
insultingly away.
     "I do not!" the nine-year-old disgusting boy replied.  "And
besides, he's a Teddy dragon-turtle."  He charged after her.
     They clashed again.  And again.  Their weapons sent peals of
thunder echoing from the far-off peaks.  And neither of them got
hit.
     "I see," Gross Sword said over the prevailing thunder, "That
the Dungeon Master hasn't retracted that old limitation requiring
you to roll a natural 20 to hit anyone who's armor class -17 or
better."
     "Don't play dumb with me," Ridiculous Sword replied just as
audibly.  "The Dungeon Master let us add our to-hit bonuses into
those 'extended twenties' on the attack matrices long ago.  Our
armor classes are just so good that we can't hit each other
anyway."
     They couldn't even hit each other by surprise or from
behind, either, as they eventually discovered.  Their rear armor
classes were -45, not counting their protections from evil/good.
     Clang, clash, the skirmish continued.  Clang, clang, clang,
shink, kssh, kssh, shunk, pshank -- they could have knocked each
other unconscious and never hit each other.  They were hit-proof
even in their sleep.  This was getting them nowhere.
     "This is getting us nowhere," Ridiculous Sword commented.
     "Who cares?  This is the most fun I've had in hours!"
     Sparks flew from their weapons, dusty roads and elysian
fields got trampled underfoot, a few people and some forest
creatures in the vicinity went deaf, and still they hadn't a
scratch on them.  Neither of them dared to use any of their "slay
living" or "finger of death" spells, both because they'd easily
make their saving throws and because any spells they cast at each
other would set up a resonating field between their rings of
spell turning.  It was a stalemate, pure and simple.
     And finally, even Gross Sword got tired of playing this
silly game.
     "I'm tired of playing this silly game.  I think I'll go wipe
out an upper or lower plane instead."
     "No!" Ridiculous Sword accidentally gasped.
     Gross Sword smiled.  "You'll see me around again.  On one
plane or another."  And with that, he vanished.
     Ridiculous Sword let her weapons drop down by her side, and
retrieved her Ridiculous Dagger and Ridiculous Longsword from out
of the air.  Being weapons of dancing, the dagger and longsword
had been doing their part independent of her.  Then again, Gross
Sword had been doing _his_ part independent of her since before he
was born.  She wished she knew what had made him go wrong, she
wished one of those commune spells or audiences with the Dungeon
Master or Ollamh bards would have let her in on the secret. 
Something about spraying an evil seed was all she'd ever picked
up.
     But first, she had to warn the other planes of what might
soon happen to them.  Gross Sword could attack anyplace at any
time, but his most likely targets would be those planes that were
lawful good.  After all, he could goad her the most by attacking
a saintly plane, and his own alignment was diametrically opposed
to law and good anyway.  That narrowed his choices down to the
three levels of Arcadia, the seven Heavens, and the Twin
Paradises.  Twelve planes to choose from, and Gross Sword could
strike at any one of those.  Well, she had better get st--
     No, there was a thirteenth plane she'd almost neglected to
include: the back of the east wind, where Bahamut's palace stood. 
The lord of all good dragons; wouldn't _his_ head make an
excellent trophy to hang on Gross Sword's wall.  That would have
to be Ridiculous Sword's first stop.
                                #
     "Bahamut!" Ridiculous Sword called out.  There was no
answer.  Surely, the one platinum dragon could hear her; his
palace was barely a hundred yards away.  Even if the palace _was_
invisible to normal sight.  She approached a bit closer, and
called for him again: "BA-hamut!"
     An old hermit creaked up to her from a nearby brook down a
hill.  There were seven canaries flitting around his head.  "Are
you looking for the platinum dragon?" the hermit asked.
     "Oh, there you are," Ridiculous Sword said nonchalantly. 
"Hi, Bahamut.  We have to talk."
     The hermit studied her closely, then gasped and bugged out
his eyes.  "It's _you_!" he exclaimed, and as he said this his
body underwent a startling transformation.  His neck elongated
and thickened, his arms and legs elongated and thickened, his
head elongated and thickened, his torso elongated and thickened,
his previously non-existent tail elongated and thickened, and his
skin turned from wrinkled dry tan to shining platinum.  Within
seconds, the hermit was a huge ancient dragon once more.
     His canaries turned into huge ancient gold dragons too, but
that was what usually happened anyway.  "Ridiculous Sword!"
Bahamut said, quivering in awe.  He bowed in that way that only
dragons can.  "I'm honored by your presence!  Tell me, what
brings you to the back of the east wind?"
     "I came here to warn you about my brother, Gross . . . hey,
wait a minute.  Didn't Wierd Dough kill you for your experience
points?"
     "Oh, phhh, that was only my Bahamut android, programmed to
act like me in every detail.  So what is this warning about your
brother?"
     "He's finally flipped," Ridiculous Sword exhaled.  "I saw it
coming for a long time, 'though I'm not sure why.  He said he
wanted to wipe out an upper or lower plane, and he's fully
capable of following through on that promise.  This place is his
most likely target.  And so are you."
     Bahamut shook his tremendous mane and swallowed hard in that
way that only huge ancient platinum dragons can.  "And . . . what
can I do to protect myself and my court?"
     Ridiculous Sword glanced downward.  "I wish I knew."
     And that's when the air behind Bahamut glowed purple for a
moment.
     "Holy feces," Ridiculous Sword cursed, "He's here."  She
drew her Ridiculous Hand Axe and her Ridiculous Broadsword and
ran around behind the dragon lord.
     Gross Sword only smiled and sprinted in a wide arc out to
Bahamut's right side.  Ridiculous Sword followed at the same
impossible breakneck speed, but there was really no way she could
catch up to him.  Not unless he made a mistake.
     He seemed to be making a mistake, Ridiculous Sword noticed. 
He seemed to be running too slowly.  Ridiculous Sword was
actually catching up with him.  She knew he had the same set of
artifact powers and the same running speed as she did -- their
infernal balance of power insured that -- so then why would he
run slow enough for her to close the gap?
     It was not Gross Sword that had made the mistake.  It was
Ridiculous Sword who had.  She was so intent on catching up with
her brother that she didn't think that maybe he wanted her to
catch up.  Just as Ridiculous Sword was nearly upon him, Gross
Sword doubled back and headed for the platinum dragon at full
tilt.
     Ridiculous Sword cursed herself for falling into that trap,
leapt, executed a midair flip, and sprinted back toward her
brother and the dragon lord she had been trying to protect.  She
wasn't closing in on Gross Sword this time, though.
     But Bahamut wasn't going to take this sitting still.  He
knew about disgusting characters' armor classes, so clawing and
biting were out of the question; besides, they had far too many
hit points to kill in just a few blows.  Instead, he opened his
cavernous maw and exhaled a cloud of vapor at the boy-demon
charging him.  The seven gold dragons by his side also breathed
seven cones of fire at the light-brown-haired youth in case that
might do any good.
     If by some miracle of nature Gross Sword had managed to roll
a "1" on a 20-sided die against Bahamut's vaporous breath, he
would have assumed gaseous form for two whole hours.  As it was,
though, he was neither vaporized nor fried; the flames all
bounced off his fireproof Other Bracer of Irresistible Damage
anyway.  He closed to terrifyingly close range with Bahamut,
glanced over his shoulder at his sister (who was only 10 yards
behind him), jumped, whirled around in midair, landed on the back
of Bahamut's neck, and poised his Gross Broadsword threateningly
beneath the platinum dragon's chin.  "FREEZE!" he commanded.
     Ridiculous Sword hesitated.  The dragon lord was motionless
as stone.
     "One more step, Ridiculous Sword, and Bahamut here gets it!"
     Ridiculous Sword eyed her brother warily.  He had already
killed his own mother; he was certainly capable of following
through with his threat.  She wondered why he hadn't just killed
Bahamut outright.
     "Now, throw down your weapons," Gross Sword ordered.
     'So that's his plan,' Ridiculous Sword thought.  'Make me
disarm myself, then he can kill me and Bahamut both.'  "You'd
kill him anyway," she said, and leapt through the air toward him.
     "You're right," Gross Sword replied, "I would."  And the
instant before Ridiculous Sword reached him, he stuck his sword
into Bahamut's throat and did 345 points of damage.  And that
wasn't even counting the life stealing, slaying, venom, severing,
or disintegration effects of the weapon.  Bahamut slumped
headless to the ground.
     Gross Sword liked the feeling of that so much he killed one
of the seven huge ancient gold dragons as well before he used his
amulet of the planes to transport him out.
     There wasn't a human or gold dragon present who wasn't
screaming, crying, or moaning.
                                #
     Ringman was unaware of what had just transpired at the back
of the east wind.  He had his own dilemma to worry about.
     He saw it coming the moment he'd parked his horse.  A lone
figure, this time confidently without its own warhorse, stalked
slowly into town toward Ringman's small castle.  The glowing
plate mail, the jewelled helmet, and the sheathed Prometheus
dangling from its side left no question as to who it was that had
decided to bug them again.  "Quick, Homer!" Ringman instructed
the brownie, "To the second floor!"
     "But what's being one floor higher gonna do against Peter
Perfect?" Homer asked as he clambered up the stairs behind
Ringman.
     "If I'm right," the 9th-level paladin explained as he
reached the second story, "Everything."  He pointed.  "There's a
closet marked 'Non-magical weapons' along the south wall.  It it,
there'll be a stack of things that look like javelins.  Grab all
of those javelin-looking things you can and bring them to the
east parapet."
     "Right," Homer said, and got going.  He was too scared of
Peter Perfect to argue.
     Ringman went to the north parapet and unlashed a rather
large war engine on wheels.  "I put this here to ward off attack
from the north," He mumbled to himself as he started to push the
apparatus.  "Peter Perfect _would_ have to attack from the east."
     He was having an Acheron of a time getting this thing to
move on those old, rotten wooden wheels.  He wished now that he
_had_ taken that girdle of titan strength; then he could just
carry this whole mess to the east parapet.  But he was making
pretty good time anyway, considering that the left wheel only
turned about 1/3 of the time.
     "Oh RIIING-mannn!" Peter Perfect's voice echoed from far-off
just as Ringman finished dragging the artillery engine onto the
parapet.  "Where ARE you, Ring-mannn?  Come out and pla-ay!  It's
that time of the month again!"
     Ringman grabbed the front end of the gismo and pulled until
it pointed more or less at Peter Perfect.  Homer was just
emerging from the hallway, carrying a very large armful of
javelin-looking things.  He dropped one about every ten feet. 
Ringman nodded at the brownie, then took hold of the gigantic
rubber band that spanned the front of the device and stretched it
across a large metal tong three feet back from the apparatus'
front.
     "Now what do I do?" Homer asked as Ringman got behind the
machine.
     "Load one of the missiles into the firing slot, just in
front of that rubbery thing as soon as I crank it all the way
back."  He grasped the two levers connected to opposite sides of
a toothed wheel and began to turn it.  Several gears and pulleys
later, the metal tong keeping the rubber band in place pulled
back even farther.  Ringman continued to crank and the rubber
band continued to retract.
     "What is this thing?" Homer asked.
     "It's a ballista," Ringman said with evident strain in his
voice.  It was getting harder and harder to turn the crank.
     Peter Perfect interrupted them again, this time closer. 
"Which part of your body shall I cut off this time?  How about
your left arm?  Or a leg?  Or a different extremity?"
     Ringman ignored him.  "Since I learned how, I've been
reading the Book of Infinite Wisdom a little myself," he
explained.  "I found this little gem in the construction and
siege heading.  So, with a little help from Sick Sword -- before
she threw me out of her life -- I got hold of a +1 ballista. 
Peter Perfect's in for a nasty surprise."
     "Hey, too bad about your little girlfriend, Ringboy," Peter
shouted once more.  "At least you won't have her ordering you
around the castle to wash the dishes, right?"
     Homer smiled expectantly as he loaded the first spearlike
missile into the firing track.  Ringman took his seat as the
firer and grabbed the handles which allowed him to aim.  Since
this was a magic ballista, the swivel bearings would never rust,
and so despite his difficulty in moving the ballista to this
position its aiming mechanism worked smooth as glassteel.  He
poised his thumb atop the right handle's release switch, lined up
Peter Perfect in the built-in crosshairs, and let him have it.
     The missile streaked through the air and shattered to
flinders against Peter Perfect's chest.  "Ho ho, Ringman," he
laughed, "You're going to have to do better than that!"
     Ringman whacked himself over the forehead.  "I _would_ have
to forget about that accursed Coat of Arnd.  He's totally
invulnerable from his neck down to his thighs.  Reload for me
again after I crank it back; I'm going to have to aim for his
legs."
     Homer shrugged.  "Sure thing, uh, boss."  Ringman had
already set the rubber band back on the metal flange and was
hurriedly working the crank.
     Peter Perfect trudged ever-closer.  He was less than two
hundred yards away now.  "I never thought that the 'great and
powerful' Ringman would resort to throwing things at me!"
     Homer had the ballista loaded, and Ringman centered Peter
Perfect in his sights.  He aimed just a tad lower this time,
putting the crosshairs on his right thigh rather than his torso,
and fired.  The rubber band tossed the projectile forward, the
ballista rattled back-and-forth, the black streak of the missile
lunged across the intervening distance, and a javelin-looking
thing pierced right through Peter Perfect's adamantite-alloyed
thigh guard and impaled his right leg.
     "ARRRRGH!" Peter screamed, clutching at the shaft.  "How
could you _possibly_ have hit me?!  I'm armor class -20!"
     "Think again, you poor excuse for a paladin!" Ringman
shouted.  "According to page 109, left-hand column, paragraph 4
of the Book of Infinite Wisdom, 'BALLISTA TARGETS . . . ARE
ALWAYS CONSIDERED TO BE AC 10 IF EXPOSED TO SIGHT.'!"
     "Armor . . . class . . . ten?!?" Peter worried.
     Ringman had another missile loaded in less time than anyone
in his right mind would think he was capable of.  "Fire!" he
shouted, this time aiming for Peter's right leg.
     Peter Perfect saw it coming and tried to dodge.  His shield
and dexterity were totally useless in this situation; he could
only hope that by not being a static target he would incur some
to-hit penalty on Ringman.  Penalty or not, the missile still
hit, and now Peter had a wooden pole sticking out of his left
leg.
     "Ouch!" Peter ouched, hopping from leg to leg.  Either leg
was equally painful to walk on.  His invulnerability had not
protected him here, so he figured that that blasted Ringman must
be using a magic ballista or something.  He heard the sound of a
turning ratchet; Ringman was reloading again.  Confound it, and
he only had 188 hit points too.  Sure, each hit only did 1-11
damage points to him (they'd be doing 3-13 if not for his
permanent protection from normal missiles spell), but how long
could he hold out before Ringman got that lucky strike to his
head?  He had only one alternative as far as he could tell: get
out of there, and get out fast.
     And so, with a purple glow from his second magic helmet,
Peter Perfect teleported out.
     "All right!" Homer shouted, "We did it!"  He held up his
hand.
     Ringman slapped the brownie's hand a high-five, and joined
him in rejoicing.  "Yeah, we did it!  VICTORY! . . . for now."
                                #
     "Defeat," Ridiculous Sword said as she solemnly lowered
Bahamut's corpse into the ceremonial dragon burial ring, "For
now."  There would be no cremation, no funeral pyre; dragon skin
was too valuable to waste.
     Two small bronze dragons and one normal-sized young gold
dragon lowered the slain gold dragon's body down beside
Bahamut's.  There were tears in all their eyes, but the young
gold dragon seemed ready to burst.
     A silver dragon took faltering steps towand the two, and
laid headstones next to them.  "Bahamut," the first one read,
"Lord of all good dragons."  The second one read: "Samuel, of
Bahamut's court."
     "G-g-goo'bye, dad," the young gold dragon wept by Samuel's
remains.  Then, he closed his eyes and recited one of the gold
dragons' axioms: "You shall lie more peacefully . . . that you
have furthered Bahamut's ideal."
     And with that, nearly every one of the hundreds of metal-
colored dragons who had gathered there burst into tears.  The six
huge ancient gold dragons that had been Bahamut's court most of
all.  Bahamut was Life to each and every one of them.
     "First Saint Paul," Ridiculous Sword recounted, "Then our
mom, and now Bahamut.  I swear, Gross Sword, I'll not rest until
you've been defeated.  I'll find a way.  No one is totally
invulnerable, not you, not I, not anyone.  Even if it means my
own life and soul, I'll stop you."
     "Bahamut!" the saurine voices around her wailed.  "Oh
Bahamut, Bahamut, Bahamut!"







                            PART THREE

     Ridiculous Sword pushed her way through the swinging doors
of the saloon.  She needed a drink.  Or at least she needed some
place to unwind.
     She listened briefly to the piano player on her way from the
door to the bar.  He was playing one of those sprightly tunes
that piano players always seem to be playing in saloons.  A sign
rested on top of his tinny upright, reading: "Don't hack me to
bits, I'm only the piano player."
     She propped herself up on a barstool and smoothed the light-
brown hair out of her face.  "Bartender, gimmie a double
ethanol."
     The bartender leered at her.  "Okay, kid, let's see some
I.D."
     She looked him straight in the eye.  "I.D.'s haven't been
invented yet."
     "Oh yeah," he replied, and reached below the counter for a
bottle of pure grain alcohol.
     She looked at the piano player again, who was repeating the
same phrase he'd just played 20 seconds ago.  "Oh, can it, pianos
haven't been invented yet either."
     "Here ya go, kid," the bartender returned with a glassful of
ethyl alcohol.  "Uh, ya do got money, don'tcha?"
     "Do I have money, he asks!  Here."  She plopped a million-
gold-piece gem down on the counter.
     The bartender's eyes bulged out.  "Um, er, uh, sorry, but we
don't --"
     "Take any denominations smaller than 20 gold pieces.  All
right, all right!  So what else is new?"
     She drew her Ridiculous Hand Axe, much to the dismay of the
bartender, and chopped the 1,000,000-gold-piece gem up into
65,536 15.25878906-gold-piece gems.  She scooped 65,535 of these
back into her leather backpack of holding (which she placed in
her portable hole) and gave one to the bartender.  "Here.  Keep
the change.  Oh, and bring me two more of these, will ya?"
     "Two more double-ethanols?  Uh, sure . . ."  He set to work.
     She lifted the glass to eye level and swished it around,
watching the small impurity of water make little eddies.  Then
she lowered it to her mouth.  "For the honor of Grayhawk," she
toasted, and downed the whole glassful in a single gulp.
     It was in staring at the bottom of the tilted glass that she
saw a reflection of the commotion outside.
     "No," the little half-elven boy screamed as he struggled to
free himself.  "I don't _wanna_ go with you!"
     "Sure-you-do," the female dragging his left arm replied in a
monotone.  "Don't-you-want-to-come-home-with-us?"
     "No!  You're not my _real_ mommy and daddy!"
     "Of-course-we-are," the male dragging his right arm recited
in a monotone half an octave below the female's.
     The monotone mommy and daddy barely noticed that they had
bumped into a ten-year-old girl.  When the message reached
whatever passed for their brains, they were quick to reprimand
her.
     "Get-out-of-our-way," the female said, pointing her
decaying, elven pointy ears forward.  "This-is-none-of-your-
business."
     "Oh no?" Ridiculous Sword replied.  "Since when do zombie
parents have live children?"
     'Zombies?' the boy gulped.
     The two glazy-eyed humans looked at each other quizzically,
then looked back at Ridiculous Sword and said in chorus, "We-are-
not-zombies."
     Ridiculous Sword smirked.  "We'll see about that," she
replied as she reached under her robe of eyes.  She pulled out a
white egg-shaped thing with a light blue stripe (with dark blue
trim) across the middle that had the words "HOLY SYMBOL" printed
on the side.  Holding it out in front of her and facing the kid's
"parents," she nonchalantly said, "Begone."
     And the two zombies disintegrated into piles of dust.
     The boy just stood there and shook.
     "Sorry," Ridiculous Sword put a hand on his shoulder.  "Did
those ever used to be your real parents?"
     "Well," the boy sniffed, "Well, they did look sorta like my
mom and dad . . ."
     Ridiculous Sword nodded solemnly.  "They've probably been
dead for several days.  There are always those prankster cults
around who'll look for parents who have just died and animate
them into zombies before their kids find out.  Sorry it had to
happen to you."
     "I," the boy began, ". . . I had a feeling something was
wrong when they went out to the town well yesterday morning and
didn't come back."
     Ridiculous Sword nodded again.  "Are you an only child?"
     "Um, I don't have any brothers or sisters, if that's what
you mean."  Then, he added: "I used to have a sister, but she
died of typhus."
     Ridiculous Sword covered her eyes with her right hand and
shook her head.  "When are these people going to get around to
inventing penicillin?"
     The boy puzzled.  "Peni-what?"
     "Er, never mind, never mind.  Hey, what's your name?"
     "Jimmy, what's yours?"
     "Ridiculous Sword."
     In the most phenomenal turn-around Ridiculous Sword had seen
in a long time, Jimmy went from the verge of sobbing to a barely-
controllable fit of the giggles.  He was down on the ground in
seconds.
     "RIDICULOUS Sword?!?" he managed to spit out between
guffaws.  "RIDICULOUS Sword!?!  Haw haw haw haw haw haw haw!! 
That's the stupidest name I EVER heard!!"
     "Oh, right," Ridiculous Sword folded her arms, "And I
suppose you think Jimmy is a _lots_ better name."
     "You bet!  HAW HAW HAW!!  RIDICULOUS SWORD!  What a STUPID
name!!!"
     Of its own volition, the broadsword stashed next to
Ridiculous Sword's left hip pulled itself free of its scabbard
and dashed toward Jimmy.  Jimmy's case of the giggles went away
instantly.  The sword hovered in midair momentarily, and then
zipped to within an inch of his throat.
     "RIDICULOUS SWORD," the sword bellowed, amplifying its voice
with telepathy, "HAPPENS TO BE A PERFECTLY FINE NAME!  THERE
SOMETHING _WRONG_ WITH THAT?!!"
     "Now, now, Ridiculous Sword," Ridiculous Sword chided her
naughty weapon, "Don't go threatening innocent bystanders.  He
was talking about me, anyway, not you."  She drew her sword from
the air and sheathed it.  Jimmy shook like a fault line.  "Sorry
about that, Jimmy; my Ridiculous Sword's a bit touchy.  You'd be,
too, if you had an 82 ego."
     "Your . . . your sword's named after you?"
     "Sure."  She drew some of her other weapons.  "And so's my
hand axe, and my longsword, and my dagger, and my pair of gloves,
and my other pair of gloves.  They're all just as Ridiculous as I
am."
     Jimmy was silent for a very, very long fraction of a second. 
Then, he spoke up: "What do I do now that my mom and dad are two
piles of dust?"
     Ridiculous Sword shrugged.  "Well, I guess you're with me,
kiddo."
     Jimmy glared at her.  "But you aren't any older than I am!"
     "No, but I have seventy or eighty million more experience
points than you do."
     'Seventy or eighty million?' Jimmy mouthed, his eyes
bulging.
     "Come on," Ridiculous Sword gestured, "Let's go to your
place and try to straighten out your future."
                                #
     "Now that I'm looking after you," Ridiculous Sword explained
as they walked down Hack-and-Slash Lane toward Jimmy's old home,
"I think you ought to know that I've made some pretty powerful
enemies.  Not the least of whom is my own dear brother."
     "Uh huh.  So?"
     "So, they might want to get at me through you.  You'll need
to be able to protect yourself."
     "Hey, I'm ten years old!  If anybody tries to mess with me,
why, I'll bash 'em across the jaw!"  He swung at the empty air. 
"I'll kick their butts!"  He thrust his foot out in front of him. 
"I'll --"
     "You'll get killed, if you try that.  Fists and feet aren't
very useful against crossbow bolts --"
     Jimmy gulped.
     "-- unless you happen to be a monk, like me."
     "A monk?  But I thought you were a cleric!"
     "No, silly, pure clerics can't use edged weapons."
     "So you're a monk, _and_ a cleric then?"
     Ridiculous Sword thought of telling him more, then thought
better of it.  "Yes, I am."
     "Oh."  They resumed walking.  Jimmy rubbed his chin for a
moment.  "But monks aren't supposed to use swords!"
     Ridiculous Sword sighed.  "Okay, you got me.  I'm also a
ranger."
     Jimmy stopped short.  "So you're a ranger, _and_ a monk, _and_
a cleric?  Are you anything else besides?"
     "Well, I _am_ a druid as well."
     "All right," Jimmy folded his arms.  "Tell me, from top to
bottom, everything you are, or I'm not budging a centimeter!"
     "Kinda personal, wouldn't you say?"
     "You want me to trust you?  Then tell me."
     "Okay," she breathed, "I'm a Hierophant of the Cabal druid,
the Grandfather of Assassins, the Grand Master of Flowers, a
17th-level ranger lord, a 17th-level master thief, a 20th-level
paladin, a magna-alumnae bard, a 31st-level illusionist, a 49th-
level arch-mage, a 60th-level weapons mistress, and a psionic. 
I'm lawful good, because neither the Book of Infinite Wisdom, the
Book of Finite Wisdom, nor the Other Book of Infinite Wisdom
makes any stipulation against druids or bards or thieves or
assassins changing their alignment."  She paused, reached into
the astral plane, and pulled her brownie down into the physical
universe.  "This is my familiar, the Ridiculous Brownie.  Say
hello to the nice little half-elven boy, Ridiculous Brownie."
     "Hi, nice little half-elven boy," the brownie said, and
disappeared back into the astral world.
     "There," Ridiculous Sword finished, "Are you satisfied?"
     Jimmy rolled his eyes up into his head and fainted.
     When he woke up twelve seconds later, he found Ridiculous
Sword leaning over him about to cast some kind of wake-up spell. 
"Oh my deity," Jimmy moaned, "You're more well-equipped than Sick
Sword!"
     Ridiculous Sword stopped gesticulating, smiled a smile of
sudden understanding, closed her eyes, and nodded her head. 
"Sick Sword was my mother."
     "Your mother . . . Sick _Sword_ . . . Ridiculous _Sword_
. . ."  They had the same last name and everything.  Now it all
made sense.  Well, almost all of it did: "You said Sick Sword
_was_ your mother?"
     Ridiculous Sword nodded solemnly.  "Up until a couple days
ago.  Like I said, my brother is my most powerful enemy."
     "Your own brother killed your mom?!"
     "Mmm hmm.  'Fraid so.  Evil little sonofabitch, isn't he? 
Didn't even leave a soul behind to resurrect."
     "So you're an orphan like me?"
     "Well, not quite.  My dad's still alive, but he's just a
9th-level by-the-book paladin.  He's a nice guy, though. . . .
Well, anyway, like I was trying to say, I've got some pretty
powerful enemies, so you'll need some protection."
     She took a portable hole out of her pocket with a piece of
masking tape across the top.  On the strip of tape were scribed
the words, "Sick Sword's stuff -- excess."  Opening the hole, she
reached in, rummaged around noisily, and finally pulled out a
gray, solid adamantite broadsword and handed it to Jimmy. 
"Here," she told him, "This ought to help."
     The instant Jimmy grabbed the haft, the sword's will took
advantage of the opportunity and lanced full-force into him. 
Brilliant white light scintillated outward from the blade, an
ominous fanfare wafted through the air, and a voice both
telepathic and auditory boomed, "I AM THE SICK SWORD!"
     "Y-y-y-yikes!" said Jimmy meekly.
     "BEFORE SICK SWORD WAS, I WAS.  BEFORE CENTRAL EARTH WAS, I
WAS."
     'Oh, come _on_,' Ridiculous Sword thought, 'You've only been
around for twelve or thirteen years.'
     "I AM ALL THINGS GREAT AND POWERFUL, ALL CREATURES GREAT AND
SMALL.  I SERVED IN THE HAND OF THE GREATEST WEAPONS-MISTRESS/
CLERIC/ARCH-MAGE THAT EVER LIVED.  I CAN FELL AN OGRE WITH A
SWIPE OF MY BACKHAND.  I --"
     The Sick Sword felt a Ridiculous glove grab hold of its
adamantite blade.  "Cool it, Sicky," Ridiculous Sword ordered,
"Or I'll find a humble ant to crush you beneath the foot of!"
     The adamantite broadsword was instantly silent.
     "Sick Sword," she continued, "This is Jimmy, your new
wielder.  You're to protect him just as you did Sick Sword. 
Understand?"
     "*sigh* . . . ALL RIGHT.  DO YOU WANT TO BE MY NEW OWNER,
JIMMY?"
     "Well . . . yeah, sure!" Jimmy decided.
     "EXCELLENT.  WHAT'S YOU'RE ALIGNMENT?"
     "Uh, kinda chaotic-lawful with neutral tendencies."
     "WELL, IT'S LAWFUL-GOOD NOW."
     "Huh?  What do you --"
     "ARTIFACT SIDE EFFECT A: ALIGNMENT OF POSSESSOR PERMANENTLY
CHANGED TO THAT OF ITEM.  YOU ARE LAWFUL-GOOD NOW, WHETHER YOU
LIKE IT OR NOT.  OH, AND I'M ALSO SUPPOSED TO PLACE A GEAS OR A
QUEST ON YOU . . ."
     Ridiculous Sword leered at the weapon menacingly.
     "SO, UM, UH, YOUR GEAS IS TO, ER, SEEK OUT AND FIND THE, UM,
UH --"
     "Holy Grail?" Jimmy asked.
     The sword pointed at him defensively.  "HE SAID IT, NOT ME."
     Ridiculous Sword snapped her fingers.  "No matter.  _I wish
that Jimmy were un-geased_."
     "WHEW," the sword exhaled.  "WELL, THAT WASN'T SO BAD, NOW
WAS IT?"
     "Well, I dunno," Jimmy told the Sick Sword, "I ain't never
been geased before."
     "Jimmy, this is a +6 vorpal 9-lives stealing broadsword of
wounding, dancing, and life stealing.  It's made of solid
adamantite.  Do you know what that means?"
     "Yeah, it means I get to HACK UP THE BAD GUYS!  Wham!  Hack! 
Swoosh!"  He swung the sword around precariously three times.
     "No, no, NO!  It means --" she grabbed the sword again to
keep him from slicing haphazardly through the air, "-- that
you've gotta _learn_ how to use it to defend yourself.  In other
words, you gotta know how to parry as well as how to attack.  One
of the sword's major artifact powers _will_ reduce your base armor
class to 0, but that certainly isn't enough to make you hit-proof.
Now then, what's your DEX?"
     "Er, my what?"
     "Your DEX.  You know, your Dexterity."
     "Well, I _guess_ I'm pretty good with my fingers."
     "You GUESS?!  You mean you DON'T KNOW?!!"
     "No.  Should I?"
     "By God II, what kind of a world _is_ this where people don't
even know their own character abilities?!  Where's your character
sheet?"
     "My what?"
     Ridiculous Sword conked herself on the head.  "How do you
expect to keep track of your experience points without a
character sheet!?"
     "Well, um, I always just thought that, well, uh, you know
. . ."
     Ridiculous Sword sighed, feeling rather vexed, and reached
into the outer planes right above Jimmy's head.  She pulled out a
yellow sheet of paper with lots of markings on it and the name
"Jimmy" written in bold calligraphy.  "Let's see.  Jimmy:  half-
elven, level 0 --" she eyed the sheet and the boy warily.  "--
Oh, that's right, only PURE elves never get to be 0th level. 
Ahem; 9 Strength, 12 Intelligence, 8 Wisdom, 11 Dexterity, 13
Constitution, 10 Charisma."  She looked at him over the top of
his character sheet.  "You're not much, are you?"
     Jimmy grimaced but didn't bother to reply.
     Ridiculous Sword took his hand.  "Come with me," she said.
     Jimmy shrugged and nodded his consent.
     Not that he had much choice in the matter.  Ridiculous
Sword's second helm glowed purple for a moment, and they found
themselves within a great cavern at the core of a majestic
mountain.  With his natural infravisual capability, Jimmy saw a
massive stone chair carved out of the stone on one side of the
cave.  Intricate mosaics of ivory, platinum, and adamantite
adorned the bejewelled throne.  It was pretty awesome-looking
even in the infra-red.
     "This is the Throne of the Gods," Ridiculous Sword told him,
indicating the chair.  "Sit on it."
     "Um, sit on it?" Jimmy inquired, not quite believing her and
still a little shaken up from that teleport.
     Ridiculous Sword nodded.  "Go on, sit on it."
     Jimmy took a few faltering steps toward the relic.  "Are you
sure this is a good idea?"
     "Would I lie to you?"
     "I don't know, would you?"
     Ridiculous Sword sighed.  "Look, here, I'll even cast a
detect lie spell on you so you can tell if I'm telling the
truth."  She did.  "Now then, that Throne is perfectly harmless."
     Jimmy put a hand to his chin.  "What does that little red
light over your head mean?"
     "Er, um, uh, all right then -- that Throne is perfectly
harmless _if_ you do as I say."
     In Jimmy's mind, the light over her head changed from red to
green.  "Well, okay," Jimmy acquiesced, turning back toward the
seat, "But no funny stuff."
     Jimmy's hands trembled so badly he could barely hold on to
the arm rests as he sat himself down.
     "Now, repeat after me," Ridiculous Sword told him.  "Semper
fidelis, cum regio spaticum est."
     "What's that mean?" Jimmy asked.
     "Never mind what it means, just say it."
     "But what's it mean?"
     "It means 'Holy fidelity!  It's a space ship!,' all right? 
So say it: semper fidelis, cum regio spaticum est."
     "Semper fidelis, cum regio spaticum est."
     "Sic transit gloria tuesdi."
     "Sick transit gloria tuesdi."
     "Lisan-al-gaib Shai-hulud Muad'dib Kwisatz Haderach shield-
lasgun explosion."
     "Listen-al-gaib Shy-hoolud Maud'dib Quizzat's Hatrack
shield-lazegun explosion."
     "Abra cadabra, presto changeo."
     "Abra cadabra, presto changeo."  And the instant he finished
"changeo," he felt somehow . . . different.  "I feel somehow . . .
different," he said.
     Ridiculous Sword smiled.  "Prime power B: 'All of
possessor's ability totals raised to 18 each upon pronouncement
of a command word.'  Those little phrases I gave you to say were
the command word; now you have straight eighteens across the
board."
     Jimmy's eyes bugged out.  "You mean 18 strength, 18
intelligence, 18 wisdom, 18 dexterity, 18 constitution --"
     "And eighteen charisma," Ridiculous Sword finished.
     "But suppose I don't _want_ straight 18's across the board!"
     "Oh, nonsense, _everybody_ wants all 18's.  Everybody except
people who have 19's, that is.  Which reminds me . . ."
     "Oh, no you don't!" Jimmy insisted, standing up and moving
away from the Throne.  "Bad enough that I can outclass most
nobility right now!  You're not getting me pumped up any
further!"
     Ridiculous Sword folded her arms.  "I could never get my
father to do even as much as you just did."
     "Maybe that was because Ringman _knew_ that all of his
abilities would get permanently raised to 18 if he did that.
You never told me what you were doing with me.  Gehenna, you've
hardly ever told me _anything_!  What are you, a cleric or
something?!"
     "Naturally.  Part cleric, part --"
     "Oh, _how_ could I for_get_ about your eleven classes --
especially now with my 18 intelligence!  For the positive
material plane's sake!"  He slammed his fist down on a rock
outcropping, leaving an 18 strength fist-shaped indentation. 
"There, you see!  You've already given me more power than I know
what to do with!"
     "Come on, you can handle it; you've got an 18 wisdom."
     Jimmy was about to formulate a reply when Ridiculous Sword
snapped her fingers.  "Oh, wait a minute, almost forgot."  She
reached into a pouch strapped to her side and pulled out two
baubles that Jimmy couldn't quite see.  "You don't have psionics,
do you?"
     "Well, no, why would --"  Jimmy stopped short.
     Ridiculous Sword rolled the pair of icosahedrons across the
cave floor.  Since each face was marked with a "0," the roll was
of course a double-zero, or one hundred.  "Well, you do now!" she
told him.
     Jimmy slapped his palm over his face.
     "Sure; your intelligence, wisdom, _and_ charisma just went
up, remember?"  Ridiculous Sword rolled again.  "Another 00.  172
psionic strength," she rolled yet again, "All attack . . ."
another roll ". . . and defense modes, and . . ." yet a fifth
roll of the crystalline, loaded percentile dice ". . . four minor
and two major psionic disciplines."
     Jimmy didn't bother to uncover his eyes.  He just shook his
head.
     "Okay, for now, your psionic devotions are invisibility,
cell adjustment, domination, and reduction, and your psionic
sciences are energy control and probability travel; but you'll
get more powers once we get you in touch with some spheres of
annihilation."
     "Why me?" Jimmy moaned.
                                #
     They eventually made it back onto the prime material plane 
-- thanks to a whole lot of complaining on Jimmy's part -- and
walked the rest of the way to his old house.  Ridiculous Sword
went in and turned the place inside out in three minutes flat.
     "I found seven silver pieces and three coppers in loose
change," she said, "But that's all your parents had lying
around."
     "Of course," Jimmy replied, "Rents are cheap around here."
     Ridiculous Sword put her fists to her hips.  "Rent hasn't
been invented yet."
     "Oh yeah, I forgot.  Well, we were just meager serf-type
village folk who earned a poor but honest living."
     "Oh, _give_ it _up_.  You didn't even have a single electrum
piece stashed under the mattress.  In fact, you didn't even have
a mattress."
     "Well . . . I like hay.  It feels comfortable.  (Except when
it makes me sneeze.)"
     "It also makes you smell like a farm animal."
     "Everybody around here smells like a farm animal.  Soap
hasn't been invented yet either, remember?"
     Ridiculous Sword relaxed her posture.  "Oh yeah.  Sorry. 
I'm only intelligence 19, you know."
     "So you've ransacked my house and come out saying that
everything me and my family have ever owned is useless to me now. 
So what?"
     "_So_ . . . now we have to get you a better place to stay. 
How would you like to come live at my late mother's keep for a
while?"
     "Really?!  Wow, that'd be neat!"
     'Whoo, can this boy's mood change fast,' Ridiculous Sword
figured.
                                #
     "This," Ridiculous Sword indicated the updrawn gang-plank in
front of the small castle, "Is the drawbridge."
     "Wow, just like on a real castle!" Jimmy said excitedly. 
You would think he had only read about these places and never
seen them or something.
     "Hey, D.S.," Ridiculous Sword shouted, "Lower the D.B.!"
     Disgusting Sword stuck her ethereal head through the
adamantite-reinforced drawbridge, said "Okay," drew her head back
in, solidified, and pulled the lever marked "down."  The
drawbridge cranked down across the moat to the sound of clanking
adamantite chains.
     "And this through here," Ridiculous Sword led Jimmy across
the drawbridge, "Is the foyer.  This is where my sister and I
have placed a rather strong protection from evil spell -- just in
case our brother or anybody he's in cahoots with decides to visit
us."
     "Yeah, I kinda figured that from the thaumaturgic circle
inscribed on the floor."
     "There, you wouldn't have known that was a thaumaturgic
circle with your old intelligence of twelve, now would you?"
     "As a matter of fact, I saw a thaumaturgic circle being
demonstrated two years ago, and I would have recognized it
anyway.  Nyaah."
     "And _this_," Ridiculous Sword quickly changed the subject,
"Is the room where my mother used to sleep.  It'll be your room
for the time being."
     "Um . . ."
     "Oh, don't worry, all her magic items've been moved out."
     "Um, I'm more worried about her ghost."
     Ridiculous Sword lowered her head involuntarily.  Her eyes
felt moist.  "If she had a ghost, we could bring her back."
     "Oh . . ." Jimmy's voice trailed off.  Somehow, he
understood.  "I'm sorry, I didn't know."
     "It's all right.  I wish Bahamut hadn't had to follow in her
path, though."
     Jimmy gulped hard.  "Bahamut's dead too?!"
     "As a doornail."
     "A platinum doornail!" a voice approached from the other
room.
     "Uh, Jimmy," Ridiculous Sword indicated the entering girl,
"This is my big sister, Disgusting Sword."
     "Hey," she put her hands on her hips and addressed
Ridiculous Sword, "Who's the cutie?"
     Ridiculous Sword rolled her eyes up into her head and
pointed at the other girl with her thumb.  "She's just entering
puberty."
     "Oh," Jimmy replied, "Well, I'm just entering puberty   
too. . . ."
     Disgusting Sword grinned girlishly.
     "I found him," Ridiculous Sword insisted, "So he's mine. 
Nyaah."
     "Oh yeah?" Disgusting Sword retorted.  "Well, _double_
nyaah!"
     "NYAAH!"
     "_NYAAH!_"
     "_PTTTTTTTTT!_" they both raspberried each other, lockhorned.
     "Girls, girls, let's not fight over me."  Jimmy grabbed
their opposing shoulders and tried to tear them apart.  They
wouldn't budge, no matter how hard he pulled.  "What gives," he
strained to say, "I thought I had an 18 strength!"
     "You do," Ridiculous Sword told him without flinching, "We
just happen to have 25 strength."
     "Oh . . ."
     "25 _star_ strength," Disgusting Sword corrected her.
     "Anyways, like I was saying," Ridiculous Sword said smugly
as she put her arms around Jimmy's neck, "I found him so he's
mine now."  She pulled up a little closer to him and playfully
kissed his cheek.
     "EW!" Jimmy wrenched himself away from her.  "I don't wanna
be kissed by no _girl!_"  He wiped her smooch off as harshly as he
could.
     Disgusting Sword shook her head as she left the room.  "What
a waste of an 18 charisma."
     Both Ridiculous Sword and Jimmy were silent for some time. 
Then, Ridiculous Sword said, "Hmmph.  Looks like we've all got
some growing up to do."
     Jimmy folded his arms.  "Phh, boy, I'll say!  You two didn't
know _when_ to quit!"
     "Your attitude toward my, er, affections wasn't exactly the
most mature on Central Earth either, bub."
     "Aw, that's just a sissy game."
     "Yeah, played by us sissy 60th-level weapons masters, sure. 
And what do _you_ want to be when you grow up?"
     "Oh, that's easy.  I wanna be a FIGHTER!"  He thrust the
Sick Sword through the air again.  "I wanna hack up all sorts of
vicious monsters and mount their heads on my wall!  On the wall
of my palace, that is -- the palace I got by killing the
villainous king that lived in it!  HA!  HACK!  THRUST!  DIE!
DIE!!  DIE!!!"
     "Well, I can help train you in that direction, if you'd
like."
     "YOU?!  But you're a GIRL!  And you're not even a fighter,
besides!"
     "Oh, sure, I'm not a fighter, he says.  I'm only a weapons
mistress and a paladin and a ranger!  _Those_ don't count!"
     "Oh yeah, that's right, those _are_ sub-classes, aren't they?"
     "Well, actually, the Other Book of Infinite Wisdom (a
genuine Dungeon Master{tm} publication) goes back and says that a
paladin's actually _not_ a fighter but really a sub-class of
cavalier, but it's close enough.  Tell you what, kiddo.  If you
_really_ want to get invincible, you ought to be multi-classed;
say, a fighter/magic-user, or a fighter/thief, or a fighter/
magic-user/thief, or a cleric/druid/fighter/ranger/weapons
master/cavalier/paladin/magic-user/thief/thief-acrobat/assassin
who'll change to become a bard, or --"
     "No!  I'm NOT gonna be a fifteen-classed character!  I want
to be a fighter -- _just_ a fighter!  You got that?"
     "Okay, okay, it was only a suggestion."
     "Hmmph.  I'm surprised it wasn't a suggestion _spell_."
     "Oh, believe me, it was.  You just got lucky and made your
saving throw."
     Jimmy narrowed his gaze and eyed her warily.  "You're sure
we're on the same side?"
                                #
     "No, no, don't aim for my sword," Ridiculous Sword
instructed, easily deflecting the latest hack of his Sick Sword,
"Aim for my body!  You're fighting me, not my weapon!"
     "But I don't wanna hurt --"
     "Don't worry about that, kiddo, there's no way you could
_really_ hit me.  Just try to, all right?"
     "Well, okay.  Hyyyyah!"  Jimmy swung his sword out and
around in a wide arc blade-on.  The blade was barely half way to
its target when Ridiculous Sword brought her Ridiculous
Broadsword to within an inch of his left eye.  Jimmy gasped and
dropped his blade.
     "That maneuver _may_ have worked against someone wearing
plate mail," Ridiculous Sword told him as she slowly moved her
sword away.  "Heavy armor'll slow down an opponent's reaction
time enough for you to finish blows like that.  But you left
yourself _wide_ open for anyone with half an ounce of speed to
thrust his rapier through your heart.  Or her broadsword through
your left eye.  Now let's try again."
     Jimmy studied the distant mountains for a few long seconds
and rubbed his stockinged toes in the grass.  Then, he cleared
his throat.  "Ahem.  _Sword of Sickness, come to my hand_!" he
commanded in Lawful Good.  The adamantite Eternian-looking sword
shot up from the ground and landed grip-first in his palm.
     "Now, defend yourself!"  Ridiculous Sword launched at him
with both her Ridiculous Longsword and her Ridiculous Hand Axe
before her.
     Jimmy was barely able to draw Sick Sword's old +6 dagger of
wounding and parry the adamantite longsword in time.  He was so
relieved at having fended off her sword that he didn't cover his
right side and received a nasty run in his shirt from her hand
axe.  That made him mad enough to forget about being nervous and
hack at her with the Sick Sword as hard as he could.  Ridiculous
Sword jerked to one side and easily avoided getting hit.
     Jimmy didn't get to stay angry for long.  Three seconds
later, a mere instant in this particular combat system,
Ridiculous Sword hacked at him again with her long sword, forcing
Jimmy to block the blow with all his might.  Adamantite clashed
against adamantite, then, and again, and again, until their
ordeal seemed to take on a rhythm of its own.  Every thrust or
slash Jimmy made, Ridiculous Sword easily curved away; every stab
Ridiculous Sword took, Jimmy somehow managed to parry or avoid. 
Sure, she was holding back, but she wasn't making this a picnic
for him.
     Finally, after four long minutes of fruitless exchange,
Jimmy backed up a few feet, loosed the Sick Sword to dance, and
drew Sick Sword's old +5 broadsword to attack with.  Ridiculous
Sword shrugged, sent her Ridiculous Longsword dancing into the
air to deal with the Sick Sword, and flashed the Ridiculous
Broadsword into her right hand in the blink of an eye.  She also
let her Ridiculous Hand Axe dance after Jimmy.
     "Hey, that's not fair!" Jimmy complained, desperately
fending off the adamantite axe.  "My dagger doesn't dance!"
     "True, but who's to say your next opponent won't have a +6
holy vorpal defender frost-brand flame-tongue sun luckblade hand
axe of wounding, dancing, life stealing, slaying everything,
disruption, throwing, thunderbolts, all dragon slaying, speed,
final word, and nine lives stealing with intelligence 17, speech
and telepathy, read languages and magic, ten non-alignment
languages, eight extraordinary powers, eight special purposes,
seven artifact minor benign powers, twelve major benign powers,
and limited omniscience in one hand and a nearly-identical sword
in the other?"
     The instant she said "other," Jimmy found his opening,
ducked under the hand axe, and came at her at full tilt.  She saw
his sword hack coming a mile away; it would be easy enough to
parr--
     Jimmy's +5 broadsword came within three inches of her right
side, jerked over, and thrust right below her left ribcage. 
Surprised, Ridiculous Sword reached down to the sheath on her
left boot, pulled out her Ridiculous Dagger, intercepted Jimmy's
thrust, and sent his sword reeling two hundred feet through the
air to land, point-first, on the center of a target painted on a
rock.
     "Amazing!" Ridiculous Sword told him, lowering her dagger. 
"I haven't seen a feint like that in weeks!  You're real fighter
material, Jimbo."
     "Really?  You mean I can be a real honest-to-gosh fighter
now?"
     "That's right, Jimmy.  You've passed the test."
     "Oh, wow!  Neat!  I . . . I . . ."
     Jimmy's voice choked off as he shook and fell to his knees. 
Something was wrong inside him, something was definitely wrong. 
He felt his stomach convulse and he doubled over.  Every muscle,
every fiber, every epidermal fragment of his body rumbled like it
was about to explode.  He pressed his palms into his throbbing
temples.  "Wha . . . what's happening?!?"
     Ridiculous Sword fished two baubles out of her pocket and
handed them to Jimmy.  "Here, quick, roll these!"
     "Okay," Jimmy strained, barely able to hold on to the
objects.  "If it'll stop this."  He tossed them.  They rolled
along the ground and tumbled to a stop.
     Jimmy gasped and yelled, "It got worse!  HEEEEEEELLP!"
     He looked down at his spasmodic arms.  What looked like
bubbles underneath the skin stretched it completely out of
proportion.  He could hear muscle and tendon fibers rapidly
snapping and reforming like cracking celery.  It wasn't a tenth
as uncomfortable as it was horrifying.  "WHAT'S HAPPENING TO
ME?!!"
     "You just became a fighter," Ridiculous Sword explained,
"With an 18 strength.  Fighters with 18 strengths get to roll for
exceptional strength.  I gave you those double-zero dice to roll
just to be sure you got as strong as an ogre."
     "You . . . what . . . ?!?"
     And just as suddenly as the transformation had begun, it
ceased.  Jimmy's skin came out toughened and weathered (although
it was still 18 charisma skin).  Muscles bulged from his body
where he didn't know half-elves could _have_ muscles.  The great
phantom character sheet in the sky told him that he had the full
14 hit points.  He felt like vomiting.
     Ridiculous Sword approached him and put her arm around his
shoulders.  She looked into his eyes, and said, "Welcome to level
one."
                                #
     Peter Perfect stopped scanning with his eyes of the eagle
from his warhorse's saddle.  Across about a mile of dry lakebed,
he'd seen what he was hoping for.
     "Well well well," he told his horse and his holy sword, "It
looks like Ringman's decided to face me on my own turf.  We'll
see how well he handles himself without a magic ballista!"
     He put his funny glasses away, held Prometheus in his right
hand and the warhorse's reins in his left, and with a tiny jolt
instructed the horse to trot toward the approaching Ringman.  He
surveyed the landscape one more time: absolutely flat, not a tree
or a bush or a rock or a dumb old human to mar the expanse of
barrenness.  This place had his name written all over it; nothing
was quite so impressive as his castle jutting up from the center
of all this nothingness.
     It also gave Ringman and any goody-two-shoes cohorts he
might happen to be carrying along with him nowhere to hide.  Like
that brownie Peter saw riding on his shoulder.  Yeah, he figured
as he rode closer, maybe he'd capture the brownie and torture it
just to see what Ringman would do.  Or maybe he'd torture Ringman
to see what the brownie would do.  Or perhaps he'd torture
Ringman _and_ the brownie to see what Ringman's horse would do.
     Ringman rode up toward him on his own horse, unusually
confident for being about to face his old nemesis.  Homer the
brownie rode on his left shoulder, meteorite-iron steel plate
barding rode almost weightlessly over the warhorse's body, and
Ringman's holy avenger rode in its scabbard rather than in his
hand.  He flinched as Peter Perfect shot him a sinister grin, but
quickly recuperated.  He also noticed that Peter Perfect had
probably been reading the Other Book of Infinite Wisdom; he'd
traded in the gauntlets and chausses of his +5 adamantite-alloyed
plate mail for +6 pure-adamantite-metal full plate armor.
     Their horses trotted toward each other until they were
practically nose to nose.
     "Well, Ringman, old buddy, old pal," Peter Perfect chided,
"What brings you to my realm of dread?"
     'How can the Dungeon Master let this guy stay a paladin?!'
Ringman thought.  "I've come here to settle a grudge that's more
than a decade old," he told him.
     "Oh?" Peter Perfect asked sarcastically.  "And what grudge
might that be, hmm?"
     Ringman shook his head and grinned a bit.  "You and me, you
disgrace to paladinhood, you and I.  So long as you stay the way
you are right now, I'm ashamed to share your character class."
     "Oh, I see.  So you've finally come to die."  Peter cracked
his knuckles.
     "No," Ringman replied quite calmly, "I've come to bring you
down."
     The beardless paladin chuckled through his nose.  "You must
be joking.  You?  Alone?!"
     "Ah, but I'm _not_ alone," Ringman observed.  "I've brought a
friend."
     "Pphhh, what, the late Sick Sword's little brownie?"
     "Homer, sure, I brought him."
     A flurry of scintillating dust grains wafted away from a
spot two feet to the left of Ringman's horse.  As the wind
carried the dust away from what it had been obscuring -- or
rather concealing --  there resolved the form of a ten-and-a-half
year old girl with an adamantite dagger in her left hand and an
adamantite broadsword in her right.
     "I also brought along my first born," Ringman explained.
     "<gulp>," gulped Peter Perfect.  "D-D-D-Disgusting Sword! 
You?  Here?  How!?  What?"
     Like a lightning bolt that had drunken a permanent potion of
speed at 150% effectiveness, Disgusting Sword bolted up onto
Peter's saddle and stuck a +6 holy vorpal dagger of wounding,
dancing, life stealing, and nine lives stealing in front of his
face.  "Hello, Peter Perfect," she grinned, "I've wanted to meet
you for _so_ long."
     Peter Perfect shook with fear, even though paladins were
immune to fear by then, then dismounted his horse as fast as he
could without speaking a word.  Disgusting Sword got down too and
zipped around in front of him again.
     "Hey," Peter said, "W-w-wait a minute.  I'm a Disgusting
Character too.  I've got rights, y'know.  And besides, I'm armor
class -23; you couldn't hit me by rolling anything less than a
natural twenty."
     "You can't fool me that easily, you weak boson.  I read
Dragon and Dragrace, too.  The Dungeon Master relinquished that
natural-20-only-no-matter-how-many-to-hit-bonuses-you-have
restriction long ago."
     "Ah, b-b-but then I can hit _you_, too."  Peter held
Prometheus defensively in front of him.  It shook in his hand
like a divining rod.
     "Of course you can hit me too; I'm only A.C. negative
twenty-seven.  But I have nearly four times as many hit points as
you do, and I'm part weapons mistress.  I could tear you apart in
two seg-- er, twelve seconds."
     'Hey, baby,' a telepathic message wafted into Disgusting
Sword's head from Prometheus, 'How'd you like to use a real macho
holy longsword?'
     'BACK OFF, BUDDY,' the Disgusting Dagger replied
telepathically to the sword, 'SHE'S WITH ME.'  Prometheus was the
first intelligent sword on Central Earth in centuries to visibly
cringe.
     "Um . . ." Peter Perfect began, "Um . . . uh . . ."
     "Surrender or die," Disgusting Sword offered.
     "Surrender!" Peter Perfect yelped.  Prometheus fell to the
ground as his hands shot into the air.  'Whew,' he thought, 'Glad
she made it easy on me to decide.'
     Disgusting Sword shrugged and said, "Good."  She snapped her
fingers; Peter's warhorse obeyed blindly and sank to its knees. 
There was nothing quite like a permanent potion of animal control
at 150% effectiveness.  Peter Perfect had one of those, too, but
he thought better of using it at this point.
     "Now, the first thing we take off of your body --" shhhhink,
she exposed Peter's woolen undies, "-- is this Invulnerable Coat
of Arnd.  Here, dad, keep this warm for me, will ya?"  She tossed
it to Ringman.
     "Do I have a choice?" he replied, fumbling the chain shirt
with his mere 17 dexterity.
     'Hmmph,' Peter thought, 'It's a good thing I dragged the
torso and groin plates from that +6 full plate along for just
such an occasion.'
     "Next --" she took off his belt "-- goes your girdle of
titan strength.  Here, Ringman, why don'tcha put this on?"
     Ringman caught it while still holding on to Arnd's
invulnerable coat.  "I thought we went through why I won't put
this on before."
     'Hah, those fools,' Peter thought, 'Little do they realize
that I have a permanent potion of titan strength in effect on
me!'
     "And don't try to get away by using that permanent potion of
titan strength you have in effect on you," Disgusting Sword
warned him.  "I have Atlas strength."
     "Um, what's --" Ringman began.
     "Atlas has 25-star strength," the brownie whispered in his
ear.
     "And finally, we take away each and every item on your
person that increases your saving throw versus magic. . . ." 
Disgusting Sword took away his +4 cloak of protection, his +3-in-
a-5-foot-radius ring of protection (although why Peter Perfect
would want to protect anyone but himself was beyond her), his
stone of good luck, his luck blade longsword, his scarab of
protection, and his Axe of the Dwarvish Lords, then dispelled the
protection from good spell he'd had permanently placed upon him. 
She bared her archmagi robe.  ". . . and cast a charm person
spell on you."
     She waved her hands through the air, stuck her two index
fingers up her nose, and cried, "Oolam caloophid baeower gazots /
Diddlysquat barnstorm hotten and tots, / If I don't charm you I
think I'll just cry / So be under my power or you'll have to
die!"
     There was a tremendous crash of thunder as waves of magical
force cascaded down from the positive material plane, through
Disgusting Sword, and into Peter Perfect's head.  Ghostly voices
rose up from all around to help control Peter's mind.  Her robe
of the archmagi shone an awesome white.  It was overwhelming.
     And then, nothing happened.
     "Oh well," she said, "Looks like he made his saving throw. 
He had a 5 or better chance of making it anyway."
     "So now what do you do?" Ringman asked.
     "Easy.  I'll just cast it a few more times until he blows
it."  She did.  Two tries later, he was as harmless as a 20th-
level paladin kitten.  Heck, she didn't even have to use her
permanent potion of elf, half-elf, and human control.
     "Yes-master," Peter addressed Disgusting Sword in a
monotone, his arms jutting out in front of him, "What-may-I-do-
for-you?"
     "Get on your horse," she directed him, "And ride off to Sick
Sword's old keep.  You do know where that is, don't you?"
     "Of-course-I-do.  I-have-been-there-before."
     "Oh?  And when was that?"
     "When-I-seduced-Sick-Sword-and-injected-Tiamat's-evil-seed-
into-her-womb."
     "When you . . . you . . . what?!"  She was completely
surprised.  (She could even be attacked using six second
intervals as minutes right then.)
     "I -- I thought you knew," Ringman said.
     "Sure," Peter continued, zombie-like.  "That-was-when-she-
was-pregnant-with-Gross-Sword."
     Disgusting Sword just sat there with her mouth open.  It
took her twelve seconds to finally say, "We've got to get this
back to Ridiculous Sword."
     "Right," Ringman answered, and gave his horse a little snap
on the reins.  He started trotting off with Peter Perfect and his
warhorse following close behind.
     "Oh, and in the mean time," Disgusting Sword told Ringman,
"You might want to replace the main section of your plate mail
with the Invulnerable Coat of Arnd."
                                #
     Ridiculous Sword heard them entering through the keep's
drawbridge (Disgusting Sword usually lowered it by using her
unseen servant) and saw them through the open door of her room. 
"Oh, hi D.S.," she said, taking her hands out of Jimmy's pants. 
"You're right, puberty's lots of fun!"
     Disgusting Sword stepped aside and pulled Peter Perfect into
Ridiculous Sword's view from behind Ringman.  Peter's arms were
still out stiff in front of him.  "R.S., we have to talk."
     Ridiculous Sword puzzled at the charmed paladin in front of
her.  Fiddling with her medallion of ESP, she had the answer in
six seconds.  "So this is Peter Perfect, eh?  Um, why'd you take
him out of The Dungeon?"
     "We didn't take him out," Disgusting Sword told her.  "He
escaped over nine years ago."
     "Nine . . . ye . . ."
     Disgusting Sword shrugged.  "I didn't even hear about it
until this morning.  It's a good thing dad decided to mention it
to me."
     "Like I said," Ringman explained, "I thought you knew!"
     "And . . . what's he been doing for those nine-plus years?"
     Disgusting Sword nudged Peter Perfect with her elbow.  "Tell
her what you told me."
     "You-mean-about-how-I-made-a-deal-with-Tiamat-to-inject-a-
seed-of-evil-into-Sick-Sword's-womb-while-she-was-pregnant-with-
Gross-Sword?"
     Ridiculous Sword's jaw just about dropped to the floor.
     "Yes, that's it," Disgusting Sword told him.
     "I-made-a-deal-with-Tiamat-to-inject-a-seed-of-evil-into-
Sick-Sword's-womb-while-she-was-pregnant-with-Gross-Sword," Peter
told them.
     "That's what I thought he said," Jimmy commented.
     "So that means," Ridiculous Sword figured, "Gross Sword was
drawn toward evil by an outside agent.  It _wasn't_ all mom's
fault!  I _knew_ it!"
     "Why did you make such a deal," Disgusting Sword asked the
clean-shaven mind-controlled paladin.
     "It-was-in-our-mutual-interests.  Tiamat-got-to-spread-evil-
all-over-the-multiverse-and-I-got-to-have-my-revenge-against-the-
woman-who-destroyed-the-IUDC.  And-her-husband."
     "And how did you manage to keep your paladinhood?" Jimmy
asked.
     'Silly question,' Ringman thought.
     "Silly-question," Peter bleated.  "I-did-it-for-the-sake-of-
perpetuating-my-ideal-of-lawful-goodness."
     "Which is?"
     "Live-and-let-live . . . unless-you-don't-agree-with-them."
     "Say, Ringman," a voice from Peter Perfect's side cut in. 
It was Prometheus.  "Since my master is in no shape to kill
anything, how's about you and me teaming up again?"
     Ringman put his fists to his hips.  "Why Prometheus, what a
_wonderful_ fair-weather friend you are!"  He pointed out the
nearest glassee spell -- er, window.  "See that pool over there? 
Well, it's really fresh water, and a quick dip now might be
refreshing!"
     "You sure you don't want me?" the holy avenger pleaded. 
"I'm +6 now!"
     "And how did you manage that?"
     "Easy.  Peter Perfect just shucked out the 20 000 extra gold
pieces and had me upgraded."
     "Go disappear in a puff of logic," Ringman cursed it.
     "Fine," the holy avenger replied, "I'll take that as a no
for now."
     "Hmmph," Disgusting Sword noted.  "If Prometheus were an
artifact I'd give it the humble ant treatment."
     Ridiculous Sword totally ignored their sidetrack.  She was
too deep in thought about the nine-year-old news she'd just
received.  "How many times have I been in conference with the
gods?  How many times have I asked my contact-other-plane or
vision spells if there's anything unusual going on?"  She read
Ringman's mind briefly.  "Limbo, even Melnic the Loud's bard
university knew about what Peter did to mom!  Why did everybody
keep it a secret?!"
     "Hey," Jimmy perked up, "Maybe there was a conspiracy going
on against you!"
     "What makes you say that?" Disgusting Sword asked.
     "'Cause then you could go out and find the conspirators and
HACK THEM TO PIECES!  Wham!  Wham!  Die, die, die!"
     Ridiculous Sword waved his gestures aside.  "No, God II damn
it, there has to be a reason!  In the months that I've been a
disgusting character I've contacted just about every deity known
to man and humanoid, good, evil, lawful, chaotic, or otherwise. 
Supreme beings who hate each other don't just conspire to
withhold information from the most powerful force of lawful good
in the multiverse!"
     "Or the second most powerful force of lawful good in the
multiverse," Disgusting Sword interjected.
     "Just the same, we should have heard _something_ about it! 
Hmmmm, I wonder . . . the fact that we _didn't_ know gave Gross
Sword time to be able to do all the sick, disgusting, gross,
ridiculous, unbelievable things he's done without our butting in
until it was too late.  Some greater force out there _wanted_
Gross Sword to get to my power level.  Maybe if we knew more
about why, we could find out how to bring our dear 3/4-brother
down."
     Jimmy puzzled.  "But if the gods won't talk to you --"
     "The Happy Hunting Grounds the gods won't talk to me!" 
Ridiculous Sword stammered.  "I'll _make_ them talk!"
     And without another word, the most powerful force of lawful
good in the multiverse amulet-of-the-planesed out of there.
                                #
     She emerged on the plane of Gladsheim.  This was the outer
plane of chaotic good neutrals and, like most of the outer
planes, was multi-layered.  The first level of Gladsheim, and the
only level touching the astral plane, was named Asgard; the
second, which housed the dead warrior heroes brought there by the
valkyries (along with a few fire giants), was named Muspelheim;
and the third, where the Norse gods reigned, was named
Nidavellir.  Unlike the other outer planes, the three layers of
Gladsheim were connected to each other by two rainbow bridges. 
Ridiculous Sword approached the first bridge.
     A very large, flaming battle axe came down and blocked her
path.  "Halt!" the axe's owner demanded, showing off his gold
teeth, "Who goes there?!"
     "Oh, come on Heimdall, don'tcha recognize me?"
     Heimdall gulped.  "Ridiculous Sword?  Wh-wh-what do you want
here?"
     "I want to go to Nidavellir and see ol' papa smurf."
     Heimdall cleared his throat threateningly.  "No one as
lawful as yourself may cross this rainbow bridge without first
crossing Heimdall!"
     "Now really, do you think a wimpy +3 battle axe like that
one is going to stand a chance against me?"
     "How did you know my axe was +3?"
     "Easy, it's the strongest kind of battle axe the Other Book
of Infinite Wisdom lists on its miscellaneous magic weapons
tables.  Now let me in."
     "No!"
     Ridiculous Sword blinked her eyes and dimension doored to
the other side of the bridge.  "Looks like you don't have much
choice in the matter," she shouted back to him, and departed
forty-two seconds later.
     The rainbow bridge leading from Muspelheim to Nidavellir
didn't have any picky old guard on it, so she didn't bother
wasting one of her 399 remaining fourth-level spells on it. 
However, there was a god on the other side with long blond hair
and a great big magic war hammer in his hands, wearing gauntlets
of ogre power and a girdle of giant strength, riding on a chariot
drawn by two trained attack goats, who was spouting curses at
her.
     "Odds and forsooth!" the blond-haired god thundered, "I
knowest not how ye managed to pass by Heimdall at yon Bifroest
Bridge, but ye had better get thine buns back to where thou
camest from or know the wrath of my magick war hammer of
thunderbolts, Mjolnir!"
     "I don't think Clerasil would like you using his hammer,"
Ridiculous Sword pointed out.
     "You dare to mock the God of Thunder?!  Eateth hot lightning
bolts, lawful slime!"  He pointed his Mjolnir at Ridiculous Sword
and pulled the trigger.
     She made her saving throw (that is, she didn't roll a "1")
and easily jutted her hips to one side.  The bolt missed her.
     "So, thou thinkest thou canst escapeth my wrath just because
thou art a monk and taketh no damage from an attack if thou makst
thy saving throw!  Well, that'll not save thee from Mjolnir's
adamantite-alloyed steel head!"
     The thunder god cocked back his right arm and swung his
hammer a mighty blow.  Ridiculous Sword drew her two main
weapons, parried Mjolnir with her Ridiculous Hand Axe, and jutted
the Ridiculous Broadsword to within a mil of the blond god's
neck.  "That wasn't very polite," she told him.
     "Um, er, uh -- phhh," the God of Thunder groped for words as
he blew some blond hair out of his face.
     Ridiculous Sword took the sword away.  "Thank you," she
said, and walked over toward Odin's Place at a leisurely 2560
feet per second.
     Odin's Place had a colossal pink neon sign over the
drawbridge that read, "By invitation only."  Ridiculous Sword got
out a little piece of fleece, ground it between her 25* strength
palms, blew the fleece dust at the sign, and chanted the ancient
mystical words, "Permanent illusion!"  That being done, she leapt
over the moat and smashed through the adamantite-reinforced
drawbridge.
     Odin turned from his wife Frigga, with whom he was having a
dreadful argument, and shouted, "Who dares smash a human-shaped
hole through my drawbridge?!!"
     Ridiculous Sword snapped her fingers and centered a
continual light spell two feet above her head.  "Me."
     "And who art thou?"
     "Ridiculous Sword, the most powerful force of lawful good in
the multiverse."
     Odin was furious.  "I didn't invite you!"
     "Take another look at your sign."
     Odin peered through the window at the pink glowing letters. 
Sure enough, the sign now read, "By invitation only unless your
name happens to be Ridiculous Sword."
     "Upstarts and robes!" Odin cursed.  "I'll show thee who's
boss in Gladsheim!"  He walked over to one wall of the chamber
and grabbed on to a cross-brace several feet across which had a
barrel glued to it.  He pulled.  The cross-brace moved slowly
away from the wall and exposed more and more of a thick sheet of
polished metal.  The sheet was long and narrow and had sharp
edges.  It was about ten feet out of the wall before Ridiculous
Sword realized that the cross-brace was actually a hilt, the
barrel was actually a grip, and the sheet of metal was actually
the blade to the biggest sword she had ever seen, bar none.
     When Odin finally finished drawing his sword from the wall,
it was about twenty-five feet long and must have weighed well
over half a ton.
     "What's that," Ridiculous Sword asked, "A twelve-handed
sword?"
     "Avast ye, yon varlet, hast thou not heard of the
Odinsword?!"
     "I thought you normally used Gungnir, the spear with the
never-ceasing thrust."
     "A man can only keep thrusting for so long, thou knowst; and
besides, if I use the Odinsword I can do more damage that way!"
     Odin swooshed the gigantic sword around the room at
Ridiculous Sword.  As she ducked, Ridiculous Sword wondered if
_that_ sword shouldn't have been named after her; she hadn't the
foggiest idea how Odin kept it balanced.  The first sword hack
whooshed harmlessly over her head and nearly hit Frigga, whom
Odin may have been aiming at as well for all she knew.
     It would take Odin about two minutes to finish following
through on that swing and hack at them again in the opposite
direction; that would be more than enough time for Ridiculous
Sword to do her thing.  She rushed up to Odin the Head God,
grabbed the Odinsword out of his hands, broke it in two across
her leg, slapped him harshly on the wrist, shook her finger at
him, and declared, "Tch tch tch, naughty boy, didn't your mother
ever tell you not to play with knives?"
     And with that, both Odin and Frigga fainted.
     Ridiculous Sword had Odin back on his feet within eighteen
seconds.  "Now tell me," she demanded, "Why didn't you tell me
about Peter Perfect's pact with Tiamat to taint the baby in Sick
Sword's womb?"
     Odin shrugged.  "D-D-D-Dungeon Master's orders!  No telling
the player characters anything about Peter Perfect.  Honest,
that's all I know!"
     Ridiculous Sword stared him warily in the eye and cast a
detect lie spell on him.  The green spot over his head meant that
he was telling the truth.  She sighed.  "I guess I'll have to try
some other outer planes then.  But one more question: just what
in the universe is a player character?"
                                #
     And try some other outer planes she did.  Olympus was like
Gladsheim all over again, what with Zeus, Hera, and Ares being
dead ringers for Odin, Frigga, and Thor; it was also as fruitless
as the Norse plane.  She throttled a few greater devils she found
running around in Acheron, but they only gave her the same sob
story.  On the Happy Hunting Grounds it seemed that the only word
the natives knew how to speak was "How."  She broke some of the
inhabitants of Nirvana out of their meditative stupors and looked
into their minds, but all that got her were pictures of the back
walls of their skulls.  The boss, tyrant, king, and queen of the
elemental planes of earth, fire, water, and air were likewise
uninformed.  Even going up into the face of God II, her own deity
on the seventh layer of Heaven, only got her a mild suntan.
     She materialized on the keep floor and rested her head on
her hands.
     Ringman turned to his newly-reappearing daughter with no
more feeling than if she'd just come back from going into town. 
He was almost used to this kind of stuff by now.  "How'd it go?"
he asked.
     Ridiculous Sword _could_ have just said, "I learned
absolutely nothing," and been done with it, but instead she fired
up her telepathic projection and compressed every detail of the
last two hours into a six-second-long beam aimed at Ringman's
cerebral cortex.  Ringman got the message, all right, in a very
forceful way.
     "Wow," he said.
     "Not used to seeing things through the eyes of your ten-
year-old daughter, eh?" Ridiculous Sword asked him.
     "Not in the slightest.  I'm also not exactly used to seeing
things through the eyes of a disgusting character."
     "Say, speaking of disgusting characters, have you read the
new paladin rules in the Other Book of Infinite Wisdom?"
     "In the _Other_ Book of Infinite Wisdom?" Ringman inquired.
     "Sure, you know, the one with the picture of the brass-
headed alchemist looking googoo-eyed at a tome on the front
cover."
     "Um, is this something I'm supposed to know about?"
     "It's _only_ the official upgrade to both the Book of
Infinite Wisdom _and_ the Book of Finite Wisdom as authorized by
the Dungeon Master."
     "Oh.  No, I haven't seen the upgraded paladin rules."
     "Well then," Ridiculous Sword smiled, hauling out her copy. 
"For starters, you're no longer a sub-class of fighters.  You're
now a sub-class of this other class called a cavalier.  And since
cavaliers don't have any prime requisite, you don't get any 10%
experience point bonuses anymore."
     "Oh," Ringman worried.  He checked his tally.  "No problem;
I'm still ninth level with fifty-five thousand points to spare."
     "You also get to train your strength, dexterity,
constitution, and charisma every time you gain a level until
they're all 18's (or 18/00's); are immune to fear; project a
protection from fear aura in a 10 foot radius; can vault into the
saddle and have your horse underway in six seconds flat; ride
your horse at 20 yards per minute faster than normal, not
counting horseshoes of speed; remain conscious all the way down
to negative however many hit points you had at first level; have
90% immunity to any mental magic, including a psionic blast; and,
since you're ninth level, are at +2 to hit and +9 to damage with
mounted lance and +1 to hit with long sword."
     Ringman gaped.  "You mean, I have this globe of anti-fear
emanating from my body --" the air within ten feet of him
suddenly glowed a dim grey; "-- can hit better with my holy sword
--" he could almost feel his hack and thrust improve; "-- and by
now would have maxed out on my dexterity --" his new and improved
nerve endings gave him a buzz; "-- my constitution --" his torso
bulged out to accommodate the extra 9 hit points; "-- my now
_full_ ogre strength --" his musculature broadened and toughened;
"-- and my charisma --" a phantom breeze swept his hair back in a
gentle rolling curve; "-- all because somebody decided to change
the rules again?"
     "You bet!  I keep my mind's eye peeled for those kinds of
things all the time.  Heck, I wouldn't even have gotten that
extra fifth level druid spell, those two extra sixth level druid
spells, or those three extra seventh level druid spells if I
hadn't heard that druids can now go all the way to 15th level and
become the Grand Druid; in fact, they can go all the way to 23rd
level as a Hierophant and get all sorts of neat interplanar
powers."
     "Although you get to cast six more levels worth of druid
spells if you stay a Grand Druid!" Disgusting Sword called out
from the next room.
     "And not only that," she whipped a magazine out of one of
her portable holes, "The special Other Book of Infinite Wisdom
supplementary issue of Dragon & Dragrace says that weapons
masters can specialize or double specialize in a single melee
weapon just like fighters and rangers can.  They get their
number-of-attacks-per-minute entry shifted to the next better
category with this weapon, and get +1 to hit and +2 to damage
with it -- +3 to-hit and damage if they double specialize.  And
of course these to-hit bonuses add into their armor class when
they're actively parrying just like all their other hundred or so
bonuses do."
     "Oh, wow.  So now you're even more disgusting, is that
right?"
     "Hey, I get 15 attacks per minute with any of my Ridiculous
weapons -- 18 per minute with my Ridiculous Hand Axe, which I
retroactively double specialized in.  I also retroactively gave
the Axe some powers from the new magic weapons they have in
there.  Even the new +6 Prometheus is an official weapon type
since they added +6 defenders and holy avengers to the magic
swords tables.  See this?"  She whipped out an ordinary-looking
spoon.  "This ordinary-looking spoon is a spoon of stirring. 
Stir any potion with it and if you're _real_ lucky, the potion
comes out at _twice_ normal strength.  Not just 150%
effectiveness, twice normal strength.  Oh, and I almost forgot,
you have another character ability to worry about now:
comeliness."
     "Comeliness?  What's that, the chance I have of co--"
     "Er, no no no no no; comeliness is how good looking you are. 
Hey, Disgusting Sword," she called out, "How many dice does
Ringman get to roll up his comeliness with?"
     Disgusting Sword walked in carrying her personal copy of the
Other Book of Infinite Wisdom.  She flipped to page 74.  "Um,
well, since his other six abilities are already rolled up, either
4d6 discarding the lowest die or 3d6 six times choosing the best
roll of the six."  She looked up at Ringman.  "Too bad, you'd get
to roll 5d6 and discard the lowest two dice if you were a pure
cavalier."
     Ridiculous Sword took out four dice and rolled them across
the floor.  They came up 6, 6, 2, and 1.  "Fourteen," she told
him, "Plus 3 for having a charisma of 18 makes 17 comeliness. 
Darn, you just missed the next higher category of attractiveness;
but you're pretty good-looking, though."
     Ringman glanced at his distorted reflection in the arm of
his +5 plate mail; then he looked back at them in disbelief.  "I
don't look a damn bit different!" he insisted.  "Do you mean that
if you had rolled four 1's my comeliness would be a . . . let's
see, a . . . five --"
     "Six," Ridiculous Sword corrected him.
     "Okay, a six, and that I would suddenly become homely?"
     "No, if I'd rolled four 1's I'd have rolled it over."
     "But that's cheating!"
     "No it isn't; it's good business practice."
     Ringman grumbled slightly.  Chivalry was fast becoming a
four-letter word.  "Well, at least I'm not excessively good
looking.  Um, what would happen to me if I were in that next
comeliness category?"
     "If you were in the 18 to 21 range, you'd fascinate
practically every woman you met and be the envy of most ordinary-
looking males.  As it is, though, you're just plain old run-of-
the-mill good-looking."
     'Fascinate practically every woman I met,' Ringman thought,
'And I missed it by one.  Hmm, I wonder if any of them could
measure up to Sick Sword?'
     "Oh, geez, I almost forgot," Ridiculous Sword expounded. 
"You got a couple more cavalier restrictions besides your normal
paladin ones."
     "More restrictions, oh great.  What do I have to give up
now?"
     "Well, first off, you _have_ to take a lance as your first
weapon of proficiency."
     "But I don't even have a lance!"
     "You do now."
     Ringman searched his memory.  He _did_ remember a lance being
stashed in one niche of his castle, although he couldn't remember
having put it there or even having remembered it before.  "Oh,
all right, I'll give up weapons familiarity with that light
crossbow of mine.  I never use it anyway."
     "And you have to prefer a dagger over a hand axe."
     "Don't tell me."  Ringman looked at the loop in his belt
where his +3 hand axe used to be.  In its place was a +4 dagger
of throwing.  He wondered briefly why it wasn't his old +2 dagger
that was +3 only against larger-than-man-sized opponents, until
he remembered that the Other Book of Infinite Wisdom had created
a few more miscellaneous magic weapons since then.  He had no
idea where the 1500 gold piece price difference between a +3 hand
axe and the cheaper +4 throwing dagger had gone. 
     "_And_ . . . you have to choose full or field plate armor
over plate mail, even if the plate armor is non-magical."
     "What?!" Ringman gasped.  He snatched the book from
Ridiculous Sword's hands and read the cavalier entry.  After his
eyes bugged out at what it said, he flipped over to the
description of new armor types.  He read to himself for a few
seconds, then looked up in dismay.  "My deity!  They want me to
replace _this_, this perfectly gallant-looking armor of adamantite
alloyed plate mail, with a tin suit that actually becomes one
armor class _worse_ if it absorbs too much damage?!"
     Disgusting Sword and Ridiculous Sword nodded in unison. 
"That's right."
     Ringman could feel the arms and legs of his armor vibrating. 
Ringman had a good idea of what was about to happen.  "Oh, no,"
he cursed, covering his face with his hands, "Not again."  He
took his hands away and gazed skyward.  "All right, get it over
with!"
     By the time he looked back down six seconds later, every
piece of plate mail on his body had become a mithral-alloyed
piece of full plate armor.
     "Mithral alloyed?" Ringman asked.  "But that's only +4."
     "Only plus four, he says!" Ridiculous Sword snickered. 
"This coming from the man who absolutely refuses to wear a girdle
of titan strength?"
     "But doesn't mithral-alloyed full plate armor cost mucho
gold pieces?"
     "You got a discount from not getting the full suit.  And
1500 gold pieces worth of credit from exchanging your hand axe. 
Besides," she turned a small fragment of a million-gold-piece gem
to the light, "We covered the difference."
     "And anyways," Disgusting Sword noted, "With +4 full plate,
after it absorbs its 90-damage-point limit, you'll be exactly the
same armor class you were in +5 plate mail."
     Ridiculous Sword shrugged.  "We could have got you +6 pure
adamantite full plate, but that wasn't on the treasure list in
the Other Book of Infinite Wisdom, and we _know_ how you can't
stand to bend the rules."
     "Oh, _thank_ you _ever_ so much for sparing me the
embarrassment!  I think I'll go take a bath in Crysglass lake now
for a year or two to see if mithral alloyed steel can rust."
     "Awh, don't be so sore.  Just think: now you can stay
conscious all the way down to -16 hit points."
     Ringman did a double-take.  "But I only had 13 hit points at
first level."
     "Not any more you didn't.  You get a d10 _plus_ three hit
points at level one, in addition to your constitution bonus."
     "Oh, but then I should have had 17 hit points at 1st level,
because my constitution just went up to 18."
     "No, your constitution didn't make it up to 18 until you
were third level."
     "Oh, well, forgive me for not remembering something that
never happened to me!  Geez!"
     "My, aren't we in a testy mood today."  Ridiculous Sword
pulled a glass full of a smoky-colored liquid out of her ethereal
cooler.  "Here, drink this.  You'll feel better."
     "_Ohhhh_ no you don't," Ringman insisted, "I almost fell for
that last time!  What is it today, a double-strength permanent
potion of extra healing at 150% effectiveness?!"
     "No, no, no, nothing like that," Ridiculous Sword assured
him.  "And the 150% effectiveness bit isn't cumulative with the
twice-normal-strength thing anyway.  You just looked like you
could use a drink."
     Jimmy materialized by the side of the room.  He had just
gone through several spheres of annihilation (with some severe
magical protection) and was trying out his new psionic
disciplines.  Sometimes he couldn't stand having all these
powers, but usually he just thought they were neat.
     "No thank you," Ringman waved Ridiculous Sword's glass away,
"I'm not thirsty."
     "Well, I sure am!" Jimmy interrupted, walking toward the
center of the room.  "If you won't drink this, I will."  He took
the glass from Ridiculous Sword's hands and swallowed it down. 
It was good enough for him to lick his chops and wipe his mouth
on his sleeve.  "Mmmm, that tasted great!  What was it?"
     "A permanent potion of invulnerability at twice normal
strength," Ridiculous Sword told him in a perfectly level voice.
     Jimmy gazed down at the glass, then down at the floor, said,
"Oh," and strolled slowly out of the room.
                                #
     "Only one more permanent potion to go, Jimmy," Ridiculous
Sword told him, pouring the contents of her +6 bowl of potion
mixing back into its original decanter.  "Oil of acid resistance. 
Take off all your clothes."
     Jimmy eyed her warily for a moment until he was sure she
didn't want to play doctor with him, then stripped bare. 
Ridiculous Sword immediately began rubbing the acidproof liquid
over every exposed portion of his body.  She lingered briefly
around his groin when she got there, but then moved on.
     "Here, Jimbo, you'll have to drink a little of it too."
     Jimmy shrugged, took a mouthful from the container as she
handed it to him, and swallowed it with a grimace.  "Oh, God II,
is that stuff bitter!"
     "Of course it's bitter.  This is the most powerful antacid
known to man and god alike.  Now your mouth's been coated, and so
has your throat, and your stomach.  Within about nine hours,
it'll have gone all the way through your digestive tract and
you'll be acid-proof on the inside from both ends.  You'll never
get an ulcer and never have to worry about heartburn again."
     "Heartburn. . . . That sounds like the title of an evil
magic-user spell or something."
     "It does at that, doesn't it?  Okay, now, I'm gonna put a
drop in each eye.  It'll sting for a couple seconds."
     "Don't worry," Jimmy said, tensing up every muscle in his
body and straining his voice, "I can take it!"
     She let one drop fall into his left eye, then his right,
after each of which Jimmy blinked almost uncontrollably.  Within
a few seconds his eyes felt normal again, and by that time
Ridiculous Sword had already finished coating the back of his
neck and was working the oil into his left ear.
     "So, R.S.," Jimmy began, trying to take his mind off of his
fifth rub-down that day, "If the gods can't give you any answers
as to why they wouldn't give you any answers, where'll you go
next?"
     "I'm not sure," she commented, acid-proofing his chest. 
"The gods were all hushed up about it for some reason.  I figure
it's because they had to answer to a higher station.  I need to
find someone who doesn't have to answer to anybody, someone on
another plane who gets in on all the interplanar poop and yet
isn't bothered by godly protocols."
     "Oh," he chuckled, "You mean like Omnion?"
     "Omnion," Ridiculous Sword said, rolling the idea around in
her mind.  "Omnion," she repeated.  "She just might know. . . ."
     "Oh, you are _not_ serious!" Jimmy quavered.
     "You bet I am.  Let's get Disgusting Sword and we'll all
meet her on the first plane of Hell."
     "C-c-c-couldn't we just send her a postcard?"
     "Mail hasn't been invented yet."
     "Then couldn't you use one of your extraplanar powers to
contact her from here?"
     "She might not believe it's us."
     "Then you could _make_ her believe it."
     "Nope, there ain't no other way around it.  I might need to
be there to cast just the right spell on her or something."
     "So why do _I_ have to come along?"
     "For the educational experience."  She finished coating his
Achilles heels with the oil.  "Now come on."
     One minute and forty-two seconds later, Ringman, Disgusting
Sword, Ridiculous Sword, and Jimmy all materialized in the first
layer of Hell.
     The place gave new meaning to the word hothouse.  200 to 300
degrees was the likely temperature, and the ground stank of
burning sulfur.  Vaguely humanoid blobs, the "lemures" which all
(or nearly all) new recruits in Hell got turned into, littered
the ground as far as the horizon stretched.  Every twelve feet or
so an orcish-looking devil with a whip and a trident punctuated
the sea of lemures.
     "Now Jimmy and Ringman, watch out for the devil taskmasters. 
You two might be fire resistant, but you're not fire immune.  At
least not without being within twenty feet of that Sick Sword or
any of our artifacts.  You _especially_ be careful, Jimmy; you're
only first-level with only 14 hit points."
     "How come I'm fire resistant?" Ringman asked.
     Ridiculous Sword and Disgusting Sword chanted, "The
Invulnerable Coat of Arnd."
     An orc-like taskmaster stopped beating up on one of his
lemures and noticed the new arrivals.  "Hey, who the here are
you?!"
     "That's none of your business," Ridiculous Sword told him.
     The orc-devil sniffed briefly in their direction.  "You're
. . . you're all lawful _good_!  Why, I ought to --"
     Ridiculous Sword and Disgusting Sword pulled out their holy
symbols and shouted "BEGONE!" at practically the same time.  The
devil turned black with fear and ran away with its barbed tail
between its legs.
     Jimmy turned to the lemure the devil had been beating. 
"Have you seen Omnion?" he asked it.
     "Uhhwuuuwuuwwuuuuuhpthhhht," the lemure replied,
accidentally spitting up some internal glop.
     Jimmy wiped the ectoplasm off.  "Ewwwwwww," he commented. 
"Forgot those things barely have minds."
     "No problem," Ridiculous Sword reassured him, "I see her."
     Six seconds later, everyone else saw her too.  She wasn't a
lemure at all.  She was just plain old Omnion -- stripped of all
her magic items, of course, but still the same Omnion Ringman had
slain eleven years hence.  She was stooped over a rather large
basin, moving something in her hands back-and-forth against a
rough board.  Suds covered whatever it was in her hands and the
interior of the basin.
     Our four heroes walked toward her rather cautiously. 
Several dark-shaded somethings were piled in a heap behind her;
the back and top ends of the pile were lost in the darkness. 
Omnion saw them, wrinkled her forehead, and then smiled.  "Well,
hi, all you _lovely_ people.  I was wondering when you'd get
around to stopping by."
     Jimmy indicated the boundless mountain of stuff behind her. 
"What's the pile?"
     "What's the pile, he asks!  HA!  That's a good one!  'What's
the pile?'  _IT'S DIRTY LAUNDRY_!!  That's all I've been doing for
the last eleven years is DIRTY LAUNDRY!"  She wrung out the
devil-shaped shirt in her hands, threw it at the lemure next to
her, told it "Rinse!" just as she had for the past 132 months,
took a pair of pants down from The Pile and dunked it in her
basin.  "And just think, I only have 988 years to go.  Then I can
_really_ show Hell who's boss!"
     "No talking, slave!" a taskmaster shouted in her direction. 
"Back to work!"
     Omnion grabbed the taskmaster's collar with one hand and
drew him up to meet her gaze.
     "Omnion!" the guard yelped.  "I'm sorry, I, er, didn't
recognize you!"
     "Sorry isn't good enough," she said, tossed him in her
basin, scrubbed his head against her washing board, took him out,
broke him in half across her right leg, and flung his remains to
the far horizon thanks to her permanent potion of titan strength.
     "Oh, don't worry," she told our heroes, "They'll replace him
soon enough."  She took the pants in her basin in hand and began
scrubbing.  "And, uh, I'm _really_ sorry to hear about your
mother, little Sicklets.  And your parents too, Jimmy."  Her
sinister smile revealed her still-perfect 18 charisma -- er, 23
comeliness -- teeth.
     "So how come you have to put in 999 years of servitude?"
Ridiculous Sword asked her.
     Ringman counted on his fingers and mumbled to himself.  988
plus 11 was about 999, all right.  He never was much good at this
math thing.
     "_Why_?" Omnion blurted.  "Because you _have_ to!  _Everybody_
who gets sent to Hell has to take anywhere from a hundred to a
thousand years worth of torture, depending on how evil you were
while you were alive.  Since I was invulnerable to most of the
things they could throw at me, they assigned me to do Hell's
laundry for 999 years.  I was pretty pissed that they didn't
think I was worth the full millennium treatment."  She wrung the
pants out, threw them at the lemure next to her, told him to
"Rinse!," plucked a pair of smelly underwear from the pile, and
chucked it into her tub.
     "Yeah, but why do you _have_ to do it?"
     "Because they make me!"
     "But couldn't you just beat them all up?"
     "Sure I could."
     "Then why don't you break out of your predicament?"
     She sighed.  "They don't make me by _ordering_ me to do these
things.  When they assign you to do something, you _have_ to do
it.  You just plain have to.  It's one of the laws of nature in
this place, for crying out loud!  Now get out of here, unless you
have something important to do!"
     Ridiculous Sword folded her arms.  "Aren't you afraid we
might kill you?"
     "Kill me?  Heck, go ahead.  Non-existence sounds like a
welcome relief from _this_ monotonous lifestyle -- er,
deathstyle."
     "Laundry's that dull, huh?"
     "Well, it's not all that bad.  In another four-and-a-half
centuries or so they're going to invent the washing machine, and
I'll have more free time to do what I please.  But I still won't
be able to leave this plane.  Nope.  Un-uh.  Nosirree.  That's a
no-no.  No interplanar travel until your torture period is over 
-- not even to any of the deeper layers of Hell."
     "But you can _contact_ other planes, can't you?"
     "Oh, phhhh, _anybody_ can do _that_!"
     "Good.  There's been this sort-of news blanket over every
not-from-the-prime-material-plane creature we've talked to for
the past decade or so.  It seems the Dungeon Master didn't want
the gods to tell us about what Peter Perfect and Tiamat did to
our mom."
     Omnion grinned at their mentioning it.
     "I take it you know about Tiamat and her seed of evil,
then."
     "Oh, you bet," Omnion shot back.  "Heck, I could have told
you about it, even.  I could have told you everything.  But did
you once call up your --" she leered at Ringman "-- good buddy
Omnion and ask her, 'Hey, Omnion, is there anything going on that
we should know about?'  No!  You just thought your own petty
little deities and demigods would tell you everything!  Come _on_,
this is the thirteenth century, wake up and smell the adamantite! 
Do you honestly think God II is going to be perfectly honest with
you just because he's your deity?!"
     "He's not my deity," Ringman mumbled.
     "So, then," Ridiculous Sword got back on the main track, "Do
you know _why_ the Dungeon Master forbade the gods to chat with us
about it?"
     "Honey, if I knew why, I'd . . . I'd . . . I'd know why, I
guess."  She scrubbed the underpants.
     "Then do you have any idea why?"
     "You bet.  The Dungeon Master was making one of his usual
cruel and wanton proclamations."
     Ridiculous Sword's and Disgusting Sword's eyes bugged out.
     "Or maybe the D.M. was testing out his new hyperdimensional
transport inverter beam when it malfunctioned and caused all non-
material beings within a 700-plane radius to be unable to talk
about the event.  Or maybe the Big Referee accidentally stepped
on all the gods' brains and wiped out their speech centers for a
decade.  _I_ don't know!"
     Ridiculous Sword cast a charm person spell on her a few
times just to make sure.  She was indeed telling the truth.
     "Well, thanks anyway," she said, and prepared to leave.
     "Any time," Omnion sneered at her.  She watched them
dematerialize in a purple haze.
     "Hmmmph," she grumbled to herself, wringing out the undees. 
"Rasper the pit fiend thought he could rule Hell forever when
Wierd Dough vanquished all the arch-devils eleven years ago.  Ha! 
Only nine hundred eighty-eight years left; your days are
numbered."
                                #
     The halls of Sick Sword's small keep had not sounded so
quiet for years.  Nobody said anything to anyone else since
they'd gotten back.  Of course, part of that might have had to do
with the fact that Ringman, Disgusting Sword, and Jimmy all went
off to take a nap.
     Disgusting Sword found her sister sitting by the window,
staring out into space, with her head resting on her left palm. 
She had been like that for hours.  Disgusting Sword brought her
halfway out of her trance by telepathically asking her what was
going on.
     'Oh, nothing, as usual,' Ridiculous Sword thought back. 
'Nobody knows why Gross Sword's contamination was hushed up. 
Nobody in this whole multiverse knows.  Hardly any of them seem
to care.'
     'I care.  You care.'
     'Oh, sure, and why didn't our own deity care?  Why didn't
anyone say anything?  Didn't the forces of law and good give a
damn about what would happen to Sick Sword -- or to Bahamut?'
     'The important thing is that we know _now_, so we can prevent
him from killing any other supreme beings or from mass murdering
entire planar populations.'
     'Prevent him?  How?  Every time we find a new loophole in
the rules, so does he.  We can't even hit each other any more. 
He can do _anything_ he wants, and there's not a single force in
the multiverse that can stop him!'
     Ringman entered the room behind them and watched for a
while.  Not that you can really be behind anyone wearing a robe
of eyes, that is.
     'Not even Omnion knew anything,' Ridiculous Sword's
telepathization continued.  'There has to be a reason for all
this!!'
     A rather annoying clanking sound approached from the laundry
room.  Peter Perfect emerged into their room, carrying a laundry
basket as stiffly as he could manage.  With that adamantite full
plate armor, his stiffness, and his monotone voice, Peter would
have easily been mistaken for a robot had robots been invented
yet.  He set the basket down at Disgusting Sword's feet.  "Here-
you-are-master -- er, mistress.  I-made-sure-to-wash-your-robe-
of-the-archmagi-in-the-same-load-as-the-rest-of-the-white-
clothes."
     "Um, thanks," she said, lifting the white robe out of the
basket.  It crackled as she wrenched it free from its
environment.  Hmmmph.  A thousand years of medieval advancement
and they still hadn't figured out a way to get rid of static
cling.
     "Like I was thinking," Ridiculous Sword spake, "Like I've
_been_ thinking ever since I found out, there has to be _some_
reason the gods clammed up, and _somebody_ has to know it!"
     "Heck," Ringman interjected, "At this point it seems that
the only person who'd know is the Dungeon Master."
     Ridiculous Sword's head sank back into her hands.  "Yeah, I
know," she sighed.  "And I've even tried using the limited
omniscience power of my artifacts to find out.  Six times today
alone.  But every time I called up the Dungeon Master with _that_
particular question, I got his answering machine!  It's as though
even the D.M. is keeping it hidden."
     "Hey," Disgusting Sword snapped her fingers, "Maybe if you
talked with the Dungeon Master face-to-face!  The D.M. _couldn't_
back down then and might _have_ to tell you!  Maybe. . . ."
     Ridiculous Sword nodded solemnly.  "I've thought of that
myself.  But no one knows what the realm of the Dungeon Master is
like.  No one in history has even _seen_ the Big Referee and
returned to tell about it!  You can't exactly jaunt over to his
plane and chat with him, because he doesn't _have_ a plane in the
usual sense of the term.  Anybody who went to the Dungeon
Master's world would be outside of the multiverse as we know it
and completely at the D.M.'s mercy.  Still, it doesn't look like
we have much choice."
     Jimmy had overheard, too, and was overjoyed.  He bounded
into the room shouting, "Oh boy!  You're gonna go visit the
Dungeon Master!  Can I come along too?  I always imagined the
D.M. as this old guy wearing black-and-white stripes with a
whistle stuck in his mouth!"
     "No, you can't come along," Ridiculous Sword told him
firmly.  "You probably wouldn't survive for an attosecond.  And
I've always imagined the Dungeon Master as a female jailkeeper
with a huge keyring that locks and unlocks all these dungeon
doors."
     Disgusting Sword snorted.  "That's funny.  I've always seen
him as this three-foot-high gnome-looking guy with long white
hair, a huge bald spot, red robes, and a cabbage-patch face."
     "Whatever he looks like, I'm going to have to risk it.  I'll
take all my magic items and artifacts along with me, of course;
if any of them work against me in his realm I can always discard
them.  It never hurts to have a little insurance."  She paused. 
"If I weren't a paladin, I'd be really really scared."
     "I'm a paladin," Ringman said, "And I'm still scared."
     "Yeah, but neither you nor I can be affected by a fear
_spell_, at least."
     "Oh.  Hadn't thought of it that way."
     Ridiculous Sword exhaled once resignedly, and then once
again decisively.  She hauled out her amulet of the planes.  She
kicked in the vision spell from her Ridiculous Hand Axe.  She
cast commune, contact other plane, gate, and an astral spell,
then rubbed herself down with some oil of etherealness.  She
activated all six of her limited omniscience side effects at the
same time.  And finally, she chanted the mystic words, "Bric-a-
bracker, firecracker, sis boom bah / Dungeon Master, Dungeon
Master, rah, rah, rah!"
     And the multiverse collapsed into a big puddle around her.
     The scene looked like the usual long-and-drawn-out plane
travel special effects.  There were lots of pretty colors and
weird music playing on a 13th-century synthesizer in the
background.  She still felt her body clinging to the outside of
her spirit, just like always, but she couldn't see it.  Not even
with her permanent detect invisibility spell or her robe of eyes. 
She felt very alone, and very, very helpless.
     "What _will_ the Dungeon Master look like?" she tried to ask
herself.  It was in trying to speak that she realized there was
no air around her.  She was in a vacuum.  Even if there _had_ been
air out there, she noticed, she wouldn't have been able to
breathe it; oxygen or nitrogen would turn to ice.  The
temperature was absolute zero.  Her items and artifacts were
doing a very good job of keeping her alive.
     Then, the pretty colors started to dim.  All lights and
sounds -- however she could hear sound in a vacuum -- were
leaving her senses.  Within six seconds, it was absolute zero,
and absolute vacuum, and absolute silent, and absolute dark.
     She felt an almost imperceptible jostle.  'This is it,' she
thought.
     And as light and sound and temperature at last started to
return, her limbs -- as if of their own will -- began to pose in
an awkward mid-stride stance.  They also started to stiffen.  Her
whole body, even her head, began hardening into a mould which
almost, but didn't quite, fit the normal contours of her body.
     Even her eyes became frozen in place.  Fortunately, her robe
of eyes still afforded a 360 degree view of things.  The first
thing she could make out was a white landscape; a perfectly flat
white landscape.  As the details cleared, she began to see thin
blue lines networking the land, crisscrossing in a grid with each
line spaced ten feet apart -- or ten yards, she couldn't be sure. 
Above the horizon loomed an eerily lit, plaster-covered wall that
seemed to enclose several square miles on all four sides. 
Directly overhead was another wall, this time with short
stalactites hanging down from nearly every point.  Any one of
those stalactites could have been a very short and fat piercer,
except for the fact that piercers didn't particularly care for
bright light.  A yellowish-white sphere hung from the tremendous
ceiling, shining like an artificial sun.
     It was then she noticed that the walls weren't plain; there
was a gigantic wooden panel set into the flank side of the wall
to the left of her, with a gold-colored cylinder jutting out of
one side.  It looked rather remotely like a mammoth door.  Oh,
and there was one more detail in the room.  Perhaps she had not
wished to acknowledge its presence, but there was something else
there.  Or some_one_ else there.  Someone whom she could no longer
ignore.  Someone who, judging from the scale of the blue lines on
the ground, must have been 600 feet -- or yards -- tall.
     The giant looked away from the papers in his hands and
stared at Ridiculous Sword through his thick glasses.  His
eyebrows lowered as he pointed at her.  "YOU!  What are you doing
here?!"
     Ridiculous Sword couldn't move her mouth to speak, but she
could still use telepathy.  'You must be the Dungeon Master.'
     "Darned right I'm the Dungeon Master!" he insisted, setting
some of his papers down and inadvertently dropping a 20-sided
die.  "Brilliant deduction!  You don't have a 19 intelligence for
nothing!"
     Ridiculous Sword glanced at her reflection in his
spectacles.  She looked nothing like herself.  She was metallic-
gray, adorned in a lifeless mockery of a magician's robe.  She
looked like a metal statue of some girl wearing long robes and
holding her hands in a spell-casting position.  Her feet rested
on a circular metal base half a foot high and three feet wide. 
In short, she looked just as stiff and motionless as she felt.
     'You undoubtedly know why I'm here, O great and powerful
Dungeon Master.'
     "Of course I know why you're here!  Duuuuuuuuuuuuuh!"  He
whacked his right hand limply against the chest of his
horizontally-striped T-shirt.  "You wanna find out more about
Gross Sword!  Well, you little twit, I know _everything_ there is
to know about him!!"
     He thumbed rapidly through the pages in his hand and whipped
out a yellow-orange piece of parchment adorned with beautiful ink
illumination and ugly pencil scratches.  "Do you recognize
_this_?!" he thrust it in her face.
     Ridiculous Sword's eyes tried to widen (but couldn't, of
course).  'My character sheet!'
     "Exactly," his mouth grew into a sinister grin.  "I control
your character sheet.  I control . . ." he began the teensiest of
rips along the top edge, ". . . your destiny!"
     Ridiculous Sword felt a terrible pain run across the rift on
the top of her head.  She was having a splitting headache.
     "Feels terrible, doesn't it?" the Dungeon Master chortled. 
"You see, I know about all the ways you've been stretching the
rules.  I --"
     "Honey," a distant feminine voice interrupted from beyond
the door, "Your dinner's ready!"
     "Aw, mom!" the D.M. yelled toward the door, putting the
character sheet down, "I'm talkin' with Ridiculous Sword!"
     "Well, hurry it up," the phantom voice replied.
     The Dungeon Master turned back to his hapless audience of
one.  "As I was saying, I know about how you wear five, ten, or
even fifteen magic rings on a single hand.  I know about your
percentile dice that are marked with zeroes on all the faces.  I
know about how you can buy magic items on the black magic market
at cost.  I know how you change character classes not once, but
ten times.  I know," his voice tried to grow more impressive,
"How you kill centaurs and take their four one-million-gold-piece
gems!"
     'So you want us to stop doing all that, is that it?'  She
would have shivered nervously if she could move.
     "Stop it?  Are you kidding?  _I_ was the one who _let_ you do
all that in the first place!"  He thrust a finger right
underneath her dull metal nose.  "So that means you _owe me,
doesn't it!  I let you types get away with _plenty_!  And you know
what?  It was getting _boring_!  That's right, boring as Hell!  Or
as the Abyss, or as Tarterus, or as whatever other plane you want
to use in a sentence!  Why do you think I let Gross Sword get 80
million experience points and be a chaotic-evil killing machine,
huh?!  For _play_ balance!!"
     'So _that's_ why we couldn't hit each other when we were
fighting, even though all our weapons had the final word power.'
     "They do?"  He picked up one of the sheets just beneath her
character sheet.  "Wait a minute, they do, don't they?  So that
would mean that each of you should have hit each other after the
other person attacked.  I played that wr-- er, uh, I mean, of
_course_ that's why I did it!  I'm the Dungeon Master!  I couldn't
have let you kill each other then because, because . . . uh . . .
because I still wanted Tiamat to die!"
     'But Tiamat's still --'
     "Er, Bahamut, I mean!  Yeah, that's it, I had to have Gross
Sword kill Bahamut!"  He picked her up off the white landscape
and brought her to his eye level.  Ridiculous Sword's robe of
eyes told her that the white landscape she'd been standing on was
actually a tremendous sheet of parchment atop a huge folding
table.  "And _you_ can't do anything about it!"  He turned her to
face the circular receptacle standing in the corner.  She'd
already scanned it with her x-ray vision and knew it was full of
crumpled documents.  "There's where Sick Sword is now!  See?  I
tore her in half!  Nyaaah!  Your mom is _DEAD_!  Dead dead dead
dead dead!  And I burnt her character sheet, so that not even
Scotch tape could bring her back!"
     'Er, Scotch what?'
     "_SHUT UP, YOU STUPID PUKE_!"  And with that curse, he hurled
her back down at the white landscape.
     She hit the ground so hard, in fact, that her spirit got
jarred loose from the metal statue and she continued to fall
through the table and into the darkness beyond.
                                #
     What she emerged into looked like the Astral Plane.  It
wasn't the Astral Plane, though, as anyone who had really been
there could tell you.  It was, in fact, the Prime Material plane;
yet she was not on Central Earth.  She was on her _way_ to Central
Earth, though.  She found that out right quick, yessirree.  Just
as soon as she saw the big blue-with-white-cloud-specks disk rush
toward her at a relativistic speed.
     Instantly, she kicked in her permanent double-strength
potions of flying and levitation as her ring of earth elemental
command automatically engaged its feather falling power.  That
barely made a dent in her speed.  The next instant she hit
Central Earth's atmosphere and would have burnt to a cinder (or a
plasma) if not for Artifact Prime Power DD.  That slowed her down
somewhat, but not enough, she calculated, to smack her into the
ground subsonic.  She thought about teleporting upward to give
her more time to slow down, until she remembered that the $#@!ing
rules didn't allow her to teleport anyplace where there wasn't a
solid surface.  She watched helplessly as Central Earth rushed up
to greet her.
     The cloud layer zoomed toward and past her in the space of a
heartbeat.  A normal heartbeat, that is, not the heartbeat of a
disgusting character under the influence of a permanent potion of
speed at twice normal strength.  She could see the gridlike
division of landplots beneath her now -- they reminded her,
ironically, of the blue lines on the Dungeon Master's map.  The
continental outline and the land patterns made her destination
clear: she was hurling down just outside of town, aimed straight
for her mother's small keep from whence she'd gone to visit the
D.M. in the first place.  She wished she had time to scan the
castle with her x-ray vision, just to see whether or not her
physical body was still in there.  Just to see if this wasn't
some terrible falling nightmare she was going to wake up from in
a cold sweat.  But the wind and the pressure and the heat all
felt far too real to her for it to be a dream anyway.  And there
wasn't a damned thing she could do to save herself from the fall.
     The next instants flew by all too quickly.  She saw the keep
explode into her visual field, saw the east parapet heading
straight toward her, heard the loudest stony screech as her sight
blacked out, and felt an impact akin to someone hitting her with
a pillow the size of the astral plane.  She opened her eyes some
six million microseconds later, and glimpsed clear blue sky
pierced by a dark gray castle tower.  A bird's cheerful midday
song accompanied the hurried approach of human -- or at least
half-human -- footsteps.
     "Ridiculous Sword!" Ringman's voice neared from around a
corner.  "Are you still alive?!"
     She craned her stiff neck forward and managed to look at
Jimmy's astonished face.  She smiled weakly at him.
     "You musta been going supersonic when ya hit the ground!"
Jimmy relayed.  "How come you didn't get splattered into a
zillion pieces?!"
     She glanced to her left at the outer stone wall of the
castle seven-odd feet away from her, and understood.  She smiled
at Jimmy again and pointed at the masonry.
     "Huh?" Jimmy huhed.
     "Oh, I get it," Disgusting Sword said, appearing virtually
from out of nowhere.  "You didn't take any damage because you
fell within eight feet of a wall."
     Ridiculous Sword made the O.K. sign, as if to say "perfect,"
and slumped back flat onto the ground.  This whole experience had
just about taken everything out of her.
     Ringman arrived and knelt beside his second daughter.  The
next moment, when he realized that she'd come through totally
unscathed (as usual), he asked, "What did you find out?"
     "Yeah!" Jimmy enthused.  "What'd the Dungeon Master look
like?!"
     Ridiculous Sword exhaled deeply.  "He is the most nasty,
ruthless, egotistical, self-righteous, manipulative being it has
ever been my displeasure to meet.  It makes me sick just to think
that I'm living in _his_ multiverse."
     Disgusting Sword blinked uncomfortably.  "So did you find
out anything about our dear, beloved brother?"
     Ridiculous Sword nodded solemnly.  "Uh huh.  I know why the
D.M. wanted him to get away with being a chaotic-evil brat for so
long.  And I know what I have to do. . . ."








                             PART FOUR

     Sick Sword's memory still haunted Ringman like Isolde's did
Tristan.  Like Juliet's did Romeo.  Like Thisby's did Pyramus. 
Like Rock Hudson's did Jim Nabors.  Like --
     "Enough, already!" Ringman sneered.  "We get the picture!"
     Homer the brownie rode in back of Ringman on his warhorse,
as usual.  Disgusting Sword and Ridiculous Sword floated through
the air next to them.  Peter Perfect rode his own warhorse aside
Ringman's, holding the reins stiff-armed.  The horse seemed a
little uneasy about this whole setup, as did Prometheus.  Jimmy
lagged a little behind everyone else (staying clear of the
horse's trail, of course), swishing the Sick Sword menacingly
through the air.
     "So what's this big plan of yours, R.S.?" Jimmy asked.
     "Yes, Ridiculous," Ringman inquired, "I'd also like to know
what we're about to get ourselves into, so I can decide whether
or not I should be afraid of it."
     "Well," Ridiculous Sword began, "The first thing we've got
to do is lure Gross Sword back out into the open.  That's why
we're heading for The Great Big Clearing That Happens To Be Even
A Little Bigger Than The Clearing Sick Sword Built Her Keep In."
     "Ah," Ringman ahed, "So there won't be any innocent
bystanders for him to hack up."
     "No, just to give us some maneuvering room.  Oh, by the way,
I just remembered: Ringman, you've gotta upgrade your ballista. 
Plus 1 won't hit anyone protected by a double-strength potion of
invulnerability."
     Ringman buried his face in his right gauntlet.
     "Aw, don't bother him about it," Disgusting Sword told her,
"Peter Perfect doesn't have a spoon of stirring anyway.  So, tell
us more about your plan."
     "Why don't _you_ tell 'em, sis?"
     "_I_ don't know your plan."
     "But you can read my mind."
     "Not when you always have a mind blank spell up."
     "Oh, all right," Ridiculous Sword acquiesced.  "Anyway, we
get Gross Sword to come to us.  Disgusting Sword and I will keep
him occupied by meleeing him and not hitting.  Meanwhile, he'll
keep _us_ occupied by meleeing us and not hitting.  And then," she
pointed to Jimmy, "You hit him with Secret Weapon XJ-46."
     "Right," Jimmy grinned, instinctively moving his left arm
behind his back.
     Quizzically, Ringman looked behind Jimmy's back.  All he saw
was a left hand clutching air.  Then the paladin fingered his own
torso and decided, 'I think I'd better keep this Invulnerable
Coat of Arnd on for the duration.'
     "And that's the whole plan?!" Homer complained.  "Hit him
with Secret Weapon XJ-46?!  No escape routes, no back-ups, no
ideas of what to do if Gross Sword's still alive _after_ your big
lollapaloozer hits him?!"
     "Oh, he probably _will_ be still alive after he's hit.  I've
already thought of that."
     They reached the geometric center of the clearing and
stopped.  Ridiculous Sword solemnly declared, "The time is
right."
     "Uh," Ringman interrupted, "Don't we have to wait for the
three suns to align or something?"
     Ridiculous Sword grimaced at him.  "Central Earth only _has_
one sun!  Sheish, for a paladin you sure have a weak stomach!"
     "You ready?" Disgusting Sword asked of everyone (but of
Ridiculous Sword in particular).
     Ridiculous Sword nodded matter of factly.  "I'm ready."
     Jimmy smiled like a little boy hiding a secret.  "I'm
ready."
     Ringman and Homer blinked at each other.  "We're not ready."
     "Good, we're all in agreement then," Ridiculous Sword
declared.  She raised her horn of blasting into the wind, and
yelled through it: "GROOOOOOOOOOOSS Sword!  Come out come out
wherever you are!"
     The clear-blue sky seemed to rumble a reply as Ridiculous
Sword put her horn away and both she and her sister began to cast
the same spell.  What spell it was they were casting, no one but
they had any idea.  Homer the brownie, suddenly aware of his
vulnerability in only having four hit points and a _positive_
armor class, ran around behind Ringman's warhorse and blended in
with the surroundings.  Peter Perfect, of course, just sat there
stiff-armed on top of his horse.  Ringman drew his (merely +5)
holy longsword and raised his shield.
     The air felt tense.  Very tense.  Ringman probably could
have drawn a spark by touching metal if he wasn't grounded to his
armor.  He wished to his deity that his daughters would hurry up
and finish whatever spell it was they were casting.
     Then, he saw it.  So did everyone else, for that matter; it
was rather hard to miss.  Six seconds ago the sky had been pure
azure, but now it was dominated by a single gigantic, swirling,
black cloud reaching all the way to the ground.  And into the
center of the Great Big Field, out of the cone of this cyclone --
no, hurricane was a better word -- dropped the single most
powerful force of chaotic-evil in the multiverse.
     And flanking him at ten yards intervals dropped four twelve-
foot-high humanoid machines.
     "Golems!" Ringman gasped.  Ridiculous Sword or Disgusting
Sword could have told him that, of course, but they were still
busy saying magic words and waving their arms around.  This
scared Homer even more, and even Jimmy and Ringman's warhorse
began to get lumps in their stomachs.  (Though Peter Perfect, of
course, just sat there in the saddle with his arms out stiff.) 
These golems were big, and broad, and dark-colored, and noisy. 
Very noisy.  One solid, clanking step from any of them could set
off a fault line.  Ringman had a slight feeling that he was
outclassed.  "Uh . . . Ridiculous Sword . . . Disgusting Sword   
. . . could you hurry it --"
     "Ha haaaaaah!" the boy in the middle gloated, drawing
attention back to himself (as well as the Gross Broadsword and
the Gross Hand Axe).  His sandy brown hair framed a dark, hidden
fury within his eyes, but the whole of his expression drowned in
his sinister, sickening smile.
     It was then that it dawned on Ringman: _this_ was his son. 
This was the first time he'd ever so much as _seen_ his own boy. 
It was also the first time Gross Sword had seen _him_ for real,
even though he had probably spied on Ringman countless times with
a crystal ball or a mirror of mental prowess or whatnot.
     "So, father," the sinister smile mused as Gross Sword pulled
out card number ten from the Villain's Collection of Commonly
Used Sayings and held it up to display: "At last we meet."
     He tromped with painstaking slowness toward Ringman, Gross
Broadsword in right hand and Gross Hand Axe in left, relishing
the ever-increasing look of horror on his father's face. 
Perhaps, some dim flicker of conscience told him, he should be
paying more attention to his goody-two-shoes sisters; but they
were no threat and this paladin was far more entertaining.
     The holy sword quavered in Ringman's hands.
     And at that moment, Ridiculous Sword and Disgusting Sword
finished their spells by casting their hands toward the sky and
crying the activating phrase, "TEMPUUUUUUUUUUUUUS FUGIT!"
     If you thought the Sick Girls could move fast before, you
would have been flabberghasted to see them now.  Their normal
running speeds, which were already only slightly under mach five,
now increased SIXFOLD to a monstrous 30 720 feet per second. 
They could move six times as fast, attack six times as fast, cast
spells six times as fast, and even think six times as fast.  This
was the awesome might that Tempus Fugit had bestowed upon them.
     Gross Sword looked through his robe of eyes' rear eyes at
the two human cyclones now approaching him.  "God IV!" he gasped. 
"How could I have overlooked such a powerful spell!"
     Ringman wiped his brow, grateful that his murderous son's
attention had been drawn from him.  He stopped relaxing, though,
when he realized that the four golems hadn't been so distracted.
     Gross Sword assessed things as quickly as he could manage. 
Ridiculous Blur and Disgusting Blur would probably use their
speed to try and feint past his defenses.  He would have to keep
his guard up more now than ever before in his life.  The only way
he could hope for better-than-average odds of survival would be
to . . . <cringe> . . . PARRY -- without attacking!  He swallowed
his pride and went on the defensive.
     Ridiculous Sword reached him first.  She had been nearer to
him when she'd finished her spell.  Gross Sword crossed his
broadsword and hand-axe and readied to kick in his helm of
teleportation if it came to that.  And then, when Ridiculous
Sword closed to within ten feet of him, she . . . she _slowed
down_!  She slowed to her usual ridiculously-fast pace, instead of
the unbelievably-fast pace she'd just had.  Puzzled but
delighted, Gross Sword looked at Disgusting Sword, and found that
she had slowed down to below hypersonic as well.  And his father
behind him, and the four golems -- they looked to be moving six
times more lethargically than they had any right to.
     _Now_ he remembered.  Tempus fugit affected everything within
ten feet of its caster, friend or foe.
     Ringman hardly noticed his son's and daughters' little
skirmish; twelve feet of mindless metal was about to pound him
into the ground like a tent peg.  He would have to hit it first. 
He charged up the few remaining yards to the behemoth, shouting
to drown out his fear, and rammed his holy sword toward its metal
belly.
     He was in mid-swing, too late to stop the momentum of his
blow or the momentum of his thoughts, when he realized exactly
what _kind_ of metal this golem was made of.
     The sword's tip impacted into an impenetrable wall.  It
arched under the weight of Ringman's thrust, protested, and
finally snapped in two.  The upper half of the blade clattered
down soundlessly against the grassy earth.  Ringman stared in
horror at the half of a sword remaining in his right hand, then
slowly turned to the golem and exclaimed, "You have broken what
could not _be_ broken!"
     "I am pure adamantite," the golem replied.  "That is a +6
substance.  Your holy sword was only +5.  That was why it broke."
     Ringman nested his face in one hand and shook his head.
     "This has been a recorded announcement," the golem finished,
and smashed down on Ringman so hard it knocked him to the ground.
     Ringman rolled out of the creature's way and stood up.  Just
being stepped on by that thing would probably squish him,
mithral-alloyed armor and all.  The adamantite golem stumbled
harmlessly by, leaving six-inch-deep footprints.  Ringman figured
he might be able to keep its attention for a few minutes, but
then it might lose interest and turn instead on Homer or Jimmy or
his warhorse.  He needed to down this thing, and he needed a +6
weapon to do it.
     He looked over at Jimmy.  _He_ had a +6 broadsword.  He was
also using that +6 broadsword to fend off one of the other three
adamantite golems.  Ringman certainly couldn't take that sword
from Jimmy, even if he _could_ stomach taking the Sick Sword into
his hand again.  Ridiculous Sword and Disgusting Sword also had
+6 broadswords -- and +6 daggers, and +6 longswords, and +6 hand
axes.  And all eight of them were either in their hands or
dancing in the air to keep Gross Sword's attention.  And Gross
Sword probably wouldn't be willing to forfeit any of his +6
weapons to Ringman just yet.
     Where on Central Earth could he find a +6 wea--
     The green glow from Peter Perfect's hip almost seemed to
respond to his thoughts.  That poor-excuse-for-a-holy-sword _had
told him that Peter Perfect had paid the extra 20 000 gold pieces
to upgrade it to +6. . . .
     "No," Ringman convinced himself aloud.  "No.  No way.  
Un-uh.  No.  Absolutely not."
     The golem clanked toward him again.
     "Oh hell," he said, reached over, and drew the +6 sentient
holy avenger longsword from Peter Perfect's sheath.
     The sword was as perky as a +6 holy puppy dog.  "Ringman,
old buddy old pal old pal old pal!  So ya finally changed your
mind!"
     Ringman pointed a threatening finger at the sword.  "One
snide remark, Prometheus, and I'll find a way to break _you_,
too!"
     Prometheus shrugged in that way only holy swords can.  "My
personality score's higher than yours."
     The golem was nearly upon them.
     "Fine," barked Ringman, "For now just do what you do best!"
     "I thought you'd never ask," Prometheus replied and, in
concert with Ringman's strong right arm, rammed its tip right
through the adamantite golem's belly.
     "Ouch!" the golem commented.
     Ringman yanked the sword out of his opponent and swung
again, making a deep gash in the metal giant's side.  It was hurt
pretty badly now.  "Two attacks per minute," Prometheus
commented.  "I'm impressed."
     "New paladin rules," Ringman replied as he deflected another
swing of that adamantite arm with his +4 shield.  "Longsword
happens to be my weapon of choice."
     Ringman hacked twice at the behemoth again.  This mountain
of adamantite was doomed to fall, Ringman could be sure of that.
     Nearby, Jimmy was disposing of his adamantite golem in
classic fashion.  He couldn't attack as often as Ringman could,
since he was only first-level, but with the Sick Sword in his
hands he could hit just as hard, if not 10 damage points harder.
     The third and fourth golems, surprisingly, were already
mangled heaps of metal filings lying on the ground.  Disgusting
Sword figured maybe she didn't need both her Disgusting Dagger
AND her Disgusting Broadsword hacking futilely at Gross Sword at
the same time, so she sent the dagger off to tackle the golems
during one of its four-minute "dancing" episodes.
     All this time, Gross Sword and the Sick Girls had been
hacking at each other and at each others' dancing weapons with
absolutely no result.  Gross Sword could have sworn that
Disgusting Sword had only been armor class -27 last time he saw
her, which was certainly a weak enough A.C. for him to penetrate.
     "I could have sworn you were only armor class -27 last time
I saw you, Disgusting Sword," Gross Sword said, breaking their
silence.
     "I was," Disgusting Sword told him as she parried and
riposted.  (Her riposte missed, of course.)  "Look at my stones."
     Gross Sword quickly counted and assimilated the tiny baubles
whirling around Disgusting Sword's head.  Sure enough, there were
eighteen dusty rose stones in orbit about her that hadn't been
there before.  "Oh," he said, "I see.  Eighteen +1-protection
ioun stones to bring your armor class down to -45.  You're almost
as cheap as I am."
     Jimmy chopped down on his golem for the final time.  The
humanoid lump of adamantite gave a non-descript grunt and keeled
over.  "All right!" Jimmy cheered.  "I got one!  I . . . uh . . .
I . . . IIIIiiiiIIIIIII -- AAAAAGH!"
     Jimmy too keeled over, holding his stomach.  He looked like 
he was about to explode.  Ringman saw this and rushed to his
side, taking off his gauntlets in case he needed to lay on his
hands.  "What's wrong, son?!"
     Gross Sword glanced over at him when he heard that.  But it
wasn't he who his father was asking, merely Ridiculous Sword's
new playmate whom Ringman had fleetingly called "son."
     Ridiculous Sword looked over at Jimmy and smiled.  She knew
what was going on.
     Jimmy, unfortunately, did not.  He felt like the time his
strength had suddenly climbed from 18 to 18/00, only about a
hundred times worse and in all the wrong places.  He shook, he
held his throbbing temples, he bubbled over; he imagined himself
turning inside out.
     When at last the feeling ebbed and his stomach returned to
his belly, he noticed the last fading traces of a bluish aura
around him.  He would have noticed it while he was changing,
except he had more important things to worry about then.
     "That adamantite golem got you 26 700 experience points,
Jimmy!" Ridiculous Sword called out.  "Welcome to level five!"
     "Oh no," Jimmy shook his head.  This was just too much.  He
was grateful that he had a migraine headache so that he could
hold his head and feel something familiar.
     Gross Sword's Gross Swords clanged and clashed against
Disgusting Sword's and Ridiculous Sword's invincible defenses. 
His airborne dancing weapons parried theirs like bats out of the
Abyss.  There must be some way to end this stalemate, Gross Sword
figured.  There must be some power, say, that his weapons could
drum up.  His broadsword, his hand axe, his long sword, and his
dagger were all +6 unholy dancing defender flame-tongue frost-
brand anti-sun blades of wounding, sharpness, throwing,
thunderbolts, life stealing, venom, contradisruption, all dragon
slaying, speed, final w--
     "Hey, WAIT A MILLISECOND!" Gross Sword barked.  "How come my
weapons' Final Word power never kicked in?!?"
     "I was waiting for you to mention that," Ridiculous Sword
said with a wide grin.  She cocked her right arm back, put every
ounce of Atlas Strength she had into the swing, and hacked a
mighty blow at her nemesis with the Ridiculous Broadsword.  Gross
Sword threw everything he had into the sword's way -- even his
weapons' full defender abilities -- but it couldn't stop the
blade.  Razor-sharp adamantite tore across his abdomen like
thunder, boosted by the limitless strength in Ridiculous Sword's
arm and the Bracer of Irresistible Damage around her left wrist. 
When the smoke cleared, Gross Sword was down 330 hit points.
     "AAAAAAAAARRRRRRRRRRRGGGGHHHHHHHHHHHHHHHHHHHHHH!!!!!!!!!!!!"
Gross Sword wailed.  He backed up, blinded by a searing pain like
he had never felt before in his life.  His eyes were full of
reflexive tears when he looked back up.  "How in the name of
Demogorgon's ghost did you _do_ that?!!"
     "Easy," Ridiculous Sword explained.  "I had a feeling the
Dungeon Master would forget about our weapons' Final Word powers,
just like he did the last time we fought.  I was just waiting for
you to remind him."
     "The Dungeon Master . . ." Gross Sword's words flowed out as
slowly as pitch.  "The Dungeon Master . . . forGOT?!?"
     Ridiculous Sword merely half-smiled back.
     "Then . . ." Gross Sword figured, "Then . . . my swords'
Final Word powers should work on YOU, too!"  He started to swing
his broadsword.
     "Maybe," Ridiculous Sword replied, turned around, and ran. 
"But you have to catch me first!"
     Gross Sword gave chase.  He ran after her for nearly a tenth
of a second before he realized that she was outdistancing him
six-to-one.  Damn it, her "tempus fugit" field moved _with_ her;
when she ran away, she left Gross Sword out in the cold.  And
Disgusting Sword had already put a fair distance between herself
and her dear little brother.
     Gross Sword sheathed his broadsword and his hand axe.  "I
can fix _that_," he muttered.  He inhaled deeply, wiggled his
fingers, and began to chant.  The chant was an illusionist spell;
a fifth-level illusionist spell.  He had memorized tempus fugit
just like his sisters had.  He just hadn't been sure of what the
spell could do, that was all.
     A sword and a dagger buzzed through the air toward him at
blinding speeds.  They were Ridiculous Sword's.  Damn her dancing
weapons.  One hit from one of those things, backed up by her
Bracer of Irresistible Damage, would be enough to finish him off
in his current state of health -- he only had 279 hit points
left.  There was nothing he could do except abort his spell and
run backwards until he was out of the dancing weapons' 30 yard
range.
     So reasoning, he aborted his spell and ran backwards until
he was out of the dancing weapons' 30 yard range.
     Disgusting Sword wasn't about to let him out of her clutches
so easily.  After all, the old Grosser might still have another
tempus fugit spell memorized.  She ran around behind him and
charged with her dancing +6 holy longsword of wounding and her
dancing +6 holy hand axe of wounding.  Gross Sword saw the
disembodied weapons coming (he _was_ wearing a rode of eyes, after
all) and parried them with the Gross Broadsword and the Gross
Dagger.  The weapons didn't stand a chance of hitting -- poor old
Disgusting Sword was born too soon to put the Final Word ability
on her toys -- but still they hacked and thrusted and slashed six
times faster than they had any right to.
     "What gives?" Gross Sword said, fending off her dancing
weapons.  They had certainly been confusing the hell out of him
all this time.  "Your dancing weapons aren't inside of a tempus
fugit field!"
     "They don't have to be," Disgusting Sword called back. 
"Dancing weapons fight with exactly the same expertise and power
as their wielder.   And since _I'm_ in a tempus fugit field . . ."
     Gross Sword slapped a palm over his face (while still
parrying with the other hand, of course).  "That has to be the
most ridiculous distortion of the rules I've ever heard of!" he
exclaimed.
     Ridiculous or not, it was there, and being implemented; and
any second now Ridiculous Sword's weapons could catch up with him
and deliver the Final Word.  He was at a dangerous disadvantage. 
There was only one option open to him.  He grit his teeth,
swallowed his pride (which was a very large gulp), and declared,
"Tactical advance to the rear!"
     Then he teleported.
                                #
     Or at least he tried to teleport.  Neither the Ether nor the
Astral Plane would accept him.  He bounced off of the fabric of
the multiverse in a purplish haze, and snapped right back to his
point of origin.
     "WHAT?!?" Gross Sword winced.
     Ridiculous Sword grinned.  "You don't think we chose this
particular clearing by accident, do you?  Certain areas of
Central Earth, such as this place and the Cracks of Doom, are
inherently teleport-proof.  You've just walked right into our
trap."
     Gross Sword grimaced, then pulled out his last ace.  "Oh
yeah?" he breathed, "Well, there's one other trick I have left." 
He grinned.  "Which you didn't count on."  He moved his hands to
the sky, and his sisters recognized the gesture.
     "OH NO!" the Sword sisters gasped in unison.
     Gross Sword snickered evilly, finished his somatic
components with a groin thrust, and chanted the mystic words,
"ANTI-MAGIC SHELL!"
     Ringman stared on in awe as an invisible sphere 49 feet
across englobed his son.  Even _he_ knew what that spell could do. 
No magic item would function within its confines -- not a single
one.  Nor would any of the Sick Kids' permanent spells.  However,
Ringman _did_ recall his dearly departed Sick Sword once saying
something about --
     "Artifacts!" he yelped, pointing at Gross Sword.  "Your
artifacts can still work inside the shell!"
     Ridiculous Sword, Disgusting Sword, and yes, even Gross
Sword all turned to their father and grudgingly told him, in
chorus, "Not any more they can't."
     Ridiculous Sword beamed him a telepathic picture of Dragon
and Dragrace's latest issue, page 23, paragraph 3.  The paragraph
read:  "I, the Dungeon Master, the most lordly and highest
creator of all the multiverse, and the most incredibly omnipotent
of any of you jerk-offs out there, hereby declare that anti-magic
shells will now stop the effects of artifacts and relics, as well
as the effects of non-artifact magic items, like they were
supposed to do in the first place.  Furthermore, magic potions
imbibed before the anti-magic shell touches the imbiber will
function normally.  IN NO WAY IS THIS STATEMENT TO BE ASSUMED AN
ADMISSION OF DUNGEON MASTER ERROR!"
     "Oh," Ringman shrugged.
     The scene fell silent.  Gross Sword had summoned in the
ultimate defense.  "Ha HA," he chortled chaotic-evilly, "My
defensive powers still work, but your offensive powers do _not_!
Your little trick hasn't availed you at all, my _dear_ sisters!
And now that I know about this spot and about tempus fugit,
you'll never be able to trick me again!  BWA ha ha ha haaaa!!"
     Jimmy shook his head and looked at Ringman, who was standing
less than ten yards away.  "I dunno . . . it's that evil laugh
that gets me."
     That evil laugh . . . that old bwa-ha-ha.  That was
something Peter Perfect had _always_ wanted to do.  If evil
laughter wasn't prohibited by that darned code of paladinhood,
he'd . . . he'd . . .
     Something snapped.  Something that only Peter Perfect could
hear.  It was no louder than a blade of grass dying of thirst, or
a bottle of fresh milk evaporating, but it was like thunder
compared with the boundless silence that had been numbing Peter
Perfect's consciousness.  That evil laugh had brought him to the
surface, and allowed him to make another saving throw against the
charm he was under.  And this time, with the help of the magic
items the Sick Sisters had given back to him, he made it.
     He felt his warhorse's familiar adamantite saddle underneath
him; the saddle sores felt welcome indeed.  He surveyed his
situation.  Gross Sword was chortling up a storm inside of an
anti-magic shell the way Peter had always wanted to do. 
Ridiculous Sword and Disgusting Sword were standing there,
pondering their next move.  Jimmy was holding the Sick Sword in
his right hand and concealing his left behind his back, and
pretending to be something more than he was.  Homer the brownie
was hiding behind Ringman's warhorse.  And Ringman, staring in
awe at the fray (or lack thereof), was wielding his own dear
Prometheus!
     He was about to charge over and snatch the holy sword from
his rival's hands, but his combat sense stopped him.  The Sick
Kids would mash him to bits if they knew he was up and around. 
He couldn't let them know.  He put his arms out stiffly in front
of him, as they had been when he was charmed, and hoped that
Ridiculous Sword and Disgusting Sword were too busy to tune in to
his wavelength.
     'Prometheus!' his thoughts cried.
     Startled, the holy sword twitched in Ringman's hand. 
Fortunately for Prometheus, Ringman was too preoccupied to
notice.  'I hear you,' the longsword transmitted telepathically.
     'When I tell you too,' Peter Perfect continued without
flinching, 'Leap into my hand.  _When I tell you to_.'
     'Gotcha,' the sword replied.  'It's nice to hear from you
again.'
     'Yeah, yeah, whatever.'  Neither of the Sick Girls turned
their attention to him.  Good.  He watched, and waited.
     Gross Sword raised his voice.  "I demand one billion gold
pieces, in small coins, and safe passage out of this land!"
     "Gold pieces?" Ridiculous Sword asked.  "What would _you_
want with money?"
     "Oh yeah," Gross Sword corrected himself, "That was just
something I heard on one of those old late-night precognitions. 
But I _still_ demand safe passage out of this land!  Or I'll kill
each and every living thing within thirty miles, and you won't be
able to stop me!"
     "Oh, we won't, will we?"  Ridiculous Sword's grin grew as
wide today as it ever would.  "Jimmy, it's time!"
     Jimmy almost lost control with excitement.  He pulled his
long-concealed left hand out from behind his back to reveal: 
"Secret Weapon XJ-46!" he yelled, glinting the secret weapon in
the sunlight.  "A BALLISTA OF AUTOMATIC MISSILE FIRE!!!"
     Disgusting Sword and Ridiculous Sword whipped out their
Ollamh Harps and strummed an incredibly triumphantly dramatic
chord.  Jimmy continued, "And ballista targets --"
     And now everyone joined in, except for Peter Perfect who was
still pretending to be charmed, "-- ARE ARMOR CLASS TEN IF
EXPOSED TO SIGHT!"
     Gross Sword cringed at the oversized crossbow sitting on
Jimmy's shoulder, at the chain feeding into it.  Each link of
that chain held a missile the size of a javelin with the punch of
a small house.  He wanted to fireball that kid as fast as he
could.  Or iceball him, or lightningball him, or sonicball him,
or whatever he wasn't immune to through the Sick Sword he carried
in his other hand.  But to launch any such attack on him, Gross
Sword would first have to lower his anti-magic shell -- and that
would leave Ridiculous Sword's final-word weapons open to reduce
him to chowder.  There had to be some other way for him to remain
invulnerab--
     "Ha HAAAH!" Gross Sword suddenly recalled, "My permanent
double-strength potion of invulnerability isn't affected by the
anti-magic shell!  You still need a +2 or better weapon to hit me
with, but since every weapon that comes near me gets rendered
non-magical, you won't be able to hit me at all!!"
     "Not so!" Jimmy replied in the most majestic tone of voice
he had ever used.  Ridiculous Sword had planned for just such a
come-uppance, and had given him one final contingency.  "Your
invulnerability requires your opponents to have a weapon of at
least +2 _OR_ hit dice of 6+2 or greater!"
     Gross Sword shook a finger at him.  "No no no no!  I've read
page 75 of the Book of Infinite Wisdom myself, and the footnote
specifically states that 'This does not apply to characters of
any sort'!"
     Jimmy grinned.  "But it _does_ apply to monsters."  He flexed
his neurons in concentration, and kicked in his permanent potion
of polymorph (self).  A startling transformation occurred.  Two
seconds later, he stood before his gross foe as . . . a hill
giant.
     A hill giant with a ballista of automatic missile fire.
     A hill giant with eight hit dice (plus one to two additional
hit points).
     "A character with lots of hit dice might not be able to hit
someone who's invulnerable, even if he's shooting at him with a
ballista," Jimmy explained in a hill-giantish voice, "But a
_monster_ with lots of hit dice firing a ballista at him can!"
     He pulled the trigger, and tore the sky apart.  The weapon's
catapult-string twanged back and forth, accepting and releasing
its javelin-sized loads, with an unearthly speed all its own. 
Shot after shot filled each deadly second with over a dozen
missiles, none of which failed to strike home.  Gross Sword
cringed under the onslaught as the shafts riddled his body,
ignoring his permanent double-strength invulnerability and all
common sense.
     And he couldn't heal himself.  None of his clerical healing
spells or magical wish spells or vampiric rings of regeneration
would work unless he dropped the protection of his magic-proof
sphere -- and lowering his only last-ditch defense would leave
him wide open to Ridiculous Sword's weapons' Final Word attacks. 
Slaughtered or shish-kabobbed; one was hardly different from the
other.  His psionic cell adjustment ability would only heal a
couple hundred hit points of damage before he exhausted his
psionic power point reserve.  His monk ability of missile
deflection was useless against siege missiles like the ones that
were puncturing his body at that instant.  And he couldn't
teleport.
     Gross Sword was down to four hundred hit points, and
dropping fast. . . .
     Three hundred hit points.  He still couldn't teleport. . . .
     Two hundred hit points.  The supply of missiles going into
that ballista still seemed endless. . . .
     One hundred hit points.  Instinctively, he cowered behind
his own arms . . . which were also impaled.
     Weak flesh.  Weak weak weak.  All his special training, all
those experience points, all those artifacts he'd collected to
make him indestructible came to nothing now.  He was as naked as
when he was first born.  As naked as in the womb before his
birth.  As naked as when Tiamat's seed of evil had first infected
him.
     Fifty-three hit points.  He looked up, looked around for
salvation.  Jimmy's hill-giantish eyes were merciless.  His
sisters played their Ollamh lutes with mounting tension.  Only
Ringman, among the onlookers, seemed deeply concerned.  Gross
Sword's paladin father bit the knuckle of one of his gauntlets
and shook his head with impending sorrow.
     Father . . .
     Forty-five hit points. . . . Twenty-eight. . . .
     Twelve. . . .
     "_STOOOOOOOOOOOOOOOOOOOOOOOOOOOOP_!!!!!!!"
     Jimmy released the trigger on impulse.  Everyone froze.  The
music ceased.  Gross Sword's scream left a wake, a gulf of
deafening silence.
     And the mightiest force of chaos and evil in the multiverse
collapsed onto his knees and cried.
     "Mphg," he sobbed into his hands.  "Ahuc ahuc ahuc.  Wh-wh-
wh-what -- what've I done?!  WHAT HAVE I DONE?!"
     Ringman started to stride toward him, feeling urgent.
     "No no, Ringman," Jimmy warned him, "He's still dangerous!"
     "Nononononononononono!" Homer the brownie called out to the
ninth-level by-the-book paladin, shaking his head wildly with
each syllable.
     Ringman ignored their warnings and sauntered toward his son. 
He took his gauntlets off within the first ten yards; then his
helmet, then his greaves, then the Invulnerable Coat of Arnd. 
Armorless.  Completely defenseless.  He knelt down by his only
male child.
     Gross Sword looked up at him out of his hands, then buried
his reddened eyes right back into his hands again.  (Of course,
that didn't keep him from seeing anything, because he still had
on his robe of eyes.)  He shook his head and nearly flung off his
tears.  Then, slowly, he looked back into the eyes of his father
once more.
     He lowered his right hand.  Ringman grasped it.
     Gross Sword shook his head more slowly, with a furrowed
brow.  "Mom," he winced.  "Bahamut.  All of the people and non-
people.  They didn't deserve it.  They didn't do anything --
_anything_ -- to deserve what I did to them."  He inhaled sharply. 
"WHY DID I POLLUTE ALL THEIR LIVES?!  Why . . . why in Hell's
name didn't I listen to the last generation of Disgusting
Characters when they told me about Tiamat's seed of evil?!"
     'Tiamat's evil seed,' Peter Perfect thought.  'That was my
doing.  Hah, revenge never felt so good as that time.'  All the
other onlookers were thoroughly distracted.  It was not yet time
to leap into action, but it wouldn't hurt to get into a better
position.  He nudged his warhorse ever so subtly with an
invisible squeeze from his legs, and the mount trotted, slowly
and non-chalantly, toward Gross Sword and Ringman.
     Oblivious to Peter -- and still presuming him to be charmed
-- Ridiculous Sword and Disgusting Sword also made way toward
their brother.  He saw them coming and lowered his anti-magic
shield.  More barriers were the last things he needed right now.
     "This," Gross Sword went on, pouring out more than nine
years' worth of misery, "This was all wrong.  Damn it, I only
felt satisfied whenever I did something sadistic!  And every
victory was as hollow as the ones before it!  All those people I
hurt or killed, all with lives . . . and loves . . . of their
own."
     He looked into his father's eyes.  They were nearly as red
as his own.  "Oh, dad!" he sobbed, clutching him, "Why'd I do
that to you and mom?!"
     Ringman embraced him back.  He could barely breathe
straight, his feelings so choked him.  In all senses of the
words, he had finally met his son.
     Gross Sword broke the hug and looked into Ringman's eyes
again.  Ringman nodded, weeping with joy.  "Gross Sword, I think
I can be really proud of you now."
     Gross Sword shook his head, unable to accept it.  "Proud of
a mass murderer?  A tyrant?  Proud of Bahamut's and his mother's
-- your love's -- killer?  Proud of the being . . . who could
have set the whole multiverse back five thousand years?"
     And Ringman couldn't accept that, either.  "I was proud of
you," he admitted, "From the time I first heard you were born."
     They hugged each other again, and sat that way for a long,
long time.  Of all the spectators present, Prometheus was the
only one who was the slightest bit agitated.
     'Now?' the holy sword begged, telepathically.
     'No,' Peter Perfect returned, 'Not yet.'
     'Then when?!'
     'Soon, all right?!' Peter's thoughts barked.  'Geez, you're
more impatient than I am!'
     'But I wanna kill something!' the sword pouted.
     Peter was tempted to bury his eyes in his hand and shake his
head, but that would have given him away.  He stood firm as
always, arms still out stiff, and waited.  The moment would come.
     Gross Sword loosened his tearful embrace and looked down at
his own waist.  Four adamantite belt loops jutted out from his
Bluejeans of Free Action.  These loops housed the hafts and
blades of the four grossest chaotic-evil weapons in all the
multiverse.  The Gross Hand Axe, the Gross Longsword, the Gross
Dagger and, most powerful of all, the Gross Broadsword; four
weapons devoted solely to spreading limitless evil and chaos
through whoever chose to wield them.  Their overwhelming power
had been his idea, and his alone.  Nothing, he had figured, could
withstand the might of an anti-ranger and anti-paladin who used
those . . . those . . .
     "NO!" he blurted, startling everyone there because he still
had his mind blank spell up and they couldn't read his mind.  He
stood up.  "I don't care what powers those two classes give me! 
I don't . . . want . . . to be an anti-paladin or an anti-ranger
any more!"
     The heavens rebuked -- well, actually it was the Abysses
that rebuked, but you get the idea -- and Gross Sword, the only
son of Sick Sword and Ringman, gave up the powers of the anti-
paladin and the anti-ranger.
     Even Ridiculous Sword was impressed.  "Wow," she uttered,
finding it difficult to pick the right words.  "Now . . . now
you're only . . . a plain, average, run-of-the-mill psionic
druid/monk/assassin/thief/bard/illusionist/cleric/magic-user/
weapons master!"
     Gross Sword nodded solemnly, his eyes still wet.  "I know. 
A terrible loss -- but no price is too high now."
     "What a guy," Disgusting Sword whispered with utmost
sincerity into her sister's ear.
     "I _don't_ want to be some unholy force anymore!" Gross Sword
continued.  "I _don't_ want to be evil!  AND I _DON'T_ WANT THESE
DAMNED SENTIENT WEAPONS POLLUTING THE MULTIVERSE ANYMORE!!"
     He snapped the Gross Longsword and the Gross Dagger out of
their loop-scabbards and hurled them to the grassy ground, where
they impaled themselves point-first in the earth.  Without
another though, he followed up with the Gross Broadsword and the
Gross Hand Axe, thwunking the broadsword into the ground just as
he had the other two weapons but hurling the axe edge-first into
the soil beside them.  He flung the Gross Pair of Gloves off of
his hands and down next to the blades, then drew the Other Gross
Pair of Gloves from their holsters and cast them away.  That was
twice he'd hurled down the gauntlet in as many instants.  He
inhaled vehemently.  "I'm gonna have you six DESTROYED!"
     The six weapons erupted in light and shone directly on their
owner.  His robe of eyes was blinded, but he wasn't, of course. 
"YOU CANNOT DESTROY US," the Gross Weapons boomed together as
one.  "WE ARE ARTIFACTS.  YOU YOURSELF CREATED US AS MORE THAN
MERE SENTIENT MAGIC WEAPONS.  WE CANNOT _BE_ DESTROYED!"
     Ridiculous Sword chuckled for a few seconds, then broke into
roaring laughter.  "HA HA HA HA HA!!" she addressed the Gross
Artifacts.  "You don't think so, do you?!"  She reached into her
last portable hole, and rummaged for a tiny object.  She'd been
awaiting this day ever since her brother created those weapons in
the first place.  At last, she pulled out the one thing she'd had
prepared specifically for this event.
     It looked like one of those snap-lidded velvet cases that
diamond rings come in.  Disgusting Sword clasped her chest and
beheld the box in splendid wonder.  Ringman and Jimmy scratched
their heads and beheld the box in utter confusion.  Homer the
brownie didn't know _what_ in Sick Sword's name was going on, but
he was enjoying this whole show more and more.  The front of the
box was engraved, in block lettering, with simply, "The Ant Box."
     Ridiculous Sword flipped the box open.  "All right, you
Gross toasties!" she exclaimed.  "It's time for you to meet . . .
THE HUMBLE ANT!"
     "AAAAAAAAAAAAAAAAAAAHHHHHHH!!!!" the Gross weapons screamed.
     The centimeter-long black ant in the box lethargically
lifted its eyes up to Ridiculous Sword, and said, in that
language spoken only by ant-kind, "I think you ought to know I'm
feeling very depressed."
     She picked the ant up on her right index finger.  "Never
mind that," she replied in Antspeak, "I have a task for you!"
     "I won't enjoy it," the ant informed her.
     "I'm not _asking_ you to enjoy it," Ridiculous Sword told it. 
"I just want you to step on those chaotic-evil artifact weapons."
     "<GASP>!" the Gross weapons gasped.
     "You want me to go step on some artifacts," the ant groaned. 
"Here I am, brain the size of a pinhead and you want me to go
step on some artifacts.  Probably be the biggest load on my
intellectual capacities today."
     "For a humble ant," Jimmy sidetalked to Homer the Brownie,
"He sure has one pompous ego."
     Ridiculous Sword lowered the ant toward the weapons. 
Disdaining his task, the ant grudgingly crawled down from her
left index finger and trudged toward its quarry.  It reached the
Other Gross Pair of Gloves first.
     "ARRRRRRRRRGH!" the gloves screamed.  "NOOOOO!  DON'T SEND
ME BACK TO THE VOID!!"
     The ant stepped.  There was a <CRACK> where its foot came
down, and in a flash of blue-white light the gloves crumbled to
dust.
     The ant looked down at his work and moaned, "I'm not getting
you down at all am I?"
     And since the Gross Pair of Gloves was nearest to where the
Other Gross Pair of Gloves had been, that was the humble ant's
next target.  He walked toward it in that way that only humble
ants can.
     "NONONONONONO!" the Gross Pair of Gloves Wailed.  "Wh-What
have I ever done to you?!"
     "I have this terrible pain down all the formic acid ducts on
my left-hand side," he said with disdain, and destroyed the
second of the Gross Weapons.
     'How does that ant manage to destroy BOTH gloves at once by
stepping on ONE of them?' Disgusting Sword wondered.
     Gross Sword smiled and nodded in revelation-like gratitude
as the ant approached the Gross Hand Axe.  The axe wasn't quite
as receptive: "Uh . . . er . . . ah, that is . . . uh . . ."
     "Call this job satisfaction?" the ant asked rhetorically,
and stepped on the axe head.  The head broke in half and released
its essence back into the etheric ocean.  "'Cause I don't."
     It approached the Gross Longsword.  The weapon shivered with
fright.  "It wasn't enjoyable at all, what with being locked up
in that box all the time," the ant told it.  "The first ten
million years were the worst.  And the second million years, they
were the worst too.  The third ten million years I didn't enjoy
at all.  After that I went into a bit of a decline."
     "B-b-b-b-b-b-b-b-b-b-b-b-ut now you're OUT of the box!" the
sword argued.  "You can get away from all this and live your own
life!"
     "_LIFE_!!!" the ant bellowed.  No one present had any idea
that an ant's voice could get that loud.  He crunched down
solidly on the blade, and broke it forever in twain.  "Don't talk
to me about life."
     Two Gross weapons remained.  The Gross Broadsword and the
Gross Dagger were all that remained of Gross Sword's old evil. 
The ant approached the dagger, and the blade bargained for its
life: "Hey, ant!  Maybe we can make a deal!  Just claim me for
your own and I can give you . . . well, power beyond your wildest
imaginings!"
     "Sounds awful," the ant replied, and snapped the life out of
this blade to boot.
     'Whoo,' Peter Perfect thought.  'Some ant.  Glad Prometheus
isn't an artifact weapon.'
     And now, it came down to the Gross Broadsword.  Gross
Sword's number one weapon throughout his entire Disgusting
career.  The ant treaded his way toward its quarry as before, but
the Gross Sword didn't flinch.  It didn't cry out on fear, it
didn't beg for its life -- _it just sat there_.
     In an act of greatest contempt, the ant said nothing either
and just stepped on the blade.
     And nothing happened.
     It stepped again.  Again, nothing.  It stepped harder. 
Still nothing.  The ant looked solemnly up at Ridiculous Sword
and complained, "Hmmmph.  You seem to have miscalculated."
     "Ha HAAAAAH!!" the broadsword cheered.  "I knew it!  I _knew_
it!  I was Gross Sword's favorite, you see!  I was _much_ too
valuable to have the foot of a humble ant be the means of _my_
destruction!"
     Ridiculous Sword smirked.  "You're right.  Being stepped on
by an ant isn't the way _you_ were designed to be destroyed. 
_You_, Gross Broadsword, can only be destroyed --" She cast a gate
spell.  "-- by _HIM_!!"
     Through the purple glow of the gate stepped the most
monstrous humanoid being any of them had ever seen.  It towered
48 feet in the air and had skin of solid iron.  The very air
shook in his vicinity.  The being of iron stared down balefully
at the bunch gathered before him and bellowed, "WHO SUMMONS ME?!"
     Ridiculous Sword stepped forward and non-chalantly pointed
at the Gross Sword that was still on the ground.  "Step on that
artifact," she instructed him.
     The being's eyes grew wide with anger.  "YOU, A CHILD?!  You
_DARE_ SUMMON TALOS FOR SUCH A MIDDLING . . . er, such a middling,
uh . . . er . . ."  He recognized her.  "Er . . . uh . . . duh,
um . . . ooh . . . eeh . . . ah, ah, _OH, PLEASE DON'T KILL ME,
RIDICULOUS SWORD_!!  I have a wife and seventy-two hundred
children!  I'm only three thousand years old, I'M TOO YOUNG TO
DIiIiIiIiIE!!!"
     Ridiculous Sword shrugged her shoulders.  "Then step on that
artifact."
     Talos nodded meekly.  The Gross Broadsword knew what was
coming next, and it wasn't going to take it lying down.  Using
its telekinetic ability, along with its flight power and some of
its unused minutes of being a dancing weapon, the broadsword
leapt up and out of stomping range of the Triple Iron Golem.  "OH
no ya don't!" the sword barked.  "You're not getting rid of _me_
this easily!"
     Without a word, Ridiculous Sword rushed up to the Gross
Broadsword and plucked it from the air.  The sword vibrated in
her hand as it tried to escape.  "Let . . . go . . . of . . .
me."  The sword was trying to dominate her ego.  A futile
attempt, but it tried anyway.  She forced it down onto the
ground.  "Step, Talos," she said with infinite calm.
     The iron giant put its foot down on the sword.  That is, it
_tried_ to put its foot down on the sword, but the sword jerked
itself out of the way it the last instant.  Even in Ridiculous
Sword's Atlas-strength grasp it wasn't totally immobile.  Talos
stepped again, but again the sword evaded the giant iron foot.
     Everyone's attention was on Talos and the Gross Broadsword. 
The time was perfect.  Peter Perfect vaulted off his warhorse's
adamantite saddle, tumbled across the ground to an upright
position, and in all the confusion made it to Gross Sword's side
before even his robe-of-eyes-assisted vision could warn him.  He
had his hand around the artifact bracelet on his left wrist and
had yanked it off before Gross Sword even reacted.
     "Now, Prometheus!" he shouted.  Ringman looked down at his
hilt just as Prometheus pulled itself free.  The sword landed
grip-first in Peter Perfect's right hand.  "HAHAHAHAHAHAHAHAHA!"
Peter guffawed.  "Now _I_ have the power!!"  And with that, he
engaged the helm of teleportation which Disgusting Sword and
Ridiculous Sword had seen no harm in leaving on his head, glowed
purple for a moment, and vanished.
     The Gross Broadsword was so stunned, in fact, it didn't even
see Talos's foot coming down, and it died in a fit of breakage.
     "M-may I go now?" the Triple Iron Golem asked.
     "Yeah, sure, sure," Ridiculous Sword waved him away, not
even bothering to look straight at him.  Talos went back through
the gate and both disappeared.
     "Peter Perfect wasn't even charmed!" Disgusting Sword said
with disgust.  "He fooled us!"
     "Yeah . . ." Gross Sword noticed.  "And how the HELL did he
manage to do what he just did in a Teleport-Free Zone?"
     "Hell," Ridiculous Sword cast a thumb over her shoulder,
"That gate I made shouldn't even have worked.  Teleportation of
ANY kind is supposed to be prohibited in this region."  She cast
her eyes skyward.  "_But I guess the DUNGEON MASTER forgot about
that little detail_!!!"
     The skies rumbled once more, and a searing blue bolt of pure
damage hurled down from the heavens and struck Ridiculous Sword
squarely.  None of her magic items of protection could defend her
from that murderous bolt, as it was thrown directly from the
Dungeon Master's hand.  Ridiculous Sword's body lay there in a
fried heap.
     "Ridiculous Sword!" Ringman screamed, and knelt down beside
her.  "OH, MY DEITY!"
     And then, ten seconds after her death occurred, Ridiculous
Sword stirred and shook herself back to consciousness.  "Mmmm, hi
dad," she said.
     Ringman scratched his head in utter confusion.  "But . . .
but how did --"
     "Easy," his younger daughter told him, propping herself up
on her elbows, "I was dead, right?  Sent to Heaven, right?  Well,
all I had to do was cast a raise dead spell on myself and POOF,
here I am!"
     "This is one Hell of a crazy multiverse," Ringman mumbled. 
"Hey," he noted, "I thought raise dead was a minute spell."
     "It is," Ridiculous Sword came back, regaining more and more
of her composure with each second.  "Tempus fugit's still up. 
And we can still catch Peter Perfect."
     "But how?" Jimmy asked, joining them.  "Where did he go?"
     "Yeah," Gross Sword commented.  "I tried to pick him up on
clairvoyance just now, but all I got was snow.  He's still
mindblanked."
     "All right, then," Ridiculous Sword figured.  "If you were a
megalomaniacal paladin, what would you most want to do?"
     "Take over the world," Jimmy said.
     Ridiculous Sword winked at him.  "Right.  And if you
couldn't take over the world, then what?"    
     Ringman rubbed his chin, then said, "You'd want to destroy
it."
     "Uh huh.  And that's most likely what he's set out to do."
     "Destroy the world?" Disgusting Sword puzzled.  "Before _we_
can find out about it?"
     "Right."
     Disgusting Sword had a revelation.  "Ohhhhhhhh."
     "All right," Ridiculous Sword drew a breath, "Hang on to my
coat tails, Jimmy.  You, Homer, ride with Disgusting Sword, and
Gross Sword, you take dad, okay?"
     Ringman did _not_ catch this at all.  "Wait, wait a minute. 
Where are we going?"
     By the time he said "we," Gross Sword already had him on his
back and Homer and Jimmy had already mounted up.  Ridiculous
Sword leapt into the air and told him, "To the basement of the
world!"
     The clearing whooshed by beneath them.  Soon, they were
passing over forests and towns, and then lakes and finally a wide
ocean.  Ringman was still confused.  "And where is this 'basement
of the world'?"
     "Where else?" Ridiculous Sword chuckled.  "On the bottom
side of Central Earth.
     Ringman mouthed the words "bottom side," then asked, "You
mean it's _flat_?"
     "Sure!  What did you think it was anyway, round?  Hah, we'd
all fall off then!"
     "Well, that makes sense," Homer the brownie concurred.
     The ocean passed serenely beneath them.  Soon, the blue of
the sky faded to a black, velvet backdrop against which the stars
shone more brightly than they ever did at night.  They were
reaching The Edge.  Ringman pointed helplessly as the boundary of
Central Earth -- circular, but so vast that up close it looked
straight -- rushed by beneath them, and they were in free space.
     "Whoa," Ringman moaned, feeling uneasily giddy.  "Whoa, this
feels weird!"
     "We're weightless now," Disgusting Sword informed him. 
"That's what happens whenever you leave the plate."
     Ringman nodded.  "I'll remember that next time I happen to
come here."
     Ridiculous Sword dipped down -- not that down had any real
meaning anymore -- and swung past The Edge.  Ringman looked
forward and saw the stars in their sphere of perfectly hard ether
swoop past; over his shoulder, the dirt and rock of The Edge
obscured more and more of the blue-capped top of that beautiful
world.  And at last, The Bottom reached his view.
     The Bottom was nothing like the blue-lit majesty of The Top. 
It was in deep night now, and would be until the sun set and
passed its light from the world above to the world below.  Yet
even by the dim light of the stars alone, Ringman could make out
the contours.  It was rough and craggy, dripping with stalactites
of rock and dirt.  There was no living sound, not even the breath
of life; only a hollow echo of their swift passage through this
Other World.  The hanging peaks passed above him, and he realized
that they were, indeed, _above_ him.  Back under the plate,
gravity had returned.
     Homer, of course, merely hung on for dear life through all
of this.
     Their course hugged the mountainbottoms and aimed straight
for the other side of the world.  In this space without blue air,
the other side could clearly be seen, even though its true size
was impossible to grasp.  But it was not the opposite side of the
plate that was their goal; it was the center.  Ringman peered
with as keen an un-disgusting eye as he could manage, and saw it. 
He was the first non-disgusting character in the history of
Central Earth to see it.  A tiny, tiny thread stretched down from
the center of the world and lost itself in the unfathomable
depths below.  The North Pole of Central Earth.  That was the
axis along which the plate rested, the reference point that
indicated which direction "down" was.
     "That thread," Ridiculous Sword told him, "Is called the
Thread of Gravity.  It's what generates our weight on Central
Earth.  Without that, everything would float off into free
space."
     Jimmy scratched his head.  He had only been disgusting for a
few weeks, and hadn't learned everything yet.  "So then . . .
that means that the plate itself should weigh something also."
     Ridiculous Sword nodded.  "That's right.  It does."
     "So then," Ringman interjected, "What's holding it up?"
     "Atlas," the Sick Kids said in chorus.
     Finally, it all started to dawn to Ringman.  Atlas had the
job of holding up Central Earth.  If Peter Perfect wanted to
destroy the whole world, his best bet would be to get rid of the
pillar that was holding it up.  That would be Atlas.  That was
why he took the Other Bracer of Irresistible Damage from Gross
Sword to begin with.
     The Center of Central Earth came closer and closer into
view.  Ringman could make out a tiny silhouette on the end of the
thread pushed right up against the plate.  It was a humanoid
silhouette -- no, _two_ humanoid silhouettes.  At last, Ridiculous
Sword cast a continual light spell on the nearest stalactite and
illuminated the situation in both senses of the words.
     Atlas, who was no larger than your average Greek athlete,
was still holding up Central Earth -- but just barely.  Terrible
wounds more than justified the exhaustion in his eyes and face. 
His feet could barely keep their grip on the thread.  Next to the
teetering titan stood a grinning Peter Perfect, waving Prometheus
to exalt the blood that now stained it.  He had wanted them to
catch up with him, to see his moment of triumph.  Ridiculous
Sword levitated herself up to the bottom of Central Earth and
used the inverted surface to run toward him at her full running
speed.
     Peter Perfect put up a restraining hand and stepped to
Atlas's side.  Ridiculous Sword stopped herself.  Prometheus went
down so that it just covered the world-holder's throat, and the
Other Bracer of Irresistible Damage around Peter's wrist pulsed
in blue-white readiness.  "One more step, Sick Kids," the
disgusting paladin announced, "And Atlas here gets it!"
     'Hoo boy,' Ringman thought.  Jimmy's thoughts ran along the
same lines.  Homer was too frightened to think.
     Gross Sword looked him levelly in the eye.  He never did
like this poor excuse for a paladin, but now his dislike for him
was for different reasons.  "You don't really want to do this,"
Gross Sword said to him.
     Peter Perfect did a take.  "What do you _mean_ I don't want
to do this?!  Of _course_ I want to do this!!"
     "You want to destroy everything on Central Earth just
because _you_ can't have it all?" Gross Sword put to him.
     "Darned right!" Peter exclaimed.  "Stupid old world.  What
did it ever do for _me_, anyways?  And besides, you people seem so
attached to this miserable little planet, full of so much vile
filth and sin and nasty other things that we paladins are out to
destroy, that if you don't agree to give me total control over
all beings on this planet, I'll snuff out Atlas right here and
now!"
     "And what would you do with total control?" Gross Sword
pressed on.
     "What would I _do_ with it?  Why, rule over it, of course!"
     "You mean play with it as you pleased."
     "Exactly!"
     "Like a toy, whose only purpose was to amuse you."
     "Yeah!"
     "And you call yourself a lawful-good paladin?" Gross Sword
and Ringman asked at the same time.
     Peter Perfect's eyes darted worriedly to either side.  He
still _felt_ like he had his paladin powers.  Sort of.  Didn't he? 
He shook his head, and with utter contempt, slashed the last
slash across Atlas's neck.  After the Other Bracer of
Irresistible Damage, his Titan Strength, the Axe of the Dwarvish
Lords' +2 weapon damage bonus, the cause-serious-wounds-by-touch
power of the Talisman of Al'Akbar, and Prometheus's own +6
magical bonus, he ended up doing 242 damage points, killing the
Titan-Who-Holds-Up-the-World instantly and inflicting temporary
paralysis on him to boot.
     And amid gaping horrors, Central Earth fell.
     No earthquake could match what happened on the plate's Upper
Surface.  No words can describe the sudden and inexplicable loss
of weight that everything thereon experienced.  On a world that
had grown up with and evolved everything it had into the concept
of _gravity_ -- for over four billion years -- freefall was simply
not within the realm of understanding.  Nor would it be for long,
as it was gravity's task also to hold the blue air to the surface
of the world.
     And as it fell, it landed on something.  Something that was
already in freefall.  Peter Perfect.  The blow was nothing more
than the force of, say, walking across a room and not stopping
before you ran into the wall.  Not enough to hurt anyone.  Not
normally.
     But the Book of Infinite Wisdom, or perhaps it was a
necessary reality-building article in Dragon & Dragrace, made a
stipulation about that.  It said that whenever a solid object
lands on somebody else, that object does a certain number of d6
worth of damage for every hundred pounds it weighs.  Central
Earth weighed six billion trillion tons.  And since there was at
least a _little_ mithral that hadn't yet been mined out of its
crust, it was considered a +4 or better weapon with regard to
what kinds of creatures it could affect.  Peter Perfect's
permanent potion of invulnerability thus rendered useless, he and
even his adamantite full plate armor were squished into an
unrecognizable bloody wet-spot a mile across.
     "Gee," Jimmy commented, "He didn't even say goodbye."
     "Yeah," Ringman noted, now in freefall himself, "But that
didn't keep Central Earth from falling!"
     "Somebody's got to catch it," Disgusting Sword commented.
     "Who'd be strong enough?" Ringman asked.
     "Somebody as strong as Atlas," Ridiculous Sword replied,
non-chalantly.  "Don't forget who you're in the company of."
     Ridiculous Sword flexed her 25*-strength muscles and
prepared to halt the falling slab . . . but Gross Sword slid in
ahead of her.  He braced his Atlas-strength legs against the
thread that was the North Pole, held up his Atlas-strength hands,
and with a calming breath and about three inches off leeway, he
brought the world to a stop.
     Having weight return to the people up top so abruptly was
almost as big a shock as having it leave in the first place. 
Massive property damage ensued, and most everyone was severely
shaken up -- but fortunately, no one was hurt.
     Ridiculous Sword caught her falling father with ease, not
taking her eyes from her brother.  Gross Sword stood there,
holding up the world between his shoulders, and heaved a mighty
sigh of relief.  Central Earth and all its inhabitants were safe
-- safe from losing their atmosphere to free space, and safe from
the Old Gross Sword's petty wrath.
     "Now," said Ridiculous Sword, "How are we going to brace
it?"
     "Uh, brace it?" Gross Sword asked.
     "Sure.  You can't just keep holding it up forever.  We've
gotta brace it with something."
     Gross Sword thought for an instant, then shook his head in
dismay.  "It would take a column of adamantite bigger than all
the adamantite in existence to support this much weight.  The
only force strong enough to hold up Central Earth, and keep it
held up, is somebody with twenty-five star strength.  Like me."
     Ringman's brow furrowed.  "But . . . but you can't just stay
here forever!"
     "Sure I can," Gross Sword surmised.  "Every twelve years or
so I can set Central Earth down on my shoulder blades and buy a
potion of longevity from the Black Magic Market for Black Market
Magic.  Uh, make that several potions of longevity, so that if
the first one backfires I can cancel it real quick.  And then I
can pick Central Earth up again and go back to work."
     Ringman shook his head.  "And what kind of a life is THAT?!"
     Gross Sword sighed.  "A sacrificial one.  Hell, I got us
into this scrape in the first place.  If I hadn't been suckered
over to the evil side of things, we could have all gone out
together and ridded ourselves of Peter Perfect once and for all.  
have to repay this world for the damage I've done.  This is the
only way I know how."
     "No," Ridiculous Sword replied.  "There's another way.  We
can train huge numbers of people to have 25-star strength, and
have them take turns holding up the plate.  For which they'll get
paid five silver pieces an hour, or some such."
     Gross Sword brightened up for a fleeting instant, then sank
back.  "No, it's better this way.  I don't deserve --"
     Ridiculous Sword cut him off.  "Damn it, Gross Sword, YOU'RE
WORTH MORE THAN THIS!!"
     Gross Sword blinked his eyes, realizing something but saying
nothing.
     Ridiculous Sword wrinkled her mouth shut and nodded.  "Let's
go.  Gross Sword, we're going to get you out of this predicament
even if you won't."
     She took Ringman's hand and gestured to Disgusting Sword,
Jimmy, and Homer.  Prometheus slid itself into Ringman's sheath,

grudgingly coming back to its first master for the third time. 
The war was over.  It was time for the healing to begin.








                             EPILOG

     Fordinchuarlikomfterrablaxxuuuuuchh'chh'chh-pt did not fit
Ringman's concept of an ideal vacation spot.  Ridiculous Sword
took him to that plane with _nothing_, since no material
possessions other than those created there could make the voyage. 
Ringman and his younger daughter materialized stark-naked in the
middle of a fuzzy, cold green place.  It took nearly a minute for
the paladin's vision to clear, for the green to resolve itself
into grass, and for him to cringe as a _not_-so-naked woman rushed
out to greet them.  He instinctively crossed his hands over his
groin.
     Ringman expected this woman to shout insults at them for
mucking about on _her_ lawn with all this interplanar travel
nonsense, but instead she smiled and waved to them.  She pulled
the front of her skirt away from her legs and bounded toward
them, unable to conceal her more-than-well-fed bulk.  "Fire
Eater!" she cried out, "Fire Eater!  You've come back!  Y--"
     She stopped about twenty feet away, finally able to make out
their features.  "Oh, excuse me," she apologized, one hand on her
heaving chest.  "I thought . . . say, are you two any relation to
the Fire Eater?"
     Ridiculous Sword extended a psionic probe and gleaned a
picture of the "Fire Eater" from the woman's mind.  The memory
was more than eleven years old, but it was clearly of Sick Sword. 
Ridiculous Sword nodded her head solemnly.  "The Fire Eater's
dead."
     "Oh."  The woman felt concerned for a few instants, then it
passed.  Especially when she took a good look at Ringman.  Her
lips slowly broke into a smile.  "Hey, what's _your_ name?"
     "Ringman," he replied, now shivering from the morning cold. 
He felt somewhat imposed upon, as well, until he looked into her
bright little eyes.  "What's yours?"
     She put her hands on his shoulders.  "My name's Izabella." 
She looked down a little lower.  "Mmm, you have quite a
physique."  She looked still lower.  "Yes, quite. . . ."
     "Thanks," Ringman replied, his teeth now chattering. 
Whoever invented the morning chill should be skewered.  "B-b-but
c-c-could you g-get me some c-c-clothes to wear?"
     Izabella puzzled momentarily, then leapt back to reality. 
"Oh, oh sure.  Sorry.  Follow me."
     She led them both into her farm house, gave them each one of
her old tattered terrycloth robes, and sat them down around a
small circular kitchen table.  She also poured them each a hot
drink.  As far as Ringman was concerned, hot dirty water never
tasted so good as now.
     "We're here," Ridiculous Sword broke in, "Because my mother
-- the Fire Eater -- promised to come back here one day to check
up on things.  She never got around to it.  So I decided to bring
my father here and myself."
     Izabella's bright little eyes narrowed to scrutiny as she
came closer to Ringman.  "You were the Fire Eater's wife?"
     "Well," Ringman shrugged, "For all intents and purposes,
yes."
     She stared at him out of the corner of her eye.  "You mean
you two weren't legally married?"
     "No, as a matter of fact, the Other Book of Infinite Wisdom
hadn't come out by then.  And that was the first place which
listed a marriage spell."
     Izabella shrugged.  "Oh, all right then," she complied, and
sat down next to him.  A little too close next to him, by most
counts, but Ringman smiled and put his right arm around her
anyway.
     "So," Ridiculous Sword continued, "How well have things been
working out here in North . . . uh, North . . ."
     "North Fliedershire," Izabella filled in the name of the
town.  "By the way, Ringman, how old are you?"
     "Thirty-two years young," he replied with a chuckle.  "And
Ridiculous Sword here is ten, and my other daughter and my son
are eleven and nine, respectively."
     "Her name's Ridiculous Sword?"
     He shrugged.  "Sick Sword picked it out."
     "Ah.  And, um, why didn't you bring your whole family here,
Ringman?"
     "Well," Ridiculous Sword told her, "Gross Sword -- that's my
brother -- is out holding up the entire planet of Central Earth;
and Disgusting Sword has already recruited over two thousand
Atlas-strength people to take turns taking Gross Sword's place
and is looking for more."
     _Holding up the planet_? Izabella mouthed in astonishment.
     "Oh, and Dad didn't bring me here," Ridiculous Sword
finished; "I brought him."
     "Mmm hmm," Izabella nodded slowly.  "So I see that the Fire
Eater's power runs in the family."
     "And more," Ridiculous Sword stated matter-of-factly.
     Izabella raised her eyebrows, then realized she hadn't been
paying attention to Ringman for nearly thirty seconds and put her
left arm around his shoulders.  "And, uh, what happened that your
brother has to hold up the planet?"
     Ridiculous Sword sighed.  "Some jerk who called himself
'Peter Perfect' killed Atlas, so _somebody_ had to stay and keep
the world from falling."
     "Yeah," Ringman agreed.  "Good thing the fall killed _him_,
too, or you kids might have had to get your hands dirty.  His
body got so splattered there's no _way_ anybody could resurrect
him now; so he'll stay in Heaven, completely out of harm's way
until some dummy decides to reincarnate him."
     "He killed Atlas and he _still_ got to go to Heaven?"
     "You betcha," Ringman said; "He was lawful-good.  Hmmm . . .
I wonder how he's making out in Heaven right now. . . ."
     Ridiculous Sword whacked herself on her 19-intelligence
forehead.  "Thanks for reminding me."  She cupped her hands in
front of Ringman and projected some blue-white mental energy
there.  "Peter Perfect sent me a telepagram from Heaven just this
morning.  Here, take a look."
     Ringman and Izabella drew closer as an image formed out of
the blue void.  A blond-haired man wearing a gold ring over his
head and a winged white choir robe resolved himself against a
backdrop of clouds and others dressed like him.  He was holding
his ears vehemently and screaming: "I CAN'T STAND THIS ANYMORE!! 
All I ever meet are a bunch of peace-minded angels strumming
their stupid harps!  BLEACCH!  Not even a lousy stinking little
piece of EVIL to stomp on!  THIS IS NO FUN AT ALL!!!"
     Ringman snorted a chuckle.  "Looks like he's gone to hell
after all."
     Ridiculous Sword folded her hands and the image vanished. 
"Getting back to why I came here in the first place: how has
North Fliedershire been holding out since the Fire Eater was last
here?"
     "Oh, _wonderfully_," Izabella said with a lilt.  "That nasty
old Smaugzilla made an excellent set of luggage.  And it was nice
not having a dragon burn down all your crops all the time, too. 
Funny thing, though -- I always thought dragons had huge treasure
hordes inside their caves.  When the townsfolk excavated this
one, all they found was an egg five feet across."
     "An egg?" Ridiculous Sword sat up.  "A dragon's egg?"
     "Well, we think so.  If it is we'll give the dragon baby
everything we've got to make it turn out good instead of evil
like its mother."
     "Make a red dragon turn out good?" Ridiculous Sword's voice
got more urgent.  "And this egg's been there for over eleven
years.  My God II, its incubation period's almost up!  We have to
get there, and I mean _now_!"
     Izabella shook her head nervously.  "Um, there are some
horses in the garage, if --"
     "No, I mean _right now_!"  She reached across the table and
grasped Ringman's and Izabella's free hands.  "Have you been to
this place where the egg is?"
     "Oh, countless times," Izabella told her.
     "Good.  I want you to close your eyes, and visualize this
place in your mind."
     She closed her eyes.  Ridiculous Sword picked up on her
thoughts; they were a bit foggy.
     "Really see this place in your head," Ridiculous Sword
pushed her onward.  "Visualize every detail you ever saw when you
were last there.  Every shade, every sound, every scent -- even
the air temperature, if you can remember it."
     Izabella did.  The image of the cave's mouth and the wooden
fence came in as sharply as the stars in space.
     "Good.  Now --"  Boink.  "-- is this it?"
     Izabella opened her eyes and gasped.  She was actually
there!  It was a lot cooler than the time she'd just visualized,
since the last time she'd been there was in early afternoon, but
this was the place!
     "Teleportation," Ridiculous Sword told her.  "I do it all
the time.  And that," she crossed the two-foot-high wooden picket
and stared at the red, speckled bulb in its center, "Must be
Smaugzilla's egg."
     "Uh huh," Izabella nodded.
     Ringman furrowed his brow.  Despite being an obscure ninth-
level by-the-book paladin, he did have certain powers of his own
which he could exercise.  "That's funny," he commented after a
few seconds, "It's supposed to be a red dragon egg, but I don't
detect any evil coming from it."
     "Me neither," Ridiculous Sword concurred.  "This is damned
strange."  She looked a bit more intently at the egg.  "My God
II!" she exclaimed.  "Look at this X-ray picture!"
     "How?" Ringman and Izabella asked simultaneously.
     "Oh, sorry," Ridiculous Sword caught herself.  "That isn't a
baby red dragon in there at all!"
     "No?" Ringman asked.
     "No!  The neck's the wrong length, the head resembles a
horse more than it does a lizard, and the skin has a metallic
sheen -- and there's not the slightest sign of deformity!  It's
just a plain, straight different species of _draco_!"
     Izabella's eyes grew suddenly distant.  "The legend!"
     "Huh?" Ringman asked.  "What legend?"
     "Not another one of _these_ again," Ridiculous Sword
muttered.
     "The legend of the Fire Eater's leftovers!" Izabella
exclaimed.
     "Ah, well that clarifies EVERYthing," Ringman muttered. 
Life in the multiverse could get _so_ confusing.  At times like
these he wished it was all just castles and damsels and dragons
and things once again -- those he could understand.
     "'After the Fire Eater's triumph,'" Izabella recited,
"'Eleven cycles of Hyperion's bronze chariot will go, and then
the fruits of the dragon's demise will ripen and a force that had
been lost will be replaced in the universe.'  The legend must
have been talking about this baby dragon!"
     "Or it could have been talking about baked potatoes,"
Ridiculous Sword sneered.  "That's the thing about these legends,
they're all so vague.  But I tell you what, there's only one way
we're going to find out.  Stand back."
     Izabella stepped back a few feet.  Ringman grabbed her and
pulled her behind a rock.  "When she says stand back," he told
her, "She means it."
     "Normally a baby dragon can hatch from its egg within six
months," Ridiculous Sword explained, "IF it has the warm body of
its mother to incubate it.  If not, the embryo won't die, but
it'll mature about as slowly as glass runs downhill.  It can take
upwards of eleven years.  This dragonette here is on the verge of
hatching; it just needs a little warmth to encourage it to come
out of its shell."
     "Uh, how much warmth?" Izabella asked.  Ringman suppressed a
snicker.
     "Oh, about the equivalent of --"  Ridiculous Sword cast a
fireball spell and centered it right on the egg.  The wooden
fence turned to ash, the rocks inside of it glowed a cherry red,
and Ridiculous Sword's terrycloth robe disintegrated.  Her hair
was a little mussed up, too; after all, a double-strength
permanent potion of fire resistance could only do so much.  "--
Red dragon breath."
     Ringman and Izabella came out from behind the rock in time
to see the egg crack.  The first shell fragment fell away, and a
polished (but damp) foot-long dragon head poked out of the hole
and glanced around.  Not seeing its mommy, it shut its eyes and
wailed a few bucketfulls of tears.
     Ridiculous Sword gabbed the head and stroked it.  That
calmed it down a bit, and gave it enough incentive to bust the
rest of the way out of its shell.  The sun chose just that moment
to peer over the horizon, and glinted off its dew-specked dragon
skin with an silvery-golden light.
     "My deity!" Ringman whispered.  "A silver dragon!"
     Ridiculous Sword looked back up at him and shook her head. 
"No.  A platinum dragon."
     "Platinum?" Ringman mouthed.
     "The first one to be born in over two thousand years.  The
first one to be born . . . since Bahamut."
     "A new lord of the dragons . . ." Ringman mused.
     "He'll have a lot to learn before he can become _that_ -- but
he has 401 years before he's an ancient dragon and ready for that
position, anyway."
     "Um, you're sure it's a he?" Ringman asked suspiciously.
     "Sure," his daughter assured him.  "All platinum dragons
ever born are male.  And besides, I checked."
     This puzzled the paladin still further.  "But if all
platinum dragons are male, that means that they can't reproduce."
     "That's 'cause they're a hybrid.  You see, when a gold and a
silver dragon mate, they produce an electrum dragon.  If this
electrum dragon then goes on and mates with a speaking, spell-
using dragon of another species -- any species, good or evil --
they either produce _no_ offspring, which is usually the case, or
they produce one of these."  She indicated the platinum dragon
chick in her arms.  "That's how Bahamut was born in the first
place."
     "So, then," Izabella put the pieces together, "Smaugzilla
had to have mated with one of those electric dragons?"
     "Electr_um_ dragons; and yes.  These affairs are rare
occurrences indeed, because electrum dragons never live past the
age of sub-adulthood.  But this one's here, and we're going to
keep it that way until he's able to take care of himself."
     Ringman whistled.  "Four hundred and one years.  Heck, it'll
take him fifty years just to grow into a full adult.  That's a
lot of time to devote to one creature."
     "Mm hmm.  Matter of fact, he'd probably be best off if he
were taken care of by someone from North Fliedershire.  Like you,
for instance, Izabella."
     Izabella gulped.  "M-me?  But I couldn't even raise cows
right!  I don't know anything about raising dragons!"
     "They can pretty much take care of themselves.  Just feed
him scrambled eggs and teach him how to speak -- and he'll be
able to tell you everything he needs by the time he's six months
old.  Send him off to magic college when he's 1, and he'll be
casting first-level spells before you know it."
     Izabella shrugged.  "Sounds simple enough, but --" she
smiled at Ringman "-- I could sure use a nice strong man to stay
and help me raise this dragon."
     Ringman pursed his lips.  "Or you and the platinum dragon
could come back to Central Earth with me.  I have a great little
keep set up in town. . . ."
     She stroked a finger along the hairy, exposed portion of his
chest.  "Well, we'll see."
     "A new Bahamut," Ridiculous Sword nodded and smiled.  The
dragon cuddled up against her chest and purred.  "A beautiful new
Bahamut.  I wonder what we should name him."
     "Bahamut the second?" Izabella offered.
     "Bahamut junior," Ringman chuckled.
     Ridiculous Sword rubbed her chin.  "How about Sick Dragon?"
     "NO!" Izabella and Ringman shouted as one.
     "You tell 'em!" a distant voice from behind intruded.
     "Huh?"  Ridiculous Sword turned around first, unaccustomed
to being without the 360-degree aid of her robe of eyes.  A naked
boy was running toward them.  He was easy to recognize.
     "Hi, Rid!" Jimmy said as he arrived two seconds later.  He
would have been out of breath except that he had an 18
constitution.  "Hi, Mr. Ringman!"
     "Jimmy, what are you doing here?" Ridiculous Sword asked
with one fist on her hip.
     "Oh, just trying out some psionic plane travelling.  I
shoulda guessed from the piles of junk that fell to the floor
when you two left that this plane doesn't allow any carry-on
luggage, but oh well.  Hey, who's the fat broad?"
     "Izabella," Ringman stared him levelly in the eye, "My new
girl-friend."
     Jimmy stopped himself.  "Oh. . . . And who's the dragon?"
     "Bahamut the second," "Bahamut junior," and "Sick Dragon"
all came out at once.
     Jimmy thought for a second.  "How about just calling him
'Bahamut,' like the old one?"
     "Well . . . why not?" Ridiculous Sword acquiesced.
     "Sure."
     "Sounds good to me."
     "Good," Jimmy sealed their agreement.  "But anyway, R.S.,
there was somethin' that's been buggin' me."
     "Yes? . . ."
     "When I turned into that hill giant and attacked GrossSword
with the ballista of automatic missile fire?"
     "Mm hmm . . ."
     "That shouldn't've worked.  Just because a hill giant has
6+2 or more hit dice doesn't mean _I_ got to have 6+2 or more hit
dice.  I was only fifth-level at the time.  I shouldn't have been
able to affect him."
     "I was wondering when you were going to figure that out,"
Ridiculous Sword told him.  "I won't tell the Dungeon Master if
you won't."
     Jimmy mopped his brow in relief.  "Agreed.  Oh, and one more
thing . . . about how I helped with stopping Gross Sword and
Peter Perfect and --"
     Ridiculous Sword held up a restraining hand.  "Wait . . .
don't tell me --"
     Jimmy nodded, and he, Ridiculous Sword, and Ringman all
joined in chanting the immortal words:
     "HOW MANY EXPERIENCE POINTS DO WE GET?"

-- 
Jeff Boeing / Roger M. Wilcox         cbcsc063@ma.secs.csun.edu
----------------------------------------------------------------
"Estas malpermesita entrudi sin en la evoluon de pli naivaj
kulturoj."  -- La Unua Direktivo, pli aw malpli
